// cdk-monitoring-constructs
package cdkmonitoringconstructs

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/cdk-monitoring-constructs/cdkmonitoringconstructs/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsapigateway"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsautoscaling"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscertificatemanager"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudfront"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatchactions"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscodebuild"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsdocdb"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsdynamodb"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsecs"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsecspatterns"
	"github.com/aws/aws-cdk-go/awscdk/v2/awselasticloadbalancingv2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awslambda"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsrds"
	"github.com/aws/aws-cdk-go/awscdk/v2/awss3"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssecretsmanager"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssns"
	"github.com/aws/aws-cdk-go/awscdk/v2/awssqs"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsstepfunctions"
	"github.com/aws/aws-cdk-go/awscdk/v2/awswafv2"
	"github.com/aws/aws-cdk-go/awscdkapigatewayv2alpha/v2"
	"github.com/aws/aws-cdk-go/awscdkappsyncalpha/v2"
	"github.com/aws/aws-cdk-go/awscdksyntheticsalpha/v2"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdklabs/cdk-monitoring-constructs/cdkmonitoringconstructs/internal"
)

// Properties necessary to create a single alarm and configure it.
// Experimental.
type AddAlarmProps struct {
	// Alarm description is included in the ticket and therefore should describe what happened, with as much context as possible.
	// Experimental.
	AlarmDescription *string `field:"required" json:"alarmDescription" yaml:"alarmDescription"`
	// Suffix added to base alarm name.
	//
	// Alarm names need to be unique.
	// Experimental.
	AlarmNameSuffix *string `field:"required" json:"alarmNameSuffix" yaml:"alarmNameSuffix"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperator awscloudwatch.ComparisonOperator `field:"required" json:"comparisonOperator" yaml:"comparisonOperator"`
	// Threshold to alarm on.
	// Experimental.
	Threshold *float64 `field:"required" json:"threshold" yaml:"threshold"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingData awscloudwatch.TreatMissingData `field:"required" json:"treatMissingData" yaml:"treatMissingData"`
	// Allows to override the default action strategy.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// If this is defined, the default resource-specific alarm dedupe string will be set and this will be added as a suffix.
	//
	// This allows you to specify the same dedupe string for a family of alarms.
	// Cannot be defined at the same time as alarmDedupeStringOverride.
	// Experimental.
	AlarmDedupeStringSuffix *string `field:"optional" json:"alarmDedupeStringSuffix" yaml:"alarmDedupeStringSuffix"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// Disambiguator is a string that differentiates this alarm from other similar ones.
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Specifies how many samples (N) of the metric is needed to trigger the alarm.
	//
	// If this property is specified, an artificial composite alarm is created of the following:
	// <ul>
	// <li>The original alarm, created without this property being used; this alarm will have no actions set.</li>
	// <li>A secondary alarm, which will monitor the same metric with the N (SampleCount) statistic, checking the sample count.</li>
	// </ul>
	// The newly created composite alarm will be returned as a result, and it will take the original alarm actions.
	// Experimental.
	MinMetricSamplesToAlarm *float64 `field:"optional" json:"minMetricSamplesToAlarm" yaml:"minMetricSamplesToAlarm"`
	// If specified, it modifies the final alarm annotation color.
	// Experimental.
	OverrideAnnotationColor *string `field:"optional" json:"overrideAnnotationColor" yaml:"overrideAnnotationColor"`
	// If specified, it modifies the final alarm annotation label.
	// Experimental.
	OverrideAnnotationLabel *string `field:"optional" json:"overrideAnnotationLabel" yaml:"overrideAnnotationLabel"`
	// If specified, it modifies the final alarm annotation visibility.
	// Experimental.
	OverrideAnnotationVisibility *bool `field:"optional" json:"overrideAnnotationVisibility" yaml:"overrideAnnotationVisibility"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
}

// Properties necessary to create a composite alarm and configure it.
// Experimental.
type AddCompositeAlarmProps struct {
	// Disambiguator is a string that differentiates this alarm from other similar ones.
	// Experimental.
	Disambiguator *string `field:"required" json:"disambiguator" yaml:"disambiguator"`
	// Allows to override the default action strategy.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// If this is defined, the default resource-specific alarm dedupe string will be set and this will be added as a suffix.
	//
	// This allows you to specify the same dedupe string for a family of alarms.
	// Cannot be defined at the same time as alarmDedupeStringOverride.
	// Experimental.
	AlarmDedupeStringSuffix *string `field:"optional" json:"alarmDedupeStringSuffix" yaml:"alarmDedupeStringSuffix"`
	// Alarm description is included in the ticket and therefore should describe what happened, with as much context as possible.
	// Experimental.
	AlarmDescription *string `field:"optional" json:"alarmDescription" yaml:"alarmDescription"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Suffix added to base alarm name.
	//
	// Alarm names need to be unique.
	// Experimental.
	AlarmNameSuffix *string `field:"optional" json:"alarmNameSuffix" yaml:"alarmNameSuffix"`
	// Logical operator used to aggregate the status individual alarms.
	// Experimental.
	CompositeOperator CompositeAlarmOperator `field:"optional" json:"compositeOperator" yaml:"compositeOperator"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
}

// Experimental.
type AgeAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddDaysSinceUpdateAlarm(metric interface{}, props *DaysSinceUpdateThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddDaysToExpiryAlarm(metric interface{}, props *DaysToExpiryThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddIteratorMaxAgeAlarm(metric interface{}, props *MaxAgeThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for AgeAlarmFactory
type jsiiProxy_AgeAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AgeAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewAgeAlarmFactory(alarmFactory AlarmFactory) AgeAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_AgeAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AgeAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewAgeAlarmFactory_Override(a AgeAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AgeAlarmFactory",
		[]interface{}{alarmFactory},
		a,
	)
}

func (a *jsiiProxy_AgeAlarmFactory) AddDaysSinceUpdateAlarm(metric interface{}, props *DaysSinceUpdateThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"addDaysSinceUpdateAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AgeAlarmFactory) AddDaysToExpiryAlarm(metric interface{}, props *DaysToExpiryThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"addDaysToExpiryAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AgeAlarmFactory) AddIteratorMaxAgeAlarm(metric interface{}, props *MaxAgeThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"addIteratorMaxAgeAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Properties necessary to append actions to an alarm.
// Experimental.
type AlarmActionStrategyProps struct {
	// Experimental.
	Action IAlarmActionStrategy `field:"required" json:"action" yaml:"action"`
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Experimental.
	DedupeString *string `field:"optional" json:"dedupeString" yaml:"dedupeString"`
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
	// Experimental.
	Alarm awscloudwatch.AlarmBase `field:"required" json:"alarm" yaml:"alarm"`
}

// Experimental.
type AlarmAnnotationStrategyProps struct {
	// Experimental.
	Action IAlarmActionStrategy `field:"required" json:"action" yaml:"action"`
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Experimental.
	DedupeString *string `field:"optional" json:"dedupeString" yaml:"dedupeString"`
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
	// Experimental.
	Alarm awscloudwatch.Alarm `field:"required" json:"alarm" yaml:"alarm"`
	// Experimental.
	ComparisonOperator awscloudwatch.ComparisonOperator `field:"required" json:"comparisonOperator" yaml:"comparisonOperator"`
	// Experimental.
	DatapointsToAlarm *float64 `field:"required" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// Experimental.
	EvaluationPeriods *float64 `field:"required" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Experimental.
	FillAlarmRange *bool `field:"required" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Experimental.
	Metric interface{} `field:"required" json:"metric" yaml:"metric"`
	// Experimental.
	Threshold *float64 `field:"required" json:"threshold" yaml:"threshold"`
	// Experimental.
	MinMetricSamplesToAlarm *float64 `field:"optional" json:"minMetricSamplesToAlarm" yaml:"minMetricSamplesToAlarm"`
	// Experimental.
	OverrideAnnotationColor *string `field:"optional" json:"overrideAnnotationColor" yaml:"overrideAnnotationColor"`
	// Experimental.
	OverrideAnnotationLabel *string `field:"optional" json:"overrideAnnotationLabel" yaml:"overrideAnnotationLabel"`
	// Experimental.
	OverrideAnnotationVisibility *bool `field:"optional" json:"overrideAnnotationVisibility" yaml:"overrideAnnotationVisibility"`
}

// Experimental.
type AlarmFactory interface {
	// Experimental.
	AlarmNamingStrategy() AlarmNamingStrategy
	// Experimental.
	AlarmScope() constructs.Construct
	// Experimental.
	GlobalAlarmDefaults() *AlarmFactoryDefaults
	// Experimental.
	GlobalMetricDefaults() *MetricFactoryDefaults
	// Experimental.
	ShouldUseDefaultDedupeForError() *bool
	// Experimental.
	ShouldUseDefaultDedupeForLatency() *bool
	// Experimental.
	AddAlarm(metric interface{}, props *AddAlarmProps) *AlarmWithAnnotation
	// Experimental.
	AddCompositeAlarm(alarms *[]*AlarmWithAnnotation, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm
	// Experimental.
	CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
	// Experimental.
	DetermineActionsEnabled(actionsEnabled *bool, disambiguator *string) *bool
	// Experimental.
	DetermineCompositeAlarmRule(alarms *[]*AlarmWithAnnotation, props *AddCompositeAlarmProps) awscloudwatch.IAlarmRule
	// Experimental.
	GenerateDescription(alarmDescription *string, alarmDescriptionOverride *string, runbookLinkOverride *string, documentationLinkOverride *string) *string
	// Experimental.
	JoinDescriptionParts(parts ...*string) *string
}

// The jsii proxy struct for AlarmFactory
type jsiiProxy_AlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AlarmFactory) AlarmNamingStrategy() AlarmNamingStrategy {
	var returns AlarmNamingStrategy
	_jsii_.Get(
		j,
		"alarmNamingStrategy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmFactory) AlarmScope() constructs.Construct {
	var returns constructs.Construct
	_jsii_.Get(
		j,
		"alarmScope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmFactory) GlobalAlarmDefaults() *AlarmFactoryDefaults {
	var returns *AlarmFactoryDefaults
	_jsii_.Get(
		j,
		"globalAlarmDefaults",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmFactory) GlobalMetricDefaults() *MetricFactoryDefaults {
	var returns *MetricFactoryDefaults
	_jsii_.Get(
		j,
		"globalMetricDefaults",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmFactory) ShouldUseDefaultDedupeForError() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"shouldUseDefaultDedupeForError",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmFactory) ShouldUseDefaultDedupeForLatency() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"shouldUseDefaultDedupeForLatency",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmFactory(alarmScope constructs.Construct, props *AlarmFactoryProps) AlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_AlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmFactory",
		[]interface{}{alarmScope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmFactory_Override(a AlarmFactory, alarmScope constructs.Construct, props *AlarmFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmFactory",
		[]interface{}{alarmScope, props},
		a,
	)
}

func (a *jsiiProxy_AlarmFactory) AddAlarm(metric interface{}, props *AddAlarmProps) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"addAlarm",
		[]interface{}{metric, props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) AddCompositeAlarm(alarms *[]*AlarmWithAnnotation, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm {
	var returns awscloudwatch.CompositeAlarm

	_jsii_.Invoke(
		a,
		"addCompositeAlarm",
		[]interface{}{alarms, props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		a,
		"createAnnotation",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) DetermineActionsEnabled(actionsEnabled *bool, disambiguator *string) *bool {
	var returns *bool

	_jsii_.Invoke(
		a,
		"determineActionsEnabled",
		[]interface{}{actionsEnabled, disambiguator},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) DetermineCompositeAlarmRule(alarms *[]*AlarmWithAnnotation, props *AddCompositeAlarmProps) awscloudwatch.IAlarmRule {
	var returns awscloudwatch.IAlarmRule

	_jsii_.Invoke(
		a,
		"determineCompositeAlarmRule",
		[]interface{}{alarms, props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) GenerateDescription(alarmDescription *string, alarmDescriptionOverride *string, runbookLinkOverride *string, documentationLinkOverride *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"generateDescription",
		[]interface{}{alarmDescription, alarmDescriptionOverride, runbookLinkOverride, documentationLinkOverride},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmFactory) JoinDescriptionParts(parts ...*string) *string {
	args := []interface{}{}
	for _, a := range parts {
		args = append(args, a)
	}

	var returns *string

	_jsii_.Invoke(
		a,
		"joinDescriptionParts",
		args,
		&returns,
	)

	return returns
}

// Experimental.
type AlarmFactoryDefaults struct {
	// Enables the configured CloudWatch alarm ticketing actions for either all severities, or per severity.
	// Experimental.
	ActionsEnabled interface{} `field:"required" json:"actionsEnabled" yaml:"actionsEnabled"`
	// Global prefix for all alarm names.
	//
	// This should be something unique to avoid collisions with other CTIs.
	// This is ignored if an alarm's dedupeStringOverride is declared.
	// Experimental.
	AlarmNamePrefix *string `field:"required" json:"alarmNamePrefix" yaml:"alarmNamePrefix"`
	// Default alarm action used for each alarm, unless it is overridden.
	// Experimental.
	Action IAlarmActionStrategy `field:"optional" json:"action" yaml:"action"`
	// Custom strategy to create annotations for alarms.
	// Experimental.
	AnnotationStrategy IAlarmAnnotationStrategy `field:"optional" json:"annotationStrategy" yaml:"annotationStrategy"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// Custom strategy to process dedupe strings of the alarms.
	// Experimental.
	DedupeStringProcessor IAlarmDedupeStringProcessor `field:"optional" json:"dedupeStringProcessor" yaml:"dedupeStringProcessor"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// If this is defined as false and dedupeStringOverride is undefined, the alarm prefix will be part of the dedupe string.
	//
	// This essentially stops the dedupe of different errors together.
	// Experimental.
	UseDefaultDedupeForError *bool `field:"optional" json:"useDefaultDedupeForError" yaml:"useDefaultDedupeForError"`
	// If this is defined as false and dedupeStringOverride is undefined, the alarm prefix will be part of the dedupe string.
	//
	// This essentially stops the dedupe of different latency issues together.
	// Experimental.
	UseDefaultDedupeForLatency *bool `field:"optional" json:"useDefaultDedupeForLatency" yaml:"useDefaultDedupeForLatency"`
}

// Experimental.
type AlarmFactoryProps struct {
	// Experimental.
	GlobalAlarmDefaults *AlarmFactoryDefaults `field:"required" json:"globalAlarmDefaults" yaml:"globalAlarmDefaults"`
	// Experimental.
	GlobalMetricDefaults *MetricFactoryDefaults `field:"required" json:"globalMetricDefaults" yaml:"globalMetricDefaults"`
	// Experimental.
	LocalAlarmNamePrefix *string `field:"required" json:"localAlarmNamePrefix" yaml:"localAlarmNamePrefix"`
}

// Wrapper of Alarm Status Widget which auto-calcultes height based on the number of alarms.
//
// Always takes the maximum width.
// Experimental.
type AlarmMatrixWidget interface {
	awscloudwatch.AlarmStatusWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for AlarmMatrixWidget
type jsiiProxy_AlarmMatrixWidget struct {
	internal.Type__awscloudwatchAlarmStatusWidget
}

func (j *jsiiProxy_AlarmMatrixWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmMatrixWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmMatrixWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmMatrixWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmMatrixWidget(props *AlarmMatrixWidgetProps) AlarmMatrixWidget {
	_init_.Initialize()

	j := jsiiProxy_AlarmMatrixWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmMatrixWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmMatrixWidget_Override(a AlarmMatrixWidget, props *AlarmMatrixWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmMatrixWidget",
		[]interface{}{props},
		a,
	)
}

func (j *jsiiProxy_AlarmMatrixWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_AlarmMatrixWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (a *jsiiProxy_AlarmMatrixWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		a,
		"position",
		[]interface{}{x, y},
	)
}

func (a *jsiiProxy_AlarmMatrixWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AlarmMatrixWidgetProps struct {
	// list of alarms to show.
	// Experimental.
	Alarms *[]awscloudwatch.IAlarm `field:"required" json:"alarms" yaml:"alarms"`
	// desired height.
	// Experimental.
	Height *float64 `field:"optional" json:"height" yaml:"height"`
	// widget title.
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
}

// Metadata of an alarm.
// Experimental.
type AlarmMetadata struct {
	// Experimental.
	Action IAlarmActionStrategy `field:"required" json:"action" yaml:"action"`
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Experimental.
	DedupeString *string `field:"optional" json:"dedupeString" yaml:"dedupeString"`
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
}

// Experimental.
type AlarmNamingInput struct {
	// Experimental.
	AlarmNameSuffix *string `field:"required" json:"alarmNameSuffix" yaml:"alarmNameSuffix"`
	// Experimental.
	AlarmDedupeStringSuffix *string `field:"optional" json:"alarmDedupeStringSuffix" yaml:"alarmDedupeStringSuffix"`
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
}

// Experimental.
type AlarmNamingStrategy interface {
	// Experimental.
	DedupeStringStrategy() IAlarmDedupeStringProcessor
	// Experimental.
	GlobalPrefix() *string
	// Experimental.
	LocalPrefix() *string
	// Dedupe string resolved like this: - If "dedupeStringOverride" is defined for an alarm, it will be used as a dedupe string.
	//
	// - If "alarmDedupeStringSuffix" from the alarm factory is defined, "GlobalPrefix-LocalPrefix-AlarmDedupeStringSuffix" will be used as a dedupe string.
	// - Otherwise, the alarm dedupe string will not be set.
	// If a dedupe string strategy is set, it will be used to process the final string.
	// Experimental.
	GetDedupeString(props *AlarmNamingInput) *string
	// Alarm name is resolved like this: - If "alarmNameOverride" is defined for an alarm, it will be used as alarm name.
	//
	// - Otherwise, the alarm name will be generated by joining: global prefix, local prefix, alarm name suffix, disambiguator.
	// Experimental.
	GetName(props *AlarmNamingInput) *string
	// Experimental.
	GetWidgetLabel(props *AlarmNamingInput) *string
	// Experimental.
	JoinDistinct(parts *[]*string, separator *string) *string
}

// The jsii proxy struct for AlarmNamingStrategy
type jsiiProxy_AlarmNamingStrategy struct {
	_ byte // padding
}

func (j *jsiiProxy_AlarmNamingStrategy) DedupeStringStrategy() IAlarmDedupeStringProcessor {
	var returns IAlarmDedupeStringProcessor
	_jsii_.Get(
		j,
		"dedupeStringStrategy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmNamingStrategy) GlobalPrefix() *string {
	var returns *string
	_jsii_.Get(
		j,
		"globalPrefix",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmNamingStrategy) LocalPrefix() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localPrefix",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmNamingStrategy(globalPrefix *string, localPrefix *string, dedupeStringStrategy IAlarmDedupeStringProcessor) AlarmNamingStrategy {
	_init_.Initialize()

	j := jsiiProxy_AlarmNamingStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmNamingStrategy",
		[]interface{}{globalPrefix, localPrefix, dedupeStringStrategy},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmNamingStrategy_Override(a AlarmNamingStrategy, globalPrefix *string, localPrefix *string, dedupeStringStrategy IAlarmDedupeStringProcessor) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmNamingStrategy",
		[]interface{}{globalPrefix, localPrefix, dedupeStringStrategy},
		a,
	)
}

func (a *jsiiProxy_AlarmNamingStrategy) GetDedupeString(props *AlarmNamingInput) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getDedupeString",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmNamingStrategy) GetName(props *AlarmNamingInput) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getName",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmNamingStrategy) GetWidgetLabel(props *AlarmNamingInput) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getWidgetLabel",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AlarmNamingStrategy) JoinDistinct(parts *[]*string, separator *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"joinDistinct",
		[]interface{}{parts, separator},
		&returns,
	)

	return returns
}

// Experimental.
type AlarmSummaryMatrixWidget interface {
	awscloudwatch.ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// Experimental.
	Props() *AlarmSummaryMatrixWidgetProps
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for AlarmSummaryMatrixWidget
type jsiiProxy_AlarmSummaryMatrixWidget struct {
	internal.Type__awscloudwatchConcreteWidget
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) Props() *AlarmSummaryMatrixWidgetProps {
	var returns *AlarmSummaryMatrixWidgetProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewAlarmSummaryMatrixWidget(props *AlarmSummaryMatrixWidgetProps) AlarmSummaryMatrixWidget {
	_init_.Initialize()

	j := jsiiProxy_AlarmSummaryMatrixWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmSummaryMatrixWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAlarmSummaryMatrixWidget_Override(a AlarmSummaryMatrixWidget, props *AlarmSummaryMatrixWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AlarmSummaryMatrixWidget",
		[]interface{}{props},
		a,
	)
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_AlarmSummaryMatrixWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (a *jsiiProxy_AlarmSummaryMatrixWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		a,
		"position",
		[]interface{}{x, y},
	)
}

func (a *jsiiProxy_AlarmSummaryMatrixWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AlarmSummaryMatrixWidgetPropertiesJson struct {
	// Experimental.
	Alarms *[]*string `field:"required" json:"alarms" yaml:"alarms"`
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
}

// Experimental.
type AlarmSummaryMatrixWidgetProps struct {
	// Height of the widget.
	// Experimental.
	Height *float64 `field:"optional" json:"height" yaml:"height"`
	// The region the metrics of this graph should be taken from.
	// Experimental.
	Region *string `field:"optional" json:"region" yaml:"region"`
	// Title for the graph.
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `field:"optional" json:"width" yaml:"width"`
	// Experimental.
	AlarmArns *[]*string `field:"required" json:"alarmArns" yaml:"alarmArns"`
}

// Representation of an alarm with additional information.
// Experimental.
type AlarmWithAnnotation struct {
	// Experimental.
	Action IAlarmActionStrategy `field:"required" json:"action" yaml:"action"`
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Experimental.
	DedupeString *string `field:"optional" json:"dedupeString" yaml:"dedupeString"`
	// Experimental.
	Disambiguator *string `field:"optional" json:"disambiguator" yaml:"disambiguator"`
	// Experimental.
	Alarm awscloudwatch.AlarmBase `field:"required" json:"alarm" yaml:"alarm"`
	// Experimental.
	AlarmDescription *string `field:"required" json:"alarmDescription" yaml:"alarmDescription"`
	// Experimental.
	AlarmLabel *string `field:"required" json:"alarmLabel" yaml:"alarmLabel"`
	// Experimental.
	AlarmName *string `field:"required" json:"alarmName" yaml:"alarmName"`
	// Experimental.
	AlarmNameSuffix *string `field:"required" json:"alarmNameSuffix" yaml:"alarmNameSuffix"`
	// Experimental.
	AlarmRuleWhenAlarming awscloudwatch.IAlarmRule `field:"required" json:"alarmRuleWhenAlarming" yaml:"alarmRuleWhenAlarming"`
	// Experimental.
	AlarmRuleWhenInsufficientData awscloudwatch.IAlarmRule `field:"required" json:"alarmRuleWhenInsufficientData" yaml:"alarmRuleWhenInsufficientData"`
	// Experimental.
	AlarmRuleWhenOk awscloudwatch.IAlarmRule `field:"required" json:"alarmRuleWhenOk" yaml:"alarmRuleWhenOk"`
	// Experimental.
	Annotation *awscloudwatch.HorizontalAnnotation `field:"required" json:"annotation" yaml:"annotation"`
}

// Experimental.
type AnomalyDetectingAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddAlarmWhenOutOfBand(metric interface{}, alarmNameSuffix *string, disambiguator *string, props *AnomalyDetectionThreshold) *AlarmWithAnnotation
}

// The jsii proxy struct for AnomalyDetectingAlarmFactory
type jsiiProxy_AnomalyDetectingAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AnomalyDetectingAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewAnomalyDetectingAlarmFactory(alarmFactory AlarmFactory) AnomalyDetectingAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_AnomalyDetectingAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AnomalyDetectingAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewAnomalyDetectingAlarmFactory_Override(a AnomalyDetectingAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AnomalyDetectingAlarmFactory",
		[]interface{}{alarmFactory},
		a,
	)
}

func (a *jsiiProxy_AnomalyDetectingAlarmFactory) AddAlarmWhenOutOfBand(metric interface{}, alarmNameSuffix *string, disambiguator *string, props *AnomalyDetectionThreshold) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"addAlarmWhenOutOfBand",
		[]interface{}{metric, alarmNameSuffix, disambiguator, props},
		&returns,
	)

	return returns
}

// Captures specific MathExpression for anomaly detection, for which alarm generation is different.
//
// Added to overcome certain CDK limitations at the time of writing.
// See: https://github.com/aws/aws-cdk/issues/10540
//
// Experimental.
type AnomalyDetectionMathExpression interface {
	awscloudwatch.MathExpression
	// The hex color code, prefixed with '#' (e.g. '#00ff00'), to use when this metric is rendered on a graph. The `Color` class has a set of standard colors that can be used here.
	// Experimental.
	Color() *string
	// The expression defining the metric.
	// Experimental.
	Expression() *string
	// Label for this metric when added to a Graph.
	// Experimental.
	Label() *string
	// Aggregation period of this metric.
	// Experimental.
	Period() awscdk.Duration
	// Account to evaluate search expressions within.
	// Experimental.
	SearchAccount() *string
	// Region to evaluate search expressions within.
	// Experimental.
	SearchRegion() *string
	// The metrics used in the expression as KeyValuePair <id, metric>.
	// Experimental.
	UsingMetrics() *map[string]awscloudwatch.IMetric
	// Make a new Alarm for this metric.
	//
	// Combines both properties that may adjust the metric (aggregation) as well
	// as alarm properties.
	// Experimental.
	CreateAlarm(scope constructs.Construct, id *string, props *awscloudwatch.CreateAlarmOptions) awscloudwatch.Alarm
	// Inspect the details of the metric object.
	// Experimental.
	ToMetricConfig() *awscloudwatch.MetricConfig
	// Returns a string representation of an object.
	// Experimental.
	ToString() *string
	// Return a copy of Metric with properties changed.
	//
	// All properties except namespace and metricName can be changed.
	// Experimental.
	With(props *awscloudwatch.MathExpressionOptions) awscloudwatch.MathExpression
}

// The jsii proxy struct for AnomalyDetectionMathExpression
type jsiiProxy_AnomalyDetectionMathExpression struct {
	internal.Type__awscloudwatchMathExpression
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) Color() *string {
	var returns *string
	_jsii_.Get(
		j,
		"color",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) Expression() *string {
	var returns *string
	_jsii_.Get(
		j,
		"expression",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) Label() *string {
	var returns *string
	_jsii_.Get(
		j,
		"label",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) Period() awscdk.Duration {
	var returns awscdk.Duration
	_jsii_.Get(
		j,
		"period",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) SearchAccount() *string {
	var returns *string
	_jsii_.Get(
		j,
		"searchAccount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) SearchRegion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"searchRegion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AnomalyDetectionMathExpression) UsingMetrics() *map[string]awscloudwatch.IMetric {
	var returns *map[string]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"usingMetrics",
		&returns,
	)
	return returns
}


// Experimental.
func NewAnomalyDetectionMathExpression(props *awscloudwatch.MathExpressionProps) AnomalyDetectionMathExpression {
	_init_.Initialize()

	j := jsiiProxy_AnomalyDetectionMathExpression{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AnomalyDetectionMathExpression",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAnomalyDetectionMathExpression_Override(a AnomalyDetectionMathExpression, props *awscloudwatch.MathExpressionProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AnomalyDetectionMathExpression",
		[]interface{}{props},
		a,
	)
}

func (a *jsiiProxy_AnomalyDetectionMathExpression) CreateAlarm(scope constructs.Construct, id *string, props *awscloudwatch.CreateAlarmOptions) awscloudwatch.Alarm {
	var returns awscloudwatch.Alarm

	_jsii_.Invoke(
		a,
		"createAlarm",
		[]interface{}{scope, id, props},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AnomalyDetectionMathExpression) ToMetricConfig() *awscloudwatch.MetricConfig {
	var returns *awscloudwatch.MetricConfig

	_jsii_.Invoke(
		a,
		"toMetricConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AnomalyDetectionMathExpression) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AnomalyDetectionMathExpression) With(props *awscloudwatch.MathExpressionOptions) awscloudwatch.MathExpression {
	var returns awscloudwatch.MathExpression

	_jsii_.Invoke(
		a,
		"with",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Experimental.
type AnomalyDetectionThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	AlarmWhenAboveTheBand *bool `field:"required" json:"alarmWhenAboveTheBand" yaml:"alarmWhenAboveTheBand"`
	// Experimental.
	AlarmWhenBelowTheBand *bool `field:"required" json:"alarmWhenBelowTheBand" yaml:"alarmWhenBelowTheBand"`
	// Experimental.
	StandardDeviationForAlarm *float64 `field:"required" json:"standardDeviationForAlarm" yaml:"standardDeviationForAlarm"`
	// Experimental.
	AdditionalDescription *string `field:"optional" json:"additionalDescription" yaml:"additionalDescription"`
}

// Experimental.
type ApiGatewayMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	FillTpsWithZeroes() *bool
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	Metric4XXErrorCount() interface{}
	// Experimental.
	Metric4XXErrorRate() interface{}
	// Experimental.
	Metric5XXFaultCount() interface{}
	// Experimental.
	Metric5XXFaultRate() interface{}
	// Experimental.
	MetricInvocationCount() interface{}
	// Experimental.
	MetricInvocationRate() interface{}
	// Experimental.
	MetricLatencyInMillis(latencyType LatencyType) interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP50InMillis() interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP90InMillis() interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP99InMillis() interface{}
	// Deprecated: use metricInvocationRate.
	MetricTps() interface{}
}

// The jsii proxy struct for ApiGatewayMetricFactory
type jsiiProxy_ApiGatewayMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ApiGatewayMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMetricFactory) FillTpsWithZeroes() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"fillTpsWithZeroes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewApiGatewayMetricFactory(metricFactory MetricFactory, props *ApiGatewayMetricFactoryProps) ApiGatewayMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_ApiGatewayMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewApiGatewayMetricFactory_Override(a ApiGatewayMetricFactory, metricFactory MetricFactory, props *ApiGatewayMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayMetricFactory",
		[]interface{}{metricFactory, props},
		a,
	)
}

func (a *jsiiProxy_ApiGatewayMetricFactory) Metric4XXErrorCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4XXErrorCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) Metric4XXErrorRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4XXErrorRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) Metric5XXFaultCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5XXFaultCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) Metric5XXFaultRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5XXFaultRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricInvocationCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricInvocationCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricInvocationRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricInvocationRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricLatencyInMillis(latencyType LatencyType) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyInMillis",
		[]interface{}{latencyType},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMetricFactory) MetricTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ApiGatewayMetricFactoryProps struct {
	// API to monitor (cannot use IRestApi, since it does not provide API name).
	// Experimental.
	Api awsapigateway.RestApiBase `field:"required" json:"api" yaml:"api"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiMethod *string `field:"optional" json:"apiMethod" yaml:"apiMethod"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiResource *string `field:"optional" json:"apiResource" yaml:"apiResource"`
	// Experimental.
	ApiStage *string `field:"optional" json:"apiStage" yaml:"apiStage"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type ApiGatewayMonitoring interface {
	Monitoring
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	Error4XXCountMetric() interface{}
	// Experimental.
	Error4XXRateMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Fault5XXCountMetric() interface{}
	// Experimental.
	Fault5XXRateMetric() interface{}
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LatencyMetrics() *map[string]interface{}
	// Experimental.
	LatencyTypesToRender() *[]*string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Experimental.
	TpsAlarmFactory() TpsAlarmFactory
	// Experimental.
	TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TpsMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for ApiGatewayMonitoring
type jsiiProxy_ApiGatewayMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_ApiGatewayMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Error4XXCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4XXCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Error4XXRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4XXRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Fault5XXCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"fault5XXCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Fault5XXRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"fault5XXRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) LatencyMetrics() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"latencyMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) LatencyTypesToRender() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"latencyTypesToRender",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) TpsAlarmFactory() TpsAlarmFactory {
	var returns TpsAlarmFactory
	_jsii_.Get(
		j,
		"tpsAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"tpsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewApiGatewayMonitoring(scope MonitoringScope, props *ApiGatewayMonitoringProps) ApiGatewayMonitoring {
	_init_.Initialize()

	j := jsiiProxy_ApiGatewayMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewApiGatewayMonitoring_Override(a ApiGatewayMonitoring, scope MonitoringScope, props *ApiGatewayMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayMonitoring",
		[]interface{}{scope, props},
		a,
	)
}

func (a *jsiiProxy_ApiGatewayMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		a,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (a *jsiiProxy_ApiGatewayMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		a,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		a,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		a,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createTpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		a,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ApiGatewayMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4XXErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4XXErrorCountAlarm" yaml:"add4XXErrorCountAlarm"`
	// Experimental.
	Add4XXErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4XXErrorRateAlarm" yaml:"add4XXErrorRateAlarm"`
	// Experimental.
	Add5XXFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5XXFaultCountAlarm" yaml:"add5XXFaultCountAlarm"`
	// Experimental.
	Add5XXFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5XXFaultRateAlarm" yaml:"add5XXFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyAverageAlarm" yaml:"addLatencyAverageAlarm"`
	// Experimental.
	AddLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP100Alarm" yaml:"addLatencyP100Alarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP70Alarm" yaml:"addLatencyP70Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP95Alarm" yaml:"addLatencyP95Alarm"`
	// Experimental.
	AddLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP9999Alarm" yaml:"addLatencyP9999Alarm"`
	// Experimental.
	AddLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP999Alarm" yaml:"addLatencyP999Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM50Alarm" yaml:"addLatencyTM50Alarm"`
	// Experimental.
	AddLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM70Alarm" yaml:"addLatencyTM70Alarm"`
	// Experimental.
	AddLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM90Alarm" yaml:"addLatencyTM90Alarm"`
	// Experimental.
	AddLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM95Alarm" yaml:"addLatencyTM95Alarm"`
	// Experimental.
	AddLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM9999Alarm" yaml:"addLatencyTM9999Alarm"`
	// Experimental.
	AddLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM999Alarm" yaml:"addLatencyTM999Alarm"`
	// Experimental.
	AddLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM99Alarm" yaml:"addLatencyTM99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// You can specify what latency types you want to be rendered in the dashboards.
	//
	// Note: any latency type with an alarm will be also added automatically.
	// If the list is undefined, default values will be shown.
	// If the list is empty, only the latency types with an alarm will be shown (if any).
	// See: DefaultLatencyTypesToRender).
	//
	// Experimental.
	LatencyTypesToRender *[]LatencyType `field:"optional" json:"latencyTypesToRender" yaml:"latencyTypesToRender"`
}

// Experimental.
type ApiGatewayMonitoringProps struct {
	// API to monitor (cannot use IRestApi, since it does not provide API name).
	// Experimental.
	Api awsapigateway.RestApiBase `field:"required" json:"api" yaml:"api"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiMethod *string `field:"optional" json:"apiMethod" yaml:"apiMethod"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiResource *string `field:"optional" json:"apiResource" yaml:"apiResource"`
	// Experimental.
	ApiStage *string `field:"optional" json:"apiStage" yaml:"apiStage"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4XXErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4XXErrorCountAlarm" yaml:"add4XXErrorCountAlarm"`
	// Experimental.
	Add4XXErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4XXErrorRateAlarm" yaml:"add4XXErrorRateAlarm"`
	// Experimental.
	Add5XXFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5XXFaultCountAlarm" yaml:"add5XXFaultCountAlarm"`
	// Experimental.
	Add5XXFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5XXFaultRateAlarm" yaml:"add5XXFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyAverageAlarm" yaml:"addLatencyAverageAlarm"`
	// Experimental.
	AddLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP100Alarm" yaml:"addLatencyP100Alarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP70Alarm" yaml:"addLatencyP70Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP95Alarm" yaml:"addLatencyP95Alarm"`
	// Experimental.
	AddLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP9999Alarm" yaml:"addLatencyP9999Alarm"`
	// Experimental.
	AddLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP999Alarm" yaml:"addLatencyP999Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM50Alarm" yaml:"addLatencyTM50Alarm"`
	// Experimental.
	AddLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM70Alarm" yaml:"addLatencyTM70Alarm"`
	// Experimental.
	AddLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM90Alarm" yaml:"addLatencyTM90Alarm"`
	// Experimental.
	AddLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM95Alarm" yaml:"addLatencyTM95Alarm"`
	// Experimental.
	AddLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM9999Alarm" yaml:"addLatencyTM9999Alarm"`
	// Experimental.
	AddLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM999Alarm" yaml:"addLatencyTM999Alarm"`
	// Experimental.
	AddLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM99Alarm" yaml:"addLatencyTM99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// You can specify what latency types you want to be rendered in the dashboards.
	//
	// Note: any latency type with an alarm will be also added automatically.
	// If the list is undefined, default values will be shown.
	// If the list is empty, only the latency types with an alarm will be shown (if any).
	// See: DefaultLatencyTypesToRender).
	//
	// Experimental.
	LatencyTypesToRender *[]LatencyType `field:"optional" json:"latencyTypesToRender" yaml:"latencyTypesToRender"`
}

// Experimental.
type ApiGatewayV2HttpApiMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	FillTpsWithZeroes() *bool
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	Metric4xxCount() interface{}
	// Experimental.
	Metric4xxRate() interface{}
	// Experimental.
	Metric5xxCount() interface{}
	// Experimental.
	Metric5xxRate() interface{}
	// Experimental.
	MetricIntegrationLatencyInMillis(latencyType LatencyType) interface{}
	// Deprecated: use metricIntegrationLatencyInMillis instead.
	MetricIntegrationLatencyP50InMillis() interface{}
	// Deprecated: use metricIntegrationLatencyInMillis instead.
	MetricIntegrationLatencyP90InMillis() interface{}
	// Deprecated: use metricIntegrationLatencyInMillis instead.
	MetricIntegrationLatencyP99InMillis() interface{}
	// Experimental.
	MetricInvocationCount() interface{}
	// Experimental.
	MetricInvocationRate() interface{}
	// Experimental.
	MetricLatencyInMillis(latencyType LatencyType) interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP50InMillis() interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP90InMillis() interface{}
	// Deprecated: use metricLatencyInMillis instead.
	MetricLatencyP99InMillis() interface{}
	// Deprecated: use metricInvocationRate.
	MetricTps() interface{}
}

// The jsii proxy struct for ApiGatewayV2HttpApiMetricFactory
type jsiiProxy_ApiGatewayV2HttpApiMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) FillTpsWithZeroes() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"fillTpsWithZeroes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewApiGatewayV2HttpApiMetricFactory(metricFactory MetricFactory, props *ApiGatewayV2HttpApiMetricFactoryProps) ApiGatewayV2HttpApiMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_ApiGatewayV2HttpApiMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayV2HttpApiMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewApiGatewayV2HttpApiMetricFactory_Override(a ApiGatewayV2HttpApiMetricFactory, metricFactory MetricFactory, props *ApiGatewayV2HttpApiMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayV2HttpApiMetricFactory",
		[]interface{}{metricFactory, props},
		a,
	)
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) Metric4xxCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4xxCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) Metric4xxRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4xxRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) Metric5xxCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5xxCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) Metric5xxRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5xxRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricIntegrationLatencyInMillis(latencyType LatencyType) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricIntegrationLatencyInMillis",
		[]interface{}{latencyType},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricIntegrationLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricIntegrationLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricIntegrationLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricIntegrationLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricIntegrationLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricIntegrationLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricInvocationCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricInvocationCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricInvocationRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricInvocationRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricLatencyInMillis(latencyType LatencyType) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyInMillis",
		[]interface{}{latencyType},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMetricFactory) MetricTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ApiGatewayV2HttpApiMetricFactoryProps struct {
	// Experimental.
	Api awscdkapigatewayv2alpha.IHttpApi `field:"required" json:"api" yaml:"api"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiMethod *string `field:"optional" json:"apiMethod" yaml:"apiMethod"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiResource *string `field:"optional" json:"apiResource" yaml:"apiResource"`
	// Experimental.
	ApiStage *string `field:"optional" json:"apiStage" yaml:"apiStage"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type ApiGatewayV2HttpApiMonitoring interface {
	Monitoring
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	Error4xxCountMetric() interface{}
	// Experimental.
	Error4xxRateMetric() interface{}
	// Experimental.
	Error5xxCountMetric() interface{}
	// Experimental.
	Error5xxRateMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	IntegrationLatencyMetrics() *map[string]interface{}
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LatencyMetrics() *map[string]interface{}
	// Experimental.
	LatencyTypesToRender() *[]*string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Experimental.
	TpsAlarmFactory() TpsAlarmFactory
	// Experimental.
	TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TpsMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for ApiGatewayV2HttpApiMonitoring
type jsiiProxy_ApiGatewayV2HttpApiMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Error4xxCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4xxCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Error4xxRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4xxRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Error5xxCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error5xxCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Error5xxRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error5xxRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) IntegrationLatencyMetrics() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"integrationLatencyMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) LatencyMetrics() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"latencyMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) LatencyTypesToRender() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"latencyTypesToRender",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) TpsAlarmFactory() TpsAlarmFactory {
	var returns TpsAlarmFactory
	_jsii_.Get(
		j,
		"tpsAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"tpsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApiGatewayV2HttpApiMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewApiGatewayV2HttpApiMonitoring(scope MonitoringScope, props *ApiGatewayV2HttpApiMonitoringProps) ApiGatewayV2HttpApiMonitoring {
	_init_.Initialize()

	j := jsiiProxy_ApiGatewayV2HttpApiMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayV2HttpApiMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewApiGatewayV2HttpApiMonitoring_Override(a ApiGatewayV2HttpApiMonitoring, scope MonitoringScope, props *ApiGatewayV2HttpApiMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ApiGatewayV2HttpApiMonitoring",
		[]interface{}{scope, props},
		a,
	)
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		a,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		a,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		a,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		a,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createTpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		a,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApiGatewayV2HttpApiMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ApiGatewayV2HttpApiMonitoringProps struct {
	// Experimental.
	Api awscdkapigatewayv2alpha.IHttpApi `field:"required" json:"api" yaml:"api"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiMethod *string `field:"optional" json:"apiMethod" yaml:"apiMethod"`
	// On undefined value is not set in dimensions.
	// Experimental.
	ApiResource *string `field:"optional" json:"apiResource" yaml:"apiResource"`
	// Experimental.
	ApiStage *string `field:"optional" json:"apiStage" yaml:"apiStage"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4xxCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4xxCountAlarm" yaml:"add4xxCountAlarm"`
	// Experimental.
	Add4xxRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4xxRateAlarm" yaml:"add4xxRateAlarm"`
	// Experimental.
	Add5xxCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5xxCountAlarm" yaml:"add5xxCountAlarm"`
	// Experimental.
	Add5xxRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5xxRateAlarm" yaml:"add5xxRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddIntegrationLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyAverageAlarm" yaml:"addIntegrationLatencyAverageAlarm"`
	// Experimental.
	AddIntegrationLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP100Alarm" yaml:"addIntegrationLatencyP100Alarm"`
	// Experimental.
	AddIntegrationLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP50Alarm" yaml:"addIntegrationLatencyP50Alarm"`
	// Experimental.
	AddIntegrationLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP70Alarm" yaml:"addIntegrationLatencyP70Alarm"`
	// Experimental.
	AddIntegrationLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP90Alarm" yaml:"addIntegrationLatencyP90Alarm"`
	// Experimental.
	AddIntegrationLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP95Alarm" yaml:"addIntegrationLatencyP95Alarm"`
	// Experimental.
	AddIntegrationLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP9999Alarm" yaml:"addIntegrationLatencyP9999Alarm"`
	// Experimental.
	AddIntegrationLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP999Alarm" yaml:"addIntegrationLatencyP999Alarm"`
	// Experimental.
	AddIntegrationLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP99Alarm" yaml:"addIntegrationLatencyP99Alarm"`
	// Experimental.
	AddIntegrationLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM50Alarm" yaml:"addIntegrationLatencyTM50Alarm"`
	// Experimental.
	AddIntegrationLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM70Alarm" yaml:"addIntegrationLatencyTM70Alarm"`
	// Experimental.
	AddIntegrationLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM90Alarm" yaml:"addIntegrationLatencyTM90Alarm"`
	// Experimental.
	AddIntegrationLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM95Alarm" yaml:"addIntegrationLatencyTM95Alarm"`
	// Experimental.
	AddIntegrationLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM9999Alarm" yaml:"addIntegrationLatencyTM9999Alarm"`
	// Experimental.
	AddIntegrationLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM999Alarm" yaml:"addIntegrationLatencyTM999Alarm"`
	// Experimental.
	AddIntegrationLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM99Alarm" yaml:"addIntegrationLatencyTM99Alarm"`
	// Experimental.
	AddLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyAverageAlarm" yaml:"addLatencyAverageAlarm"`
	// Experimental.
	AddLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP100Alarm" yaml:"addLatencyP100Alarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP70Alarm" yaml:"addLatencyP70Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP95Alarm" yaml:"addLatencyP95Alarm"`
	// Experimental.
	AddLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP9999Alarm" yaml:"addLatencyP9999Alarm"`
	// Experimental.
	AddLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP999Alarm" yaml:"addLatencyP999Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM50Alarm" yaml:"addLatencyTM50Alarm"`
	// Experimental.
	AddLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM70Alarm" yaml:"addLatencyTM70Alarm"`
	// Experimental.
	AddLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM90Alarm" yaml:"addLatencyTM90Alarm"`
	// Experimental.
	AddLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM95Alarm" yaml:"addLatencyTM95Alarm"`
	// Experimental.
	AddLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM9999Alarm" yaml:"addLatencyTM9999Alarm"`
	// Experimental.
	AddLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM999Alarm" yaml:"addLatencyTM999Alarm"`
	// Experimental.
	AddLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM99Alarm" yaml:"addLatencyTM99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// You can specify what latency types you want to be rendered in the dashboards.
	//
	// Note: any latency type with an alarm will be also added automatically.
	// If the list is undefined, default values will be shown.
	// If the list is empty, only the latency types with an alarm will be shown (if any).
	// See: DefaultLatencyTypesShown).
	//
	// Experimental.
	LatencyTypesToRender *[]LatencyType `field:"optional" json:"latencyTypesToRender" yaml:"latencyTypesToRender"`
}

// Experimental.
type ApiGatewayV2MonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4xxCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4xxCountAlarm" yaml:"add4xxCountAlarm"`
	// Experimental.
	Add4xxRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4xxRateAlarm" yaml:"add4xxRateAlarm"`
	// Experimental.
	Add5xxCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5xxCountAlarm" yaml:"add5xxCountAlarm"`
	// Experimental.
	Add5xxRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5xxRateAlarm" yaml:"add5xxRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddIntegrationLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyAverageAlarm" yaml:"addIntegrationLatencyAverageAlarm"`
	// Experimental.
	AddIntegrationLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP100Alarm" yaml:"addIntegrationLatencyP100Alarm"`
	// Experimental.
	AddIntegrationLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP50Alarm" yaml:"addIntegrationLatencyP50Alarm"`
	// Experimental.
	AddIntegrationLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP70Alarm" yaml:"addIntegrationLatencyP70Alarm"`
	// Experimental.
	AddIntegrationLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP90Alarm" yaml:"addIntegrationLatencyP90Alarm"`
	// Experimental.
	AddIntegrationLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP95Alarm" yaml:"addIntegrationLatencyP95Alarm"`
	// Experimental.
	AddIntegrationLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP9999Alarm" yaml:"addIntegrationLatencyP9999Alarm"`
	// Experimental.
	AddIntegrationLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP999Alarm" yaml:"addIntegrationLatencyP999Alarm"`
	// Experimental.
	AddIntegrationLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyP99Alarm" yaml:"addIntegrationLatencyP99Alarm"`
	// Experimental.
	AddIntegrationLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM50Alarm" yaml:"addIntegrationLatencyTM50Alarm"`
	// Experimental.
	AddIntegrationLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM70Alarm" yaml:"addIntegrationLatencyTM70Alarm"`
	// Experimental.
	AddIntegrationLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM90Alarm" yaml:"addIntegrationLatencyTM90Alarm"`
	// Experimental.
	AddIntegrationLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM95Alarm" yaml:"addIntegrationLatencyTM95Alarm"`
	// Experimental.
	AddIntegrationLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM9999Alarm" yaml:"addIntegrationLatencyTM9999Alarm"`
	// Experimental.
	AddIntegrationLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM999Alarm" yaml:"addIntegrationLatencyTM999Alarm"`
	// Experimental.
	AddIntegrationLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIntegrationLatencyTM99Alarm" yaml:"addIntegrationLatencyTM99Alarm"`
	// Experimental.
	AddLatencyAverageAlarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyAverageAlarm" yaml:"addLatencyAverageAlarm"`
	// Experimental.
	AddLatencyP100Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP100Alarm" yaml:"addLatencyP100Alarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP70Alarm" yaml:"addLatencyP70Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP95Alarm" yaml:"addLatencyP95Alarm"`
	// Experimental.
	AddLatencyP9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP9999Alarm" yaml:"addLatencyP9999Alarm"`
	// Experimental.
	AddLatencyP999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP999Alarm" yaml:"addLatencyP999Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLatencyTM50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM50Alarm" yaml:"addLatencyTM50Alarm"`
	// Experimental.
	AddLatencyTM70Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM70Alarm" yaml:"addLatencyTM70Alarm"`
	// Experimental.
	AddLatencyTM90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM90Alarm" yaml:"addLatencyTM90Alarm"`
	// Experimental.
	AddLatencyTM95Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM95Alarm" yaml:"addLatencyTM95Alarm"`
	// Experimental.
	AddLatencyTM9999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM9999Alarm" yaml:"addLatencyTM9999Alarm"`
	// Experimental.
	AddLatencyTM999Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM999Alarm" yaml:"addLatencyTM999Alarm"`
	// Experimental.
	AddLatencyTM99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyTM99Alarm" yaml:"addLatencyTM99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// You can specify what latency types you want to be rendered in the dashboards.
	//
	// Note: any latency type with an alarm will be also added automatically.
	// If the list is undefined, default values will be shown.
	// If the list is empty, only the latency types with an alarm will be shown (if any).
	// See: DefaultLatencyTypesShown).
	//
	// Experimental.
	LatencyTypesToRender *[]LatencyType `field:"optional" json:"latencyTypesToRender" yaml:"latencyTypesToRender"`
}

// Experimental.
type AppSyncMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	FillTpsWithZeroes() *bool
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	Metric4XXErrorCount() interface{}
	// Experimental.
	Metric4XXErrorRate() interface{}
	// Experimental.
	Metric5XXFaultCount() interface{}
	// Experimental.
	Metric5XXFaultRate() interface{}
	// Experimental.
	MetricLatencyP50InMillis() interface{}
	// Experimental.
	MetricLatencyP90InMillis() interface{}
	// Experimental.
	MetricLatencyP99InMillis() interface{}
	// Experimental.
	MetricRequestCount() interface{}
	// Experimental.
	MetricRequestRate() interface{}
	// Deprecated: use metricRequestRate.
	MetricTps() interface{}
}

// The jsii proxy struct for AppSyncMetricFactory
type jsiiProxy_AppSyncMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AppSyncMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMetricFactory) FillTpsWithZeroes() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"fillTpsWithZeroes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewAppSyncMetricFactory(metricFactory MetricFactory, props *AppSyncMetricFactoryProps) AppSyncMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_AppSyncMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AppSyncMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAppSyncMetricFactory_Override(a AppSyncMetricFactory, metricFactory MetricFactory, props *AppSyncMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AppSyncMetricFactory",
		[]interface{}{metricFactory, props},
		a,
	)
}

func (a *jsiiProxy_AppSyncMetricFactory) Metric4XXErrorCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4XXErrorCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) Metric4XXErrorRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric4XXErrorRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) Metric5XXFaultCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5XXFaultCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) Metric5XXFaultRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metric5XXFaultRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricRequestRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricRequestRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMetricFactory) MetricTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AppSyncMetricFactoryProps struct {
	// the GraphQL API to monitor.
	// Experimental.
	Api awscdkappsyncalpha.GraphqlApi `field:"required" json:"api" yaml:"api"`
	// whether the TPS should be filled with zeroes.
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// method to compute TPS.
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type AppSyncMonitoring interface {
	Monitoring
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	Error4xxCountMetric() interface{}
	// Experimental.
	Error4xxRateMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Fault5xxCountMetric() interface{}
	// Experimental.
	Fault5xxRateMetric() interface{}
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MetricFactory() AppSyncMetricFactory
	// Experimental.
	NamingStrategy() MonitoringNamingStrategy
	// Experimental.
	P50LatencyMetric() interface{}
	// Experimental.
	P90LatencyMetric() interface{}
	// Experimental.
	P99LatencyMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Experimental.
	TpsAlarmFactory() TpsAlarmFactory
	// Experimental.
	TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TpsMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreatetTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for AppSyncMonitoring
type jsiiProxy_AppSyncMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_AppSyncMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Error4xxCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4xxCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Error4xxRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4xxRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Fault5xxCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"fault5xxCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Fault5xxRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"fault5xxRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) MetricFactory() AppSyncMetricFactory {
	var returns AppSyncMetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) NamingStrategy() MonitoringNamingStrategy {
	var returns MonitoringNamingStrategy
	_jsii_.Get(
		j,
		"namingStrategy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) P50LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) P90LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) P99LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) TpsAlarmFactory() TpsAlarmFactory {
	var returns TpsAlarmFactory
	_jsii_.Get(
		j,
		"tpsAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"tpsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AppSyncMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewAppSyncMonitoring(scope MonitoringScope, props *AppSyncMonitoringProps) AppSyncMonitoring {
	_init_.Initialize()

	j := jsiiProxy_AppSyncMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AppSyncMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAppSyncMonitoring_Override(a AppSyncMonitoring, scope MonitoringScope, props *AppSyncMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AppSyncMonitoring",
		[]interface{}{scope, props},
		a,
	)
}

func (a *jsiiProxy_AppSyncMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		a,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (a *jsiiProxy_AppSyncMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		a,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		a,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createTpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreatetTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		a,
		"createtTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		a,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AppSyncMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AppSyncMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4XXErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4XXErrorCountAlarm" yaml:"add4XXErrorCountAlarm"`
	// Experimental.
	Add4XXErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4XXErrorRateAlarm" yaml:"add4XXErrorRateAlarm"`
	// Experimental.
	Add5XXFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5XXFaultCountAlarm" yaml:"add5XXFaultCountAlarm"`
	// Experimental.
	Add5XXFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5XXFaultRateAlarm" yaml:"add5XXFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
}

// Experimental.
type AppSyncMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4XXErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4XXErrorCountAlarm" yaml:"add4XXErrorCountAlarm"`
	// Experimental.
	Add4XXErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4XXErrorRateAlarm" yaml:"add4XXErrorRateAlarm"`
	// Experimental.
	Add5XXFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5XXFaultCountAlarm" yaml:"add5XXFaultCountAlarm"`
	// Experimental.
	Add5XXFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5XXFaultRateAlarm" yaml:"add5XXFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// the GraphQL API to monitor.
	// Experimental.
	Api awscdkappsyncalpha.GraphqlApi `field:"required" json:"api" yaml:"api"`
	// whether the TPS should be filled with zeroes.
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// method to compute TPS.
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Metric factory to create metrics for application load-balanced service.
// Experimental.
type ApplicationLoadBalancerMetricFactory interface {
	ILoadBalancerMetricFactory
	// Experimental.
	ApplicationLoadBalancer() awselasticloadbalancingv2.ApplicationLoadBalancer
	// Experimental.
	ApplicationTargetGroup() awselasticloadbalancingv2.ApplicationTargetGroup
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricActiveConnectionCount() interface{}
	// Experimental.
	MetricHealthyTaskCount() interface{}
	// Experimental.
	MetricHealthyTaskInPercent() interface{}
	// Experimental.
	MetricNewConnectionCount() interface{}
	// Experimental.
	MetricProcessedBytesMin() interface{}
	// Experimental.
	MetricUnhealthyTaskCount() interface{}
}

// The jsii proxy struct for ApplicationLoadBalancerMetricFactory
type jsiiProxy_ApplicationLoadBalancerMetricFactory struct {
	jsiiProxy_ILoadBalancerMetricFactory
}

func (j *jsiiProxy_ApplicationLoadBalancerMetricFactory) ApplicationLoadBalancer() awselasticloadbalancingv2.ApplicationLoadBalancer {
	var returns awselasticloadbalancingv2.ApplicationLoadBalancer
	_jsii_.Get(
		j,
		"applicationLoadBalancer",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApplicationLoadBalancerMetricFactory) ApplicationTargetGroup() awselasticloadbalancingv2.ApplicationTargetGroup {
	var returns awselasticloadbalancingv2.ApplicationTargetGroup
	_jsii_.Get(
		j,
		"applicationTargetGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewApplicationLoadBalancerMetricFactory(metricFactory MetricFactory, props *ApplicationLoadBalancerMetricFactoryProps) ApplicationLoadBalancerMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_ApplicationLoadBalancerMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ApplicationLoadBalancerMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewApplicationLoadBalancerMetricFactory_Override(a ApplicationLoadBalancerMetricFactory, metricFactory MetricFactory, props *ApplicationLoadBalancerMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ApplicationLoadBalancerMetricFactory",
		[]interface{}{metricFactory, props},
		a,
	)
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricActiveConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricActiveConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricHealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricHealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricHealthyTaskInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricHealthyTaskInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricNewConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricNewConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricProcessedBytesMin() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricProcessedBytesMin",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ApplicationLoadBalancerMetricFactory) MetricUnhealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricUnhealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Props to create ApplicationLoadBalancerMetricFactory.
// Experimental.
type ApplicationLoadBalancerMetricFactoryProps struct {
	// Experimental.
	ApplicationLoadBalancer awselasticloadbalancingv2.ApplicationLoadBalancer `field:"required" json:"applicationLoadBalancer" yaml:"applicationLoadBalancer"`
	// Experimental.
	ApplicationTargetGroup awselasticloadbalancingv2.ApplicationTargetGroup `field:"required" json:"applicationTargetGroup" yaml:"applicationTargetGroup"`
}

// Experimental.
type AutoScalingGroupMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// The number of instances that the Auto Scaling group attempts to maintain.
	// Experimental.
	MetricGroupDesiredCapacity() interface{}
	// The number of instances that are running as part of the Auto Scaling group.
	//
	// This metric does not include instances that are pending or terminating.
	// Experimental.
	MetricGroupInServiceInstances() interface{}
	// The maximum size of the Auto Scaling group.
	// Experimental.
	MetricGroupMaxSize() interface{}
	// The minimum size of the Auto Scaling group.
	// Experimental.
	MetricGroupMinSize() interface{}
	// The number of instances that are pending.
	//
	// A pending instance is not yet in service.
	// This metric does not include instances that are in service or terminating.
	// Experimental.
	MetricGroupPendingInstances() interface{}
	// The number of instances that are in a Standby state.
	//
	// Instances in this state are still running but are not actively in service.
	// Experimental.
	MetricGroupStandbyInstances() interface{}
	// The number of instances that are in the process of terminating.
	//
	// This metric does not include instances that are in service or pending.
	// Experimental.
	MetricGroupTerminatingInstances() interface{}
	// The total number of instances in the Auto Scaling group.
	//
	// This metric identifies the number of instances that are in service, pending, and terminating.
	// Experimental.
	MetricGroupTotalInstances() interface{}
}

// The jsii proxy struct for AutoScalingGroupMetricFactory
type jsiiProxy_AutoScalingGroupMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AutoScalingGroupMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewAutoScalingGroupMetricFactory(metricFactory MetricFactory, props *AutoScalingGroupMetricFactoryProps) AutoScalingGroupMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_AutoScalingGroupMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AutoScalingGroupMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAutoScalingGroupMetricFactory_Override(a AutoScalingGroupMetricFactory, metricFactory MetricFactory, props *AutoScalingGroupMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AutoScalingGroupMetricFactory",
		[]interface{}{metricFactory, props},
		a,
	)
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupDesiredCapacity() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupDesiredCapacity",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupInServiceInstances() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupInServiceInstances",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupMaxSize() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupMaxSize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupMinSize() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupMinSize",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupPendingInstances() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupPendingInstances",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupStandbyInstances() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupStandbyInstances",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupTerminatingInstances() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupTerminatingInstances",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMetricFactory) MetricGroupTotalInstances() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"metricGroupTotalInstances",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AutoScalingGroupMetricFactoryProps struct {
	// Experimental.
	AutoScalingGroup awsautoscaling.IAutoScalingGroup `field:"required" json:"autoScalingGroup" yaml:"autoScalingGroup"`
}

// Experimental.
type AutoScalingGroupMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	GroupDesiredSizeMetric() interface{}
	// Experimental.
	GroupMaxSizeMetric() interface{}
	// Experimental.
	GroupMinSizeMetric() interface{}
	// Experimental.
	InstancesInServiceMetric() interface{}
	// Experimental.
	InstancesPendingMetric() interface{}
	// Experimental.
	InstancesStandbyMetric() interface{}
	// Experimental.
	InstancesTerminatingMetric() interface{}
	// Experimental.
	InstancesTotalMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateGroupSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateGroupStatusWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for AutoScalingGroupMonitoring
type jsiiProxy_AutoScalingGroupMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) GroupDesiredSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"groupDesiredSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) GroupMaxSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"groupMaxSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) GroupMinSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"groupMinSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) InstancesInServiceMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"instancesInServiceMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) InstancesPendingMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"instancesPendingMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) InstancesStandbyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"instancesStandbyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) InstancesTerminatingMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"instancesTerminatingMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) InstancesTotalMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"instancesTotalMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AutoScalingGroupMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewAutoScalingGroupMonitoring(scope MonitoringScope, props *AutoScalingGroupMonitoringProps) AutoScalingGroupMonitoring {
	_init_.Initialize()

	j := jsiiProxy_AutoScalingGroupMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AutoScalingGroupMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewAutoScalingGroupMonitoring_Override(a AutoScalingGroupMonitoring, scope MonitoringScope, props *AutoScalingGroupMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AutoScalingGroupMonitoring",
		[]interface{}{scope, props},
		a,
	)
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		a,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		a,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		a,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateGroupSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createGroupSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateGroupStatusWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		a,
		"createGroupStatusWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		a,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		a,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		a,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AutoScalingGroupMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		a,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type AutoScalingGroupMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type AutoScalingGroupMonitoringProps struct {
	// Experimental.
	AutoScalingGroup awsautoscaling.IAutoScalingGroup `field:"required" json:"autoScalingGroup" yaml:"autoScalingGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type AvailabilityThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinAvailabilityPercent *float64 `field:"required" json:"minAvailabilityPercent" yaml:"minAvailabilityPercent"`
}

// Experimental.
type AwsConsoleUrlFactory interface {
	// Experimental.
	AwsAccountId() *string
	// Experimental.
	AwsAccountRegion() *string
	// Experimental.
	GetApiGatewayUrl(restApiId *string) *string
	// Experimental.
	GetAwsConsoleUrl(destinationUrl *string) *string
	// Experimental.
	GetCloudFrontDistributionUrl(distributionId *string) *string
	// Experimental.
	GetCloudWatchLogGroupUrl(logGroupName *string) *string
	// Experimental.
	GetCodeBuildProjectUrl(projectName *string) *string
	// Experimental.
	GetDocumentDbClusterUrl(clusterId *string) *string
	// Experimental.
	GetDynamoTableUrl(tableName *string) *string
	// Experimental.
	GetElastiCacheClusterUrl(clusterId *string, clusterType ElastiCacheClusterType) *string
	// Experimental.
	GetKinesisAnalyticsUrl(application *string) *string
	// Experimental.
	GetKinesisDataStreamUrl(streamName *string) *string
	// Experimental.
	GetKinesisFirehoseDeliveryStreamUrl(streamName *string) *string
	// Experimental.
	GetLambdaFunctionUrl(functionName *string) *string
	// Experimental.
	GetOpenSearchClusterUrl(domainName *string) *string
	// Experimental.
	GetRdsClusterUrl(clusterId *string) *string
	// Experimental.
	GetRedshiftClusterUrl(clusterId *string) *string
	// Resolves a destination URL within a resolution context.
	// See: https://docs.aws.amazon.com/cdk/latest/guide/tokens.html
	//
	// Experimental.
	GetResolvedDestinationUrl(context awscdk.IResolveContext, destinationUrl *string) *string
	// Experimental.
	GetS3BucketUrl(bucketName *string) *string
	// Experimental.
	GetSnsTopicUrl(topicArn *string) *string
	// Experimental.
	GetSqsQueueUrl(queueUrl *string) *string
	// Experimental.
	GetStateMachineUrl(stateMachineArn *string) *string
}

// The jsii proxy struct for AwsConsoleUrlFactory
type jsiiProxy_AwsConsoleUrlFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_AwsConsoleUrlFactory) AwsAccountId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"awsAccountId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_AwsConsoleUrlFactory) AwsAccountRegion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"awsAccountRegion",
		&returns,
	)
	return returns
}


// Experimental.
func NewAwsConsoleUrlFactory(props *AwsConsoleUrlFactoryProps) AwsConsoleUrlFactory {
	_init_.Initialize()

	j := jsiiProxy_AwsConsoleUrlFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.AwsConsoleUrlFactory",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewAwsConsoleUrlFactory_Override(a AwsConsoleUrlFactory, props *AwsConsoleUrlFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.AwsConsoleUrlFactory",
		[]interface{}{props},
		a,
	)
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetApiGatewayUrl(restApiId *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getApiGatewayUrl",
		[]interface{}{restApiId},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetAwsConsoleUrl(destinationUrl *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getAwsConsoleUrl",
		[]interface{}{destinationUrl},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetCloudFrontDistributionUrl(distributionId *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getCloudFrontDistributionUrl",
		[]interface{}{distributionId},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetCloudWatchLogGroupUrl(logGroupName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getCloudWatchLogGroupUrl",
		[]interface{}{logGroupName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetCodeBuildProjectUrl(projectName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getCodeBuildProjectUrl",
		[]interface{}{projectName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetDocumentDbClusterUrl(clusterId *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getDocumentDbClusterUrl",
		[]interface{}{clusterId},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetDynamoTableUrl(tableName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getDynamoTableUrl",
		[]interface{}{tableName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetElastiCacheClusterUrl(clusterId *string, clusterType ElastiCacheClusterType) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getElastiCacheClusterUrl",
		[]interface{}{clusterId, clusterType},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetKinesisAnalyticsUrl(application *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getKinesisAnalyticsUrl",
		[]interface{}{application},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetKinesisDataStreamUrl(streamName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getKinesisDataStreamUrl",
		[]interface{}{streamName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetKinesisFirehoseDeliveryStreamUrl(streamName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getKinesisFirehoseDeliveryStreamUrl",
		[]interface{}{streamName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetLambdaFunctionUrl(functionName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getLambdaFunctionUrl",
		[]interface{}{functionName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetOpenSearchClusterUrl(domainName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getOpenSearchClusterUrl",
		[]interface{}{domainName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetRdsClusterUrl(clusterId *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getRdsClusterUrl",
		[]interface{}{clusterId},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetRedshiftClusterUrl(clusterId *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getRedshiftClusterUrl",
		[]interface{}{clusterId},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetResolvedDestinationUrl(context awscdk.IResolveContext, destinationUrl *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getResolvedDestinationUrl",
		[]interface{}{context, destinationUrl},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetS3BucketUrl(bucketName *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getS3BucketUrl",
		[]interface{}{bucketName},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetSnsTopicUrl(topicArn *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getSnsTopicUrl",
		[]interface{}{topicArn},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetSqsQueueUrl(queueUrl *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getSqsQueueUrl",
		[]interface{}{queueUrl},
		&returns,
	)

	return returns
}

func (a *jsiiProxy_AwsConsoleUrlFactory) GetStateMachineUrl(stateMachineArn *string) *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"getStateMachineUrl",
		[]interface{}{stateMachineArn},
		&returns,
	)

	return returns
}

// Experimental.
type AwsConsoleUrlFactoryProps struct {
	// Experimental.
	AwsAccountId *string `field:"required" json:"awsAccountId" yaml:"awsAccountId"`
	// Experimental.
	AwsAccountRegion *string `field:"required" json:"awsAccountRegion" yaml:"awsAccountRegion"`
}

// Experimental.
type AxisPosition string

const (
	// Experimental.
	AxisPosition_LEFT AxisPosition = "LEFT"
	// Experimental.
	AxisPosition_RIGHT AxisPosition = "RIGHT"
)

// Experimental.
type BaseDlqAlarms struct {
	// Alarm on the number of messages added to a queue.
	//
	// Note that this corresponds with the NumberOfMessagesSent metric, which does not capture messages sent to the DLQ
	// as a result of a failed processing attempt.
	// See: https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html#sqs-dlq-number-of-messages
	//
	// Experimental.
	AddDeadLetterQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addDeadLetterQueueMaxIncomingMessagesAlarm" yaml:"addDeadLetterQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddDeadLetterQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addDeadLetterQueueMaxMessageAgeAlarm" yaml:"addDeadLetterQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddDeadLetterQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addDeadLetterQueueMaxSizeAlarm" yaml:"addDeadLetterQueueMaxSizeAlarm"`
}

// Experimental.
type BaseEc2ServiceAlarms struct {
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
}

// Experimental.
type BaseFargateServiceAlarms struct {
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
}

// Base class for properties passed to each monitoring construct.
//
// It contains (mostly optional) properties to specify naming, placement, and so on.
// Experimental.
type BaseMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Metric factory for a base service (parent class for e.g. Fargate and EC2 services).
// Experimental.
type BaseServiceMetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Service() awsecs.BaseService
	// Experimental.
	MetricClusterCpuUtilisationInPercent() interface{}
	// Experimental.
	MetricClusterMemoryUtilisationInPercent() interface{}
	// Experimental.
	MetricRunningTaskCount() interface{}
}

// The jsii proxy struct for BaseServiceMetricFactory
type jsiiProxy_BaseServiceMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_BaseServiceMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BaseServiceMetricFactory) Service() awsecs.BaseService {
	var returns awsecs.BaseService
	_jsii_.Get(
		j,
		"service",
		&returns,
	)
	return returns
}


// Experimental.
func NewBaseServiceMetricFactory(metricFactory MetricFactory, props *BaseServiceMetricFactoryProps) BaseServiceMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_BaseServiceMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.BaseServiceMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewBaseServiceMetricFactory_Override(b BaseServiceMetricFactory, metricFactory MetricFactory, props *BaseServiceMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.BaseServiceMetricFactory",
		[]interface{}{metricFactory, props},
		b,
	)
}

func (b *jsiiProxy_BaseServiceMetricFactory) MetricClusterCpuUtilisationInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"metricClusterCpuUtilisationInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BaseServiceMetricFactory) MetricClusterMemoryUtilisationInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"metricClusterMemoryUtilisationInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BaseServiceMetricFactory) MetricRunningTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"metricRunningTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Props to create BaseServiceMetricFactory.
// Experimental.
type BaseServiceMetricFactoryProps struct {
	// Experimental.
	Service awsecs.BaseService `field:"required" json:"service" yaml:"service"`
}

// Experimental.
type BaseSqsQueueAlarms struct {
	// Experimental.
	AddQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addQueueMaxIncomingMessagesAlarm" yaml:"addQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addQueueMaxMessageAgeAlarm" yaml:"addQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addQueueMaxSizeAlarm" yaml:"addQueueMaxSizeAlarm"`
	// Experimental.
	AddQueueMaxTimeToDrainMessagesAlarm *map[string]*MaxTimeToDrainThreshold `field:"optional" json:"addQueueMaxTimeToDrainMessagesAlarm" yaml:"addQueueMaxTimeToDrainMessagesAlarm"`
	// Experimental.
	AddQueueMinIncomingMessagesAlarm *map[string]*MinIncomingMessagesCountThreshold `field:"optional" json:"addQueueMinIncomingMessagesAlarm" yaml:"addQueueMinIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMinSizeAlarm *map[string]*MinMessageCountThreshold `field:"optional" json:"addQueueMinSizeAlarm" yaml:"addQueueMinSizeAlarm"`
}

// Experimental.
type BillingMetricFactory interface {
	// Experimental.
	MetricSearchTopCostByServiceInUsd() awscloudwatch.IMetric
	// Experimental.
	MetricTotalCostInUsd() awscloudwatch.IMetric
}

// The jsii proxy struct for BillingMetricFactory
type jsiiProxy_BillingMetricFactory struct {
	_ byte // padding
}

// Experimental.
func NewBillingMetricFactory() BillingMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_BillingMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.BillingMetricFactory",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewBillingMetricFactory_Override(b BillingMetricFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.BillingMetricFactory",
		nil, // no parameters
		b,
	)
}

func (b *jsiiProxy_BillingMetricFactory) MetricSearchTopCostByServiceInUsd() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric

	_jsii_.Invoke(
		b,
		"metricSearchTopCostByServiceInUsd",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMetricFactory) MetricTotalCostInUsd() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric

	_jsii_.Invoke(
		b,
		"metricTotalCostInUsd",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type BillingMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	CostByServiceMetric() awscloudwatch.IMetric
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TotalCostMetric() awscloudwatch.IMetric
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateChargesByServiceWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTotalChargesWidget(width *float64, height *float64) awscloudwatch.SingleValueWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for BillingMonitoring
type jsiiProxy_BillingMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_BillingMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BillingMonitoring) CostByServiceMetric() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"costByServiceMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BillingMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BillingMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BillingMonitoring) TotalCostMetric() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"totalCostMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewBillingMonitoring(scope MonitoringScope, props *BillingMonitoringProps) BillingMonitoring {
	_init_.Initialize()

	j := jsiiProxy_BillingMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.BillingMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewBillingMonitoring_Override(b BillingMonitoring, scope MonitoringScope, props *BillingMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.BillingMonitoring",
		[]interface{}{scope, props},
		b,
	)
}

func (b *jsiiProxy_BillingMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		b,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (b *jsiiProxy_BillingMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		b,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		b,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateChargesByServiceWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		b,
		"createChargesByServiceWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		b,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		b,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		b,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateTotalChargesWidget(width *float64, height *float64) awscloudwatch.SingleValueWidget {
	var returns awscloudwatch.SingleValueWidget

	_jsii_.Invoke(
		b,
		"createTotalChargesWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		b,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		b,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BillingMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		b,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type BillingMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type BillingMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Specific subtype of dashboard that renders supported widgets as bitmaps, while preserving the overall layout.
// Experimental.
type BitmapDashboard interface {
	awscloudwatch.Dashboard
	// Experimental.
	BitmapRenderingSupport() BitmapWidgetRenderingSupport
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Add a widget to the dashboard.
	//
	// Widgets given in multiple calls to add() will be laid out stacked on
	// top of each other.
	//
	// Multiple widgets added in the same call to add() will be laid out next
	// to each other.
	// Experimental.
	AddWidgets(widgets ...awscloudwatch.IWidget)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	AsBitmap(widget awscloudwatch.IWidget) awscloudwatch.IWidget
	// Experimental.
	AsBitmaps(widgets ...awscloudwatch.IWidget) *[]awscloudwatch.IWidget
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for BitmapDashboard
type jsiiProxy_BitmapDashboard struct {
	internal.Type__awscloudwatchDashboard
}

func (j *jsiiProxy_BitmapDashboard) BitmapRenderingSupport() BitmapWidgetRenderingSupport {
	var returns BitmapWidgetRenderingSupport
	_jsii_.Get(
		j,
		"bitmapRenderingSupport",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BitmapDashboard) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BitmapDashboard) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BitmapDashboard) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BitmapDashboard) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewBitmapDashboard(scope constructs.Construct, id *string, props *awscloudwatch.DashboardProps) BitmapDashboard {
	_init_.Initialize()

	j := jsiiProxy_BitmapDashboard{}

	_jsii_.Create(
		"cdk-monitoring-constructs.BitmapDashboard",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewBitmapDashboard_Override(b BitmapDashboard, scope constructs.Construct, id *string, props *awscloudwatch.DashboardProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.BitmapDashboard",
		[]interface{}{scope, id, props},
		b,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func BitmapDashboard_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.BitmapDashboard",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func BitmapDashboard_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.BitmapDashboard",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) AddWidgets(widgets ...awscloudwatch.IWidget) {
	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		b,
		"addWidgets",
		args,
	)
}

func (b *jsiiProxy_BitmapDashboard) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		b,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (b *jsiiProxy_BitmapDashboard) AsBitmap(widget awscloudwatch.IWidget) awscloudwatch.IWidget {
	var returns awscloudwatch.IWidget

	_jsii_.Invoke(
		b,
		"asBitmap",
		[]interface{}{widget},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) AsBitmaps(widgets ...awscloudwatch.IWidget) *[]awscloudwatch.IWidget {
	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		b,
		"asBitmaps",
		args,
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapDashboard) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Support for rendering bitmap widgets on the server side.
//
// It is a custom widget lambda with some additional roles and helper methods.
// Experimental.
type BitmapWidgetRenderingSupport interface {
	constructs.Construct
	// Experimental.
	Handler() awslambda.IFunction
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Experimental.
	AsBitmap(widget awscloudwatch.IWidget) CustomWidget
	// Experimental.
	GetWidgetProperties(widget awscloudwatch.IWidget) interface{}
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for BitmapWidgetRenderingSupport
type jsiiProxy_BitmapWidgetRenderingSupport struct {
	internal.Type__constructsConstruct
}

func (j *jsiiProxy_BitmapWidgetRenderingSupport) Handler() awslambda.IFunction {
	var returns awslambda.IFunction
	_jsii_.Get(
		j,
		"handler",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_BitmapWidgetRenderingSupport) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Experimental.
func NewBitmapWidgetRenderingSupport(scope constructs.Construct, id *string) BitmapWidgetRenderingSupport {
	_init_.Initialize()

	j := jsiiProxy_BitmapWidgetRenderingSupport{}

	_jsii_.Create(
		"cdk-monitoring-constructs.BitmapWidgetRenderingSupport",
		[]interface{}{scope, id},
		&j,
	)

	return &j
}

// Experimental.
func NewBitmapWidgetRenderingSupport_Override(b BitmapWidgetRenderingSupport, scope constructs.Construct, id *string) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.BitmapWidgetRenderingSupport",
		[]interface{}{scope, id},
		b,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func BitmapWidgetRenderingSupport_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.BitmapWidgetRenderingSupport",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapWidgetRenderingSupport) AsBitmap(widget awscloudwatch.IWidget) CustomWidget {
	var returns CustomWidget

	_jsii_.Invoke(
		b,
		"asBitmap",
		[]interface{}{widget},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapWidgetRenderingSupport) GetWidgetProperties(widget awscloudwatch.IWidget) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		b,
		"getWidgetProperties",
		[]interface{}{widget},
		&returns,
	)

	return returns
}

func (b *jsiiProxy_BitmapWidgetRenderingSupport) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		b,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CapacityType string

const (
	// Experimental.
	CapacityType_READ CapacityType = "READ"
	// Experimental.
	CapacityType_WRITE CapacityType = "WRITE"
)

// Experimental.
type CertificateManagerMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricDaysToExpiry() interface{}
}

// The jsii proxy struct for CertificateManagerMetricFactory
type jsiiProxy_CertificateManagerMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_CertificateManagerMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewCertificateManagerMetricFactory(metricFactory MetricFactory, props *CertificateManagerMetricFactoryProps) CertificateManagerMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_CertificateManagerMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CertificateManagerMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCertificateManagerMetricFactory_Override(c CertificateManagerMetricFactory, metricFactory MetricFactory, props *CertificateManagerMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CertificateManagerMetricFactory",
		[]interface{}{metricFactory, props},
		c,
	)
}

func (c *jsiiProxy_CertificateManagerMetricFactory) MetricDaysToExpiry() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricDaysToExpiry",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CertificateManagerMetricFactoryProps struct {
	// Experimental.
	Certificate awscertificatemanager.ICertificate `field:"required" json:"certificate" yaml:"certificate"`
}

// Experimental.
type CertificateManagerMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	DaysToExpiryAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DaysToExpiryMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDaysToExpiryWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for CertificateManagerMonitoring
type jsiiProxy_CertificateManagerMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_CertificateManagerMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMonitoring) DaysToExpiryAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"daysToExpiryAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMonitoring) DaysToExpiryMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"daysToExpiryMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CertificateManagerMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewCertificateManagerMonitoring(scope MonitoringScope, props *CertificateManagerMonitoringProps) CertificateManagerMonitoring {
	_init_.Initialize()

	j := jsiiProxy_CertificateManagerMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CertificateManagerMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCertificateManagerMonitoring_Override(c CertificateManagerMonitoring, scope MonitoringScope, props *CertificateManagerMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CertificateManagerMonitoring",
		[]interface{}{scope, props},
		c,
	)
}

func (c *jsiiProxy_CertificateManagerMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		c,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (c *jsiiProxy_CertificateManagerMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		c,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		c,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreateDaysToExpiryWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createDaysToExpiryWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		c,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		c,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		c,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CertificateManagerMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CertificateManagerMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDaysToExpiryAlarm *map[string]*DaysToExpiryThreshold `field:"optional" json:"addDaysToExpiryAlarm" yaml:"addDaysToExpiryAlarm"`
}

// Experimental.
type CertificateManagerMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDaysToExpiryAlarm *map[string]*DaysToExpiryThreshold `field:"optional" json:"addDaysToExpiryAlarm" yaml:"addDaysToExpiryAlarm"`
	// Experimental.
	Certificate awscertificatemanager.ICertificate `field:"required" json:"certificate" yaml:"certificate"`
}

// To get the CloudFront metrics from the CloudWatch API, you must use the US East (N.
//
// Virginia) Region (us-east-1).
// https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/programming-cloudwatch-metrics.html
// Experimental.
type CloudFrontDistributionMetricFactory interface {
	// Experimental.
	Metric4xxErrorRateAverage() interface{}
	// Experimental.
	Metric5xxErrorRateAverage() interface{}
	// Cache hit rate metric.
	//
	// This is an additional metric that needs to be explicitly enabled for an additional cost.
	// See: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional
	//
	// Experimental.
	MetricCacheHitRateAverageInPercent() interface{}
	// Experimental.
	MetricRequestCount() interface{}
	// Experimental.
	MetricRequestRate() interface{}
	// Deprecated: use metricRequestRate.
	MetricRequestTps() interface{}
	// Experimental.
	MetricTotalBytesDownloaded() interface{}
	// Experimental.
	MetricTotalBytesUploaded() interface{}
	// Experimental.
	MetricTotalErrorRateAverage() interface{}
}

// The jsii proxy struct for CloudFrontDistributionMetricFactory
type jsiiProxy_CloudFrontDistributionMetricFactory struct {
	_ byte // padding
}

// Experimental.
func NewCloudFrontDistributionMetricFactory(metricFactory MetricFactory, props *CloudFrontDistributionMetricFactoryProps) CloudFrontDistributionMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_CloudFrontDistributionMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CloudFrontDistributionMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCloudFrontDistributionMetricFactory_Override(c CloudFrontDistributionMetricFactory, metricFactory MetricFactory, props *CloudFrontDistributionMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CloudFrontDistributionMetricFactory",
		[]interface{}{metricFactory, props},
		c,
	)
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) Metric4xxErrorRateAverage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metric4xxErrorRateAverage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) Metric5xxErrorRateAverage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metric5xxErrorRateAverage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricCacheHitRateAverageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricCacheHitRateAverageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricRequestRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricRequestRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricRequestTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricRequestTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricTotalBytesDownloaded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricTotalBytesDownloaded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricTotalBytesUploaded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricTotalBytesUploaded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMetricFactory) MetricTotalErrorRateAverage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricTotalErrorRateAverage",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CloudFrontDistributionMetricFactoryProps struct {
	// Experimental.
	Distribution awscloudfront.IDistribution `field:"required" json:"distribution" yaml:"distribution"`
	// Generate dashboard charts for additional CloudFront distribution metrics.
	//
	// To enable additional metrics on your CloudFront distribution, see
	// https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional
	// Experimental.
	AdditionalMetricsEnabled *bool `field:"optional" json:"additionalMetricsEnabled" yaml:"additionalMetricsEnabled"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type CloudFrontDistributionMonitoring interface {
	Monitoring
	// Experimental.
	AdditionalMetricsEnabled() *bool
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	CacheHitRate() interface{}
	// Experimental.
	DownloadedBytesMetric() interface{}
	// Experimental.
	Error4xxRate() interface{}
	// Experimental.
	Error5xxRate() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	NamingStrategy() MonitoringNamingStrategy
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TpsAlarmFactory() TpsAlarmFactory
	// Experimental.
	TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TpsMetric() interface{}
	// Experimental.
	UploadedBytesMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateCacheWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTrafficWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for CloudFrontDistributionMonitoring
type jsiiProxy_CloudFrontDistributionMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) AdditionalMetricsEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"additionalMetricsEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) CacheHitRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cacheHitRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) DownloadedBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"downloadedBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) Error4xxRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error4xxRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) Error5xxRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"error5xxRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) NamingStrategy() MonitoringNamingStrategy {
	var returns MonitoringNamingStrategy
	_jsii_.Get(
		j,
		"namingStrategy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) TpsAlarmFactory() TpsAlarmFactory {
	var returns TpsAlarmFactory
	_jsii_.Get(
		j,
		"tpsAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"tpsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CloudFrontDistributionMonitoring) UploadedBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"uploadedBytesMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewCloudFrontDistributionMonitoring(scope MonitoringScope, props *CloudFrontDistributionMonitoringProps) CloudFrontDistributionMonitoring {
	_init_.Initialize()

	j := jsiiProxy_CloudFrontDistributionMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CloudFrontDistributionMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCloudFrontDistributionMonitoring_Override(c CloudFrontDistributionMonitoring, scope MonitoringScope, props *CloudFrontDistributionMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CloudFrontDistributionMonitoring",
		[]interface{}{scope, props},
		c,
	)
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		c,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		c,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateCacheWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createCacheWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		c,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		c,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		c,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createTpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateTrafficWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createTrafficWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		c,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CloudFrontDistributionMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CloudFrontDistributionMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type CloudFrontDistributionMonitoringProps struct {
	// Experimental.
	Distribution awscloudfront.IDistribution `field:"required" json:"distribution" yaml:"distribution"`
	// Generate dashboard charts for additional CloudFront distribution metrics.
	//
	// To enable additional metrics on your CloudFront distribution, see
	// https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional
	// Experimental.
	AdditionalMetricsEnabled *bool `field:"optional" json:"additionalMetricsEnabled" yaml:"additionalMetricsEnabled"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddError4xxRate *map[string]*ErrorRateThreshold `field:"optional" json:"addError4xxRate" yaml:"addError4xxRate"`
	// Experimental.
	AddFault5xxRate *map[string]*ErrorRateThreshold `field:"optional" json:"addFault5xxRate" yaml:"addFault5xxRate"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
}

// Experimental.
type CodeBuildProjectMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Project() awscodebuild.IProject
	// Experimental.
	MetricBuildCount() interface{}
	// Experimental.
	MetricDurationP50InSeconds() interface{}
	// Experimental.
	MetricDurationP90InSeconds() interface{}
	// Experimental.
	MetricDurationP99InSeconds() interface{}
	// Experimental.
	MetricFailedBuildCount() interface{}
	// Experimental.
	MetricFailedBuildRate() interface{}
	// Experimental.
	MetricSucceededBuildCount() interface{}
}

// The jsii proxy struct for CodeBuildProjectMetricFactory
type jsiiProxy_CodeBuildProjectMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_CodeBuildProjectMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMetricFactory) Project() awscodebuild.IProject {
	var returns awscodebuild.IProject
	_jsii_.Get(
		j,
		"project",
		&returns,
	)
	return returns
}


// Experimental.
func NewCodeBuildProjectMetricFactory(metricFactory MetricFactory, props *CodeBuildProjectMetricFactoryProps) CodeBuildProjectMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_CodeBuildProjectMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CodeBuildProjectMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCodeBuildProjectMetricFactory_Override(c CodeBuildProjectMetricFactory, metricFactory MetricFactory, props *CodeBuildProjectMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CodeBuildProjectMetricFactory",
		[]interface{}{metricFactory, props},
		c,
	)
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricBuildCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricBuildCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricDurationP50InSeconds() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricDurationP50InSeconds",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricDurationP90InSeconds() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricDurationP90InSeconds",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricDurationP99InSeconds() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricDurationP99InSeconds",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricFailedBuildCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricFailedBuildCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricFailedBuildRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricFailedBuildRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMetricFactory) MetricSucceededBuildCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		c,
		"metricSucceededBuildCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CodeBuildProjectMetricFactoryProps struct {
	// Experimental.
	Project awscodebuild.IProject `field:"required" json:"project" yaml:"project"`
}

// Experimental.
type CodeBuildProjectMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	BuildCountMetric() interface{}
	// Experimental.
	DurationAlarmFactory() LatencyAlarmFactory
	// Experimental.
	DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DurationP50InSecondsMetric() interface{}
	// Experimental.
	DurationP90InSecondsMetric() interface{}
	// Experimental.
	DurationP99InSecondsMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedBuildCountMetric() interface{}
	// Experimental.
	FailedBuildRateMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	ProjectUrl() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	SucceededBuildCountMetric() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateBuildCountsWidget() awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDurationWidget() awscloudwatch.GraphWidget
	// Experimental.
	CreateFailedBuildRateWidget() awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	ResolveProjectName(project awscodebuild.IProject) *string
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for CodeBuildProjectMonitoring
type jsiiProxy_CodeBuildProjectMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) BuildCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"buildCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) DurationAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"durationAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"durationAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) DurationP50InSecondsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"durationP50InSecondsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) DurationP90InSecondsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"durationP90InSecondsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) DurationP99InSecondsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"durationP99InSecondsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) FailedBuildCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedBuildCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) FailedBuildRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedBuildRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) ProjectUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"projectUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) SucceededBuildCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"succeededBuildCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CodeBuildProjectMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewCodeBuildProjectMonitoring(scope MonitoringScope, props *CodeBuildProjectMonitoringProps) CodeBuildProjectMonitoring {
	_init_.Initialize()

	j := jsiiProxy_CodeBuildProjectMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CodeBuildProjectMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCodeBuildProjectMonitoring_Override(c CodeBuildProjectMonitoring, scope MonitoringScope, props *CodeBuildProjectMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CodeBuildProjectMonitoring",
		[]interface{}{scope, props},
		c,
	)
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		c,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		c,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateBuildCountsWidget() awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createBuildCountsWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		c,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateDurationWidget() awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createDurationWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateFailedBuildRateWidget() awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		c,
		"createFailedBuildRateWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		c,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		c,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		c,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) ResolveProjectName(project awscodebuild.IProject) *string {
	var returns *string

	_jsii_.Invoke(
		c,
		"resolveProjectName",
		[]interface{}{project},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CodeBuildProjectMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CodeBuildProjectMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedBuildCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedBuildCountAlarm" yaml:"addFailedBuildCountAlarm"`
	// Experimental.
	AddFailedBuildRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedBuildRateAlarm" yaml:"addFailedBuildRateAlarm"`
}

// Monitoring props for CodeBuild projects.
// Experimental.
type CodeBuildProjectMonitoringProps struct {
	// Experimental.
	Project awscodebuild.IProject `field:"required" json:"project" yaml:"project"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedBuildCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedBuildCountAlarm" yaml:"addFailedBuildCountAlarm"`
	// Experimental.
	AddFailedBuildRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedBuildRateAlarm" yaml:"addFailedBuildRateAlarm"`
}

// Experimental.
type CompositeAlarmOperator string

const (
	// trigger only if all the alarms are triggered.
	// Experimental.
	CompositeAlarmOperator_AND CompositeAlarmOperator = "AND"
	// trigger if any of the alarms is triggered.
	// Experimental.
	CompositeAlarmOperator_OR CompositeAlarmOperator = "OR"
)

// Experimental.
type ConsumedCapacityThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxConsumedCapacityUnits *float64 `field:"required" json:"maxConsumedCapacityUnits" yaml:"maxConsumedCapacityUnits"`
}

// Experimental.
type CustomAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddCustomAlarm(metric interface{}, alarmNameSuffix *string, disambiguator *string, props *CustomThreshold) *AlarmWithAnnotation
}

// The jsii proxy struct for CustomAlarmFactory
type jsiiProxy_CustomAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_CustomAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewCustomAlarmFactory(alarmFactory AlarmFactory) CustomAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_CustomAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewCustomAlarmFactory_Override(c CustomAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomAlarmFactory",
		[]interface{}{alarmFactory},
		c,
	)
}

func (c *jsiiProxy_CustomAlarmFactory) AddCustomAlarm(metric interface{}, alarmNameSuffix *string, disambiguator *string, props *CustomThreshold) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		c,
		"addCustomAlarm",
		[]interface{}{metric, alarmNameSuffix, disambiguator, props},
		&returns,
	)

	return returns
}

// Common customization that can be attached to each alarm.
// Experimental.
type CustomAlarmThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
}

// Experimental.
type CustomEc2ServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	Ec2Service awsecs.Ec2Service `field:"required" json:"ec2Service" yaml:"ec2Service"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
	// Experimental.
	LoadBalancer interface{} `field:"optional" json:"loadBalancer" yaml:"loadBalancer"`
	// Experimental.
	TargetGroup interface{} `field:"optional" json:"targetGroup" yaml:"targetGroup"`
}

// Experimental.
type CustomFargateServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	FargateService awsecs.FargateService `field:"required" json:"fargateService" yaml:"fargateService"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
	// Experimental.
	LoadBalancer interface{} `field:"optional" json:"loadBalancer" yaml:"loadBalancer"`
	// Experimental.
	TargetGroup interface{} `field:"optional" json:"targetGroup" yaml:"targetGroup"`
}

// Custom metric group represents a single widget.
// Experimental.
type CustomMetricGroup struct {
	// list of metrics in the group (can be defined in different ways, see the type documentation).
	// Experimental.
	Metrics *[]interface{} `field:"required" json:"metrics" yaml:"metrics"`
	// title of the whole group.
	// Experimental.
	Title *string `field:"required" json:"title" yaml:"title"`
	// optional axis.
	// Experimental.
	GraphWidgetAxis *awscloudwatch.YAxisProps `field:"optional" json:"graphWidgetAxis" yaml:"graphWidgetAxis"`
	// optional right axis default: undefined.
	// Experimental.
	GraphWidgetRightAxis *awscloudwatch.YAxisProps `field:"optional" json:"graphWidgetRightAxis" yaml:"graphWidgetRightAxis"`
	// type of the widget.
	// Experimental.
	GraphWidgetType GraphWidgetType `field:"optional" json:"graphWidgetType" yaml:"graphWidgetType"`
	// optional custom horizontal annotations which will be displayed over the metrics on the left axis (if there are any alarms, any existing annotations will be merged together).
	// Experimental.
	HorizontalAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"optional" json:"horizontalAnnotations" yaml:"horizontalAnnotations"`
	// optional custom horizontal annotations which will be displayed over the metrics on the right axis (if there are any alarms, any existing annotations will be merged together).
	// Experimental.
	HorizontalRightAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"optional" json:"horizontalRightAnnotations" yaml:"horizontalRightAnnotations"`
	// Flag indicating, whether this is an important metric group that should be included in the summary as well.
	// Experimental.
	Important *bool `field:"optional" json:"important" yaml:"important"`
}

// Experimental.
type CustomMetricGroupWithAnnotations struct {
	// Experimental.
	Annotations *[]*awscloudwatch.HorizontalAnnotation `field:"required" json:"annotations" yaml:"annotations"`
	// Experimental.
	MetricGroup *CustomMetricGroup `field:"required" json:"metricGroup" yaml:"metricGroup"`
	// Experimental.
	RightAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"required" json:"rightAnnotations" yaml:"rightAnnotations"`
	// Experimental.
	TitleAddons *[]*string `field:"required" json:"titleAddons" yaml:"titleAddons"`
}

// Custom metric search.
// Experimental.
type CustomMetricSearch struct {
	// search dimensions (can be empty).
	// Experimental.
	DimensionsMap *map[string]*string `field:"required" json:"dimensionsMap" yaml:"dimensionsMap"`
	// search query (can be empty).
	// Experimental.
	SearchQuery *string `field:"required" json:"searchQuery" yaml:"searchQuery"`
	// metric statistic.
	// Experimental.
	Statistic MetricStatistic `field:"required" json:"statistic" yaml:"statistic"`
	// custom label for the metrics.
	// Experimental.
	Label *string `field:"optional" json:"label" yaml:"label"`
	// metric namespace.
	// Experimental.
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	// metric period.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// axis (right or left) on which to graph metric default: AxisPosition.LEFT.
	// Experimental.
	Position AxisPosition `field:"optional" json:"position" yaml:"position"`
}

// Custom metric with an alarm defined.
// Experimental.
type CustomMetricWithAlarm struct {
	// alarm definitions.
	// Experimental.
	AddAlarm *map[string]*CustomThreshold `field:"required" json:"addAlarm" yaml:"addAlarm"`
	// alarm friendly name.
	// Experimental.
	AlarmFriendlyName *string `field:"required" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// metric to alarm on.
	// Experimental.
	Metric interface{} `field:"required" json:"metric" yaml:"metric"`
	// axis (right or left) on which to graph metric default: AxisPosition.LEFT.
	// Experimental.
	Position AxisPosition `field:"optional" json:"position" yaml:"position"`
}

// Custom metric with anomaly detection.
// Experimental.
type CustomMetricWithAnomalyDetection struct {
	// alarm friendly name.
	// Experimental.
	AlarmFriendlyName *string `field:"required" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// standard deviation for the anomaly detection to be rendered on the graph widget.
	// Experimental.
	AnomalyDetectionStandardDeviationToRender *float64 `field:"required" json:"anomalyDetectionStandardDeviationToRender" yaml:"anomalyDetectionStandardDeviationToRender"`
	// metric to alarm on.
	// Experimental.
	Metric interface{} `field:"required" json:"metric" yaml:"metric"`
	// adds alarm on a detected anomaly.
	// Experimental.
	AddAlarmOnAnomaly *map[string]*AnomalyDetectionThreshold `field:"optional" json:"addAlarmOnAnomaly" yaml:"addAlarmOnAnomaly"`
	// anomaly detection period.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
}

// Custom monitoring is a construct allowing you to monitor your own custom metrics.
//
// The entire construct consists of metric groups.
// Each metric group represents a single graph widget with multiple metrics.
// Each metric inside the metric group represents a single metric inside a graph.
// The widgets will be sized automatically to waste as little space as possible.
// Experimental.
type CustomMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	AnomalyDetectingAlarmFactory() AnomalyDetectingAlarmFactory
	// Experimental.
	CustomAlarmFactory() CustomAlarmFactory
	// Experimental.
	Description() *string
	// Experimental.
	DescriptionWidgetHeight() *float64
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MetricGroups() *[]*CustomMetricGroupWithAnnotations
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for CustomMonitoring
type jsiiProxy_CustomMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_CustomMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) AnomalyDetectingAlarmFactory() AnomalyDetectingAlarmFactory {
	var returns AnomalyDetectingAlarmFactory
	_jsii_.Get(
		j,
		"anomalyDetectingAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) CustomAlarmFactory() CustomAlarmFactory {
	var returns CustomAlarmFactory
	_jsii_.Get(
		j,
		"customAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) DescriptionWidgetHeight() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"descriptionWidgetHeight",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) MetricGroups() *[]*CustomMetricGroupWithAnnotations {
	var returns *[]*CustomMetricGroupWithAnnotations
	_jsii_.Get(
		j,
		"metricGroups",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewCustomMonitoring(scope MonitoringScope, props *CustomMonitoringProps) CustomMonitoring {
	_init_.Initialize()

	j := jsiiProxy_CustomMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewCustomMonitoring_Override(c CustomMonitoring, scope MonitoringScope, props *CustomMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomMonitoring",
		[]interface{}{scope, props},
		c,
	)
}

func (c *jsiiProxy_CustomMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		c,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (c *jsiiProxy_CustomMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		c,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		c,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		c,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		c,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (c *jsiiProxy_CustomMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		c,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type CustomMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	MetricGroups *[]*CustomMetricGroup `field:"required" json:"metricGroups" yaml:"metricGroups"`
	// Experimental.
	Description *string `field:"optional" json:"description" yaml:"description"`
	// Experimental.
	DescriptionWidgetHeight *float64 `field:"optional" json:"descriptionWidgetHeight" yaml:"descriptionWidgetHeight"`
}

// Experimental.
type CustomThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	ComparisonOperator awscloudwatch.ComparisonOperator `field:"required" json:"comparisonOperator" yaml:"comparisonOperator"`
	// Experimental.
	Threshold *float64 `field:"required" json:"threshold" yaml:"threshold"`
	// Experimental.
	AdditionalDescription *string `field:"optional" json:"additionalDescription" yaml:"additionalDescription"`
	// Experimental.
	DedupeString *string `field:"optional" json:"dedupeString" yaml:"dedupeString"`
}

// A dashboard widget that can be customized using a Lambda.
// Experimental.
type CustomWidget interface {
	awscloudwatch.ConcreteWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for CustomWidget
type jsiiProxy_CustomWidget struct {
	internal.Type__awscloudwatchConcreteWidget
}

func (j *jsiiProxy_CustomWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_CustomWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewCustomWidget(props *CustomWidgetProps) CustomWidget {
	_init_.Initialize()

	j := jsiiProxy_CustomWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewCustomWidget_Override(c CustomWidget, props *CustomWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.CustomWidget",
		[]interface{}{props},
		c,
	)
}

func (j *jsiiProxy_CustomWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_CustomWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (c *jsiiProxy_CustomWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		c,
		"position",
		[]interface{}{x, y},
	)
}

func (c *jsiiProxy_CustomWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		c,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Properties of a custom widget.
// Experimental.
type CustomWidgetProps struct {
	// Lambda providing the widget contents.
	//
	// The Lambda function should return HTML with widget code.
	// The simplest Lambda example:
	// ```typescript
	// exports.handler = function (event, context, callback) {
	//    return callback(null, "<h1>Hello! This is a custom widget.</h1><pre>" + JSON.stringify(event, null, 2) + "</pre>");
	// };
	// ```.
	// Experimental.
	Handler awslambda.IFunction `field:"required" json:"handler" yaml:"handler"`
	// Arguments to pass to the Lambda.
	//
	// These arguments will be available in the Lambda context.
	// Experimental.
	HandlerParams interface{} `field:"optional" json:"handlerParams" yaml:"handlerParams"`
	// Height of the widget.
	// Experimental.
	Height *float64 `field:"optional" json:"height" yaml:"height"`
	// Title for the graph.
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
	// Whether the widget should be updated (by calling the Lambda again) on refresh.
	// Experimental.
	UpdateOnRefresh *bool `field:"optional" json:"updateOnRefresh" yaml:"updateOnRefresh"`
	// Whether the widget should be updated (by calling the Lambda again) on resize.
	// Experimental.
	UpdateOnResize *bool `field:"optional" json:"updateOnResize" yaml:"updateOnResize"`
	// Whether the widget should be updated (by calling the Lambda again) on time range change.
	// Experimental.
	UpdateOnTimeRangeChange *bool `field:"optional" json:"updateOnTimeRangeChange" yaml:"updateOnTimeRangeChange"`
	// Width of the widget, in a grid of 24 units wide.
	// Experimental.
	Width *float64 `field:"optional" json:"width" yaml:"width"`
}

// Preferred way of rendering the widgets.
// Experimental.
type DashboardRenderingPreference string

const (
	// create standard set of dashboards with interactive widgets only.
	// Experimental.
	DashboardRenderingPreference_INTERACTIVE_ONLY DashboardRenderingPreference = "INTERACTIVE_ONLY"
	// create standard set of dashboards with bitmap widgets only.
	// Experimental.
	DashboardRenderingPreference_BITMAP_ONLY DashboardRenderingPreference = "BITMAP_ONLY"
	// create a two sets of dashboards: standard set (interactive) and a copy (bitmap).
	// Experimental.
	DashboardRenderingPreference_INTERACTIVE_AND_BITMAP DashboardRenderingPreference = "INTERACTIVE_AND_BITMAP"
)

// Composite dashboard which keeps a normal dashboard with its bitmap copy.
//
// The bitmap copy name will be derived from the primary dashboard name, if specified.
// Experimental.
type DashboardWithBitmapCopy interface {
	awscloudwatch.Dashboard
	// Experimental.
	BitmapCopy() BitmapDashboard
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Add a widget to the dashboard.
	//
	// Widgets given in multiple calls to add() will be laid out stacked on
	// top of each other.
	//
	// Multiple widgets added in the same call to add() will be laid out next
	// to each other.
	// Experimental.
	AddWidgets(widgets ...awscloudwatch.IWidget)
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for DashboardWithBitmapCopy
type jsiiProxy_DashboardWithBitmapCopy struct {
	internal.Type__awscloudwatchDashboard
}

func (j *jsiiProxy_DashboardWithBitmapCopy) BitmapCopy() BitmapDashboard {
	var returns BitmapDashboard
	_jsii_.Get(
		j,
		"bitmapCopy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DashboardWithBitmapCopy) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DashboardWithBitmapCopy) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DashboardWithBitmapCopy) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DashboardWithBitmapCopy) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewDashboardWithBitmapCopy(scope constructs.Construct, id *string, props *awscloudwatch.DashboardProps) DashboardWithBitmapCopy {
	_init_.Initialize()

	j := jsiiProxy_DashboardWithBitmapCopy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DashboardWithBitmapCopy",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDashboardWithBitmapCopy_Override(d DashboardWithBitmapCopy, scope constructs.Construct, id *string, props *awscloudwatch.DashboardProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DashboardWithBitmapCopy",
		[]interface{}{scope, id, props},
		d,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func DashboardWithBitmapCopy_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.DashboardWithBitmapCopy",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func DashboardWithBitmapCopy_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.DashboardWithBitmapCopy",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DashboardWithBitmapCopy) AddWidgets(widgets ...awscloudwatch.IWidget) {
	args := []interface{}{}
	for _, a := range widgets {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		d,
		"addWidgets",
		args,
	)
}

func (d *jsiiProxy_DashboardWithBitmapCopy) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	_jsii_.InvokeVoid(
		d,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (d *jsiiProxy_DashboardWithBitmapCopy) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DashboardWithBitmapCopy) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DashboardWithBitmapCopy) GetResourceNameAttribute(nameAttr *string) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DashboardWithBitmapCopy) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DaysSinceUpdateThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxDaysSinceUpdate *float64 `field:"required" json:"maxDaysSinceUpdate" yaml:"maxDaysSinceUpdate"`
}

// Experimental.
type DaysToExpiryThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinDaysToExpiry *float64 `field:"required" json:"minDaysToExpiry" yaml:"minDaysToExpiry"`
}

// Default annotation strategy that returns the built-in alarm annotation.
// Experimental.
type DefaultAlarmAnnotationStrategy interface {
	FillingAlarmAnnotationStrategy
	// Creates annotation based on the metric and alarm properties.
	// Experimental.
	CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
	// Experimental.
	CreateAnnotationToFill(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
	// Experimental.
	GetAlarmingRangeShade(props *AlarmAnnotationStrategyProps) awscloudwatch.Shading
}

// The jsii proxy struct for DefaultAlarmAnnotationStrategy
type jsiiProxy_DefaultAlarmAnnotationStrategy struct {
	jsiiProxy_FillingAlarmAnnotationStrategy
}

// Experimental.
func NewDefaultAlarmAnnotationStrategy() DefaultAlarmAnnotationStrategy {
	_init_.Initialize()

	j := jsiiProxy_DefaultAlarmAnnotationStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultAlarmAnnotationStrategy",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewDefaultAlarmAnnotationStrategy_Override(d DefaultAlarmAnnotationStrategy) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultAlarmAnnotationStrategy",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DefaultAlarmAnnotationStrategy) CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		d,
		"createAnnotation",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultAlarmAnnotationStrategy) CreateAnnotationToFill(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		d,
		"createAnnotationToFill",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultAlarmAnnotationStrategy) GetAlarmingRangeShade(props *AlarmAnnotationStrategyProps) awscloudwatch.Shading {
	var returns awscloudwatch.Shading

	_jsii_.Invoke(
		d,
		"getAlarmingRangeShade",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Experimental.
type DefaultDashboardFactory interface {
	constructs.Construct
	IDashboardFactory
	// Experimental.
	AlarmDashboard() awscloudwatch.Dashboard
	// Experimental.
	AnyDashboardCreated() *bool
	// Experimental.
	Dashboard() awscloudwatch.Dashboard
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Experimental.
	SummaryDashboard() awscloudwatch.Dashboard
	// Experimental.
	AddSegment(props IDashboardFactoryProps)
	// Experimental.
	CreatedAlarmDashboard() awscloudwatch.Dashboard
	// Experimental.
	CreateDashboard(renderingPreference DashboardRenderingPreference, id *string, props *awscloudwatch.DashboardProps) awscloudwatch.Dashboard
	// Experimental.
	CreatedDashboard() awscloudwatch.Dashboard
	// Experimental.
	CreatedSummaryDashboard() awscloudwatch.Dashboard
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for DefaultDashboardFactory
type jsiiProxy_DefaultDashboardFactory struct {
	internal.Type__constructsConstruct
	jsiiProxy_IDashboardFactory
}

func (j *jsiiProxy_DefaultDashboardFactory) AlarmDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard
	_jsii_.Get(
		j,
		"alarmDashboard",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultDashboardFactory) AnyDashboardCreated() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"anyDashboardCreated",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultDashboardFactory) Dashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard
	_jsii_.Get(
		j,
		"dashboard",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultDashboardFactory) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DefaultDashboardFactory) SummaryDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard
	_jsii_.Get(
		j,
		"summaryDashboard",
		&returns,
	)
	return returns
}


// Experimental.
func NewDefaultDashboardFactory(scope constructs.Construct, id *string, props *MonitoringDashboardsProps) DefaultDashboardFactory {
	_init_.Initialize()

	j := jsiiProxy_DefaultDashboardFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultDashboardFactory",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDefaultDashboardFactory_Override(d DefaultDashboardFactory, scope constructs.Construct, id *string, props *MonitoringDashboardsProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultDashboardFactory",
		[]interface{}{scope, id, props},
		d,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func DefaultDashboardFactory_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.DefaultDashboardFactory",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultDashboardFactory) AddSegment(props IDashboardFactoryProps) {
	_jsii_.InvokeVoid(
		d,
		"addSegment",
		[]interface{}{props},
	)
}

func (d *jsiiProxy_DefaultDashboardFactory) CreatedAlarmDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		d,
		"createdAlarmDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultDashboardFactory) CreateDashboard(renderingPreference DashboardRenderingPreference, id *string, props *awscloudwatch.DashboardProps) awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		d,
		"createDashboard",
		[]interface{}{renderingPreference, id, props},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultDashboardFactory) CreatedDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		d,
		"createdDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultDashboardFactory) CreatedSummaryDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		d,
		"createdSummaryDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DefaultDashboardFactory) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DefaultWidgetFactory interface {
	IWidgetFactory
	// Create widget representing an alarm detail.
	// Experimental.
	CreateAlarmDetailWidget(alarm *AlarmWithAnnotation) awscloudwatch.IWidget
}

// The jsii proxy struct for DefaultWidgetFactory
type jsiiProxy_DefaultWidgetFactory struct {
	jsiiProxy_IWidgetFactory
}

// Experimental.
func NewDefaultWidgetFactory() DefaultWidgetFactory {
	_init_.Initialize()

	j := jsiiProxy_DefaultWidgetFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultWidgetFactory",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewDefaultWidgetFactory_Override(d DefaultWidgetFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DefaultWidgetFactory",
		nil, // no parameters
		d,
	)
}

func (d *jsiiProxy_DefaultWidgetFactory) CreateAlarmDetailWidget(alarm *AlarmWithAnnotation) awscloudwatch.IWidget {
	var returns awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"createAlarmDetailWidget",
		[]interface{}{alarm},
		&returns,
	)

	return returns
}

// Default dedupe strategy - does not add any prefix nor suffix.
// Experimental.
type DoNotModifyDedupeString interface {
	ExtendDedupeString
	// Process the dedupe string which was auto-generated.
	// Experimental.
	ProcessDedupeString(dedupeString *string) *string
	// Process the dedupe string which was specified by the user as an override.
	// Experimental.
	ProcessDedupeStringOverride(dedupeString *string) *string
}

// The jsii proxy struct for DoNotModifyDedupeString
type jsiiProxy_DoNotModifyDedupeString struct {
	jsiiProxy_ExtendDedupeString
}

// Experimental.
func NewDoNotModifyDedupeString(prefix *string, suffix *string) DoNotModifyDedupeString {
	_init_.Initialize()

	j := jsiiProxy_DoNotModifyDedupeString{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DoNotModifyDedupeString",
		[]interface{}{prefix, suffix},
		&j,
	)

	return &j
}

// Experimental.
func NewDoNotModifyDedupeString_Override(d DoNotModifyDedupeString, prefix *string, suffix *string) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DoNotModifyDedupeString",
		[]interface{}{prefix, suffix},
		d,
	)
}

func (d *jsiiProxy_DoNotModifyDedupeString) ProcessDedupeString(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"processDedupeString",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DoNotModifyDedupeString) ProcessDedupeStringOverride(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		d,
		"processDedupeStringOverride",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

// Experimental.
type DocumentDbMetricFactory interface {
	// Experimental.
	ClusterIdentifier() *string
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricAverageCpuUsageInPercent() interface{}
	// Experimental.
	MetricMaxConnectionCount() interface{}
	// Experimental.
	MetricMaxCursorCount() interface{}
	// Experimental.
	MetricMaxTransactionOpenCount() interface{}
	// Experimental.
	MetricOperationsThrottledDueLowMemoryCount() interface{}
	// Experimental.
	MetricReadLatencyInMillis(latencyType LatencyType) interface{}
	// Experimental.
	MetricWriteLatencyInMillis(latencyType LatencyType) interface{}
}

// The jsii proxy struct for DocumentDbMetricFactory
type jsiiProxy_DocumentDbMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_DocumentDbMetricFactory) ClusterIdentifier() *string {
	var returns *string
	_jsii_.Get(
		j,
		"clusterIdentifier",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewDocumentDbMetricFactory(metricFactory MetricFactory, props *DocumentDbMetricFactoryProps) DocumentDbMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_DocumentDbMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DocumentDbMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDocumentDbMetricFactory_Override(d DocumentDbMetricFactory, metricFactory MetricFactory, props *DocumentDbMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DocumentDbMetricFactory",
		[]interface{}{metricFactory, props},
		d,
	)
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricAverageCpuUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricAverageCpuUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricMaxConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricMaxConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricMaxCursorCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricMaxCursorCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricMaxTransactionOpenCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricMaxTransactionOpenCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricOperationsThrottledDueLowMemoryCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricOperationsThrottledDueLowMemoryCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricReadLatencyInMillis(latencyType LatencyType) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricReadLatencyInMillis",
		[]interface{}{latencyType},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMetricFactory) MetricWriteLatencyInMillis(latencyType LatencyType) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricWriteLatencyInMillis",
		[]interface{}{latencyType},
		&returns,
	)

	return returns
}

// Experimental.
type DocumentDbMetricFactoryProps struct {
	// database cluster.
	// Experimental.
	Cluster awsdocdb.IDatabaseCluster `field:"required" json:"cluster" yaml:"cluster"`
}

// Experimental.
type DocumentDbMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConnectionsMetric() interface{}
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	CursorsMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	ReadLatencyMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	ThrottledMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	TransactionsMetric() interface{}
	// Experimental.
	Url() *string
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Experimental.
	UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	WriteLatencyMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateResourceUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTransactionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for DocumentDbMonitoring
type jsiiProxy_DocumentDbMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_DocumentDbMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) ConnectionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"connectionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) CursorsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cursorsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) ReadLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) ThrottledMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"throttledMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) TransactionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"transactionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) Url() *string {
	var returns *string
	_jsii_.Get(
		j,
		"url",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"usageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DocumentDbMonitoring) WriteLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeLatencyMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewDocumentDbMonitoring(scope MonitoringScope, props *DocumentDbMonitoringProps) DocumentDbMonitoring {
	_init_.Initialize()

	j := jsiiProxy_DocumentDbMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DocumentDbMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDocumentDbMonitoring_Override(d DocumentDbMonitoring, scope MonitoringScope, props *DocumentDbMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DocumentDbMonitoring",
		[]interface{}{scope, props},
		d,
	)
}

func (d *jsiiProxy_DocumentDbMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		d,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (d *jsiiProxy_DocumentDbMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		d,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createConnectionsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		d,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		d,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateResourceUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createResourceUsageWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		d,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateTransactionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createTransactionsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		d,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DocumentDbMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DocumentDbMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
}

// Experimental.
type DocumentDbMonitoringProps struct {
	// database cluster.
	// Experimental.
	Cluster awsdocdb.IDatabaseCluster `field:"required" json:"cluster" yaml:"cluster"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
}

// Line graph widget with both left and right axes.
//
// The purpose of this custom class is to make the properties more strict.
// It will avoid graphs with undefined axes and dimensions.
// Experimental.
type DoubleAxisGraphWidget interface {
	awscloudwatch.GraphWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Add another metric to the left Y axis of the GraphWidget.
	// Experimental.
	AddLeftMetric(metric awscloudwatch.IMetric)
	// Add another metric to the right Y axis of the GraphWidget.
	// Experimental.
	AddRightMetric(metric awscloudwatch.IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for DoubleAxisGraphWidget
type jsiiProxy_DoubleAxisGraphWidget struct {
	internal.Type__awscloudwatchGraphWidget
}

func (j *jsiiProxy_DoubleAxisGraphWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DoubleAxisGraphWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DoubleAxisGraphWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DoubleAxisGraphWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewDoubleAxisGraphWidget(props *DoubleAxisGraphWidgetProps) DoubleAxisGraphWidget {
	_init_.Initialize()

	j := jsiiProxy_DoubleAxisGraphWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DoubleAxisGraphWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewDoubleAxisGraphWidget_Override(d DoubleAxisGraphWidget, props *DoubleAxisGraphWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DoubleAxisGraphWidget",
		[]interface{}{props},
		d,
	)
}

func (j *jsiiProxy_DoubleAxisGraphWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_DoubleAxisGraphWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (d *jsiiProxy_DoubleAxisGraphWidget) AddLeftMetric(metric awscloudwatch.IMetric) {
	_jsii_.InvokeVoid(
		d,
		"addLeftMetric",
		[]interface{}{metric},
	)
}

func (d *jsiiProxy_DoubleAxisGraphWidget) AddRightMetric(metric awscloudwatch.IMetric) {
	_jsii_.InvokeVoid(
		d,
		"addRightMetric",
		[]interface{}{metric},
	)
}

func (d *jsiiProxy_DoubleAxisGraphWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		d,
		"position",
		[]interface{}{x, y},
	)
}

func (d *jsiiProxy_DoubleAxisGraphWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		d,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DoubleAxisGraphWidgetProps struct {
	// Experimental.
	Height *float64 `field:"required" json:"height" yaml:"height"`
	// Experimental.
	LeftAxis *awscloudwatch.YAxisProps `field:"required" json:"leftAxis" yaml:"leftAxis"`
	// Experimental.
	LeftMetrics *[]awscloudwatch.IMetric `field:"required" json:"leftMetrics" yaml:"leftMetrics"`
	// Experimental.
	RightAxis *awscloudwatch.YAxisProps `field:"required" json:"rightAxis" yaml:"rightAxis"`
	// Experimental.
	RightMetrics *[]awscloudwatch.IMetric `field:"required" json:"rightMetrics" yaml:"rightMetrics"`
	// Experimental.
	Width *float64 `field:"required" json:"width" yaml:"width"`
	// Experimental.
	LeftAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"optional" json:"leftAnnotations" yaml:"leftAnnotations"`
	// Experimental.
	RightAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"optional" json:"rightAnnotations" yaml:"rightAnnotations"`
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
}

// Experimental.
type DurationThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxDuration awscdk.Duration `field:"required" json:"maxDuration" yaml:"maxDuration"`
}

// Experimental.
type DynamoAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddConsumedCapacityAlarm(metric interface{}, capacityType CapacityType, props *ConsumedCapacityThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddThrottledEventsAlarm(metric interface{}, capacityType CapacityType, props *ThrottledEventsThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for DynamoAlarmFactory
type jsiiProxy_DynamoAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_DynamoAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewDynamoAlarmFactory(alarmFactory AlarmFactory) DynamoAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_DynamoAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewDynamoAlarmFactory_Override(d DynamoAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoAlarmFactory",
		[]interface{}{alarmFactory},
		d,
	)
}

func (d *jsiiProxy_DynamoAlarmFactory) AddConsumedCapacityAlarm(metric interface{}, capacityType CapacityType, props *ConsumedCapacityThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		d,
		"addConsumedCapacityAlarm",
		[]interface{}{metric, capacityType, props, disambiguator},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoAlarmFactory) AddThrottledEventsAlarm(metric interface{}, capacityType CapacityType, props *ThrottledEventsThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		d,
		"addThrottledEventsAlarm",
		[]interface{}{metric, capacityType, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type DynamoTableGlobalSecondaryIndexMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricConsumedReadCapacityUnits() interface{}
	// Experimental.
	MetricConsumedWriteCapacityUnits() interface{}
	// Experimental.
	MetricIndexConsumedWriteUnitsMetric() interface{}
	// Experimental.
	MetricProvisionedReadCapacityUnits() interface{}
	// Experimental.
	MetricProvisionedWriteCapacityUnits() interface{}
	// Experimental.
	MetricThrottledIndexRequestCount() interface{}
	// Experimental.
	MetricThrottledReadRequestCount() interface{}
	// Experimental.
	MetricThrottledWriteRequestCount() interface{}
}

// The jsii proxy struct for DynamoTableGlobalSecondaryIndexMetricFactory
type jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewDynamoTableGlobalSecondaryIndexMetricFactory(metricFactory MetricFactory, props *DynamoTableGlobalSecondaryIndexMetricFactoryProps) DynamoTableGlobalSecondaryIndexMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDynamoTableGlobalSecondaryIndexMetricFactory_Override(d DynamoTableGlobalSecondaryIndexMetricFactory, metricFactory MetricFactory, props *DynamoTableGlobalSecondaryIndexMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMetricFactory",
		[]interface{}{metricFactory, props},
		d,
	)
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricConsumedReadCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricConsumedReadCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricConsumedWriteCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricConsumedWriteCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricIndexConsumedWriteUnitsMetric() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricIndexConsumedWriteUnitsMetric",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricProvisionedReadCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricProvisionedReadCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricProvisionedWriteCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricProvisionedWriteCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricThrottledIndexRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricThrottledIndexRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricThrottledReadRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricThrottledReadRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMetricFactory) MetricThrottledWriteRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricThrottledWriteRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DynamoTableGlobalSecondaryIndexMetricFactoryProps struct {
	// Experimental.
	GlobalSecondaryIndexName *string `field:"required" json:"globalSecondaryIndexName" yaml:"globalSecondaryIndexName"`
	// Experimental.
	Table awsdynamodb.ITable `field:"required" json:"table" yaml:"table"`
}

// Experimental.
type DynamoTableGlobalSecondaryIndexMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConsumedReadUnitsMetric() interface{}
	// Experimental.
	ConsumedWriteUnitsMetric() interface{}
	// Experimental.
	IndexConsumedWriteUnitsMetric() interface{}
	// Experimental.
	IndexThrottleCountMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	ProvisionedReadUnitsMetric() interface{}
	// Experimental.
	ProvisionedWriteUnitsMetric() interface{}
	// Experimental.
	ReadThrottleCountMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TableUrl() *string
	// Experimental.
	Title() *string
	// Experimental.
	WriteThrottleCountMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateReadCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateThrottlesWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	CreateWriteCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for DynamoTableGlobalSecondaryIndexMonitoring
type jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) ConsumedReadUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumedReadUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) ConsumedWriteUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumedWriteUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) IndexConsumedWriteUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"indexConsumedWriteUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) IndexThrottleCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"indexThrottleCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) ProvisionedReadUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedReadUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) ProvisionedWriteUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedWriteUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) ReadThrottleCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readThrottleCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) TableUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"tableUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) WriteThrottleCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeThrottleCountMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewDynamoTableGlobalSecondaryIndexMonitoring(scope MonitoringScope, props *DynamoTableGlobalSecondaryIndexMonitoringProps) DynamoTableGlobalSecondaryIndexMonitoring {
	_init_.Initialize()

	j := jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDynamoTableGlobalSecondaryIndexMonitoring_Override(d DynamoTableGlobalSecondaryIndexMonitoring, scope MonitoringScope, props *DynamoTableGlobalSecondaryIndexMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMonitoring",
		[]interface{}{scope, props},
		d,
	)
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		d,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		d,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		d,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		d,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateReadCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createReadCapacityWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateThrottlesWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createThrottlesWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		d,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		d,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) CreateWriteCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createWriteCapacityWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableGlobalSecondaryIndexMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DynamoTableGlobalSecondaryIndexMonitoringProps struct {
	// Experimental.
	GlobalSecondaryIndexName *string `field:"required" json:"globalSecondaryIndexName" yaml:"globalSecondaryIndexName"`
	// Experimental.
	Table awsdynamodb.ITable `field:"required" json:"table" yaml:"table"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type DynamoTableMetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Table() awsdynamodb.ITable
	// Experimental.
	MetricAverageSuccessfulRequestLatencyInMillis(operation awsdynamodb.Operation) interface{}
	// Experimental.
	MetricConsumedReadCapacityUnits() interface{}
	// Experimental.
	MetricConsumedWriteCapacityUnits() interface{}
	// Experimental.
	MetricProvisionedReadCapacityUnits() interface{}
	// Experimental.
	MetricProvisionedWriteCapacityUnits() interface{}
	// Experimental.
	MetricReadCapacityUtilizationPercentage() interface{}
	// Experimental.
	MetricSearchAverageSuccessfulRequestLatencyInMillis() awscloudwatch.IMetric
	// This represents the number of requests that resulted in a 500 (server error) error code.
	//
	// It summarizes across the basic CRUD operations:
	// GetItem, BatchGetItem, Scan, Query, GetRecords, PutItem, DeleteItem, UpdateItem, BatchWriteItem
	//
	// It’s usually equal to zero.
	// Experimental.
	MetricSystemErrorsCount() interface{}
	// Experimental.
	MetricThrottledReadRequestCount() interface{}
	// Experimental.
	MetricThrottledWriteRequestCount() interface{}
	// Experimental.
	MetricWriteCapacityUtilizationPercentage() interface{}
}

// The jsii proxy struct for DynamoTableMetricFactory
type jsiiProxy_DynamoTableMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_DynamoTableMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMetricFactory) Table() awsdynamodb.ITable {
	var returns awsdynamodb.ITable
	_jsii_.Get(
		j,
		"table",
		&returns,
	)
	return returns
}


// Experimental.
func NewDynamoTableMetricFactory(metricFactory MetricFactory, props *DynamoTableMetricFactoryProps) DynamoTableMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_DynamoTableMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDynamoTableMetricFactory_Override(d DynamoTableMetricFactory, metricFactory MetricFactory, props *DynamoTableMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableMetricFactory",
		[]interface{}{metricFactory, props},
		d,
	)
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricAverageSuccessfulRequestLatencyInMillis(operation awsdynamodb.Operation) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricAverageSuccessfulRequestLatencyInMillis",
		[]interface{}{operation},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricConsumedReadCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricConsumedReadCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricConsumedWriteCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricConsumedWriteCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricProvisionedReadCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricProvisionedReadCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricProvisionedWriteCapacityUnits() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricProvisionedWriteCapacityUnits",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricReadCapacityUtilizationPercentage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricReadCapacityUtilizationPercentage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricSearchAverageSuccessfulRequestLatencyInMillis() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric

	_jsii_.Invoke(
		d,
		"metricSearchAverageSuccessfulRequestLatencyInMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricSystemErrorsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricSystemErrorsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricThrottledReadRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricThrottledReadRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricThrottledWriteRequestCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricThrottledWriteRequestCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMetricFactory) MetricWriteCapacityUtilizationPercentage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		d,
		"metricWriteCapacityUtilizationPercentage",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DynamoTableMetricFactoryProps struct {
	// table to monitor.
	// Experimental.
	Table awsdynamodb.ITable `field:"required" json:"table" yaml:"table"`
	// table billing mode.
	// Experimental.
	BillingMode awsdynamodb.BillingMode `field:"optional" json:"billingMode" yaml:"billingMode"`
}

// Experimental.
type DynamoTableMonitoring interface {
	Monitoring
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	AveragePerOperationLatencyMetrics() *map[string]interface{}
	// Experimental.
	ConsumedReadUnitsMetric() interface{}
	// Experimental.
	ConsumedWriteUnitsMetric() interface{}
	// Experimental.
	DynamoCapacityAlarmFactory() DynamoAlarmFactory
	// Experimental.
	DynamoReadCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DynamoWriteCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LatencyAverageSearchMetrics() awscloudwatch.IMetric
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	ProvisionedReadUnitsMetric() interface{}
	// Experimental.
	ProvisionedWriteUnitsMetric() interface{}
	// Experimental.
	ReadCapacityUsageMetric() interface{}
	// Experimental.
	ReadThrottleCountMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	SystemErrorMetric() interface{}
	// Experimental.
	TableBillingMode() awsdynamodb.BillingMode
	// Experimental.
	TableUrl() *string
	// Experimental.
	ThrottledEventsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Title() *string
	// Experimental.
	WriteCapacityUsageMetric() interface{}
	// Experimental.
	WriteThrottleCountMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateReadCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateThrottlesWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	CreateWriteCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	ForEachOperationLatencyAlarmDefinition(operation awsdynamodb.Operation, alarm *map[string]*LatencyThreshold)
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for DynamoTableMonitoring
type jsiiProxy_DynamoTableMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_DynamoTableMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) AveragePerOperationLatencyMetrics() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"averagePerOperationLatencyMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ConsumedReadUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumedReadUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ConsumedWriteUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumedWriteUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) DynamoCapacityAlarmFactory() DynamoAlarmFactory {
	var returns DynamoAlarmFactory
	_jsii_.Get(
		j,
		"dynamoCapacityAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) DynamoReadCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"dynamoReadCapacityAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) DynamoWriteCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"dynamoWriteCapacityAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) LatencyAverageSearchMetrics() awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"latencyAverageSearchMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ProvisionedReadUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedReadUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ProvisionedWriteUnitsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedWriteUnitsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ReadCapacityUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readCapacityUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ReadThrottleCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readThrottleCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) SystemErrorMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"systemErrorMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) TableBillingMode() awsdynamodb.BillingMode {
	var returns awsdynamodb.BillingMode
	_jsii_.Get(
		j,
		"tableBillingMode",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) TableUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"tableUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) ThrottledEventsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"throttledEventsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) WriteCapacityUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeCapacityUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_DynamoTableMonitoring) WriteThrottleCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeThrottleCountMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewDynamoTableMonitoring(scope MonitoringScope, props *DynamoTableMonitoringProps) DynamoTableMonitoring {
	_init_.Initialize()

	j := jsiiProxy_DynamoTableMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewDynamoTableMonitoring_Override(d DynamoTableMonitoring, scope MonitoringScope, props *DynamoTableMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.DynamoTableMonitoring",
		[]interface{}{scope, props},
		d,
	)
}

func (d *jsiiProxy_DynamoTableMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		d,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (d *jsiiProxy_DynamoTableMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		d,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		d,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateErrorsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createErrorsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		d,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateReadCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createReadCapacityWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateThrottlesWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createThrottlesWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		d,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		d,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) CreateWriteCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		d,
		"createWriteCapacityWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) ForEachOperationLatencyAlarmDefinition(operation awsdynamodb.Operation, alarm *map[string]*LatencyThreshold) {
	_jsii_.InvokeVoid(
		d,
		"forEachOperationLatencyAlarmDefinition",
		[]interface{}{operation, alarm},
	)
}

func (d *jsiiProxy_DynamoTableMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (d *jsiiProxy_DynamoTableMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		d,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type DynamoTableMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddAverageSuccessfulBatchGetItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulBatchGetItemLatencyAlarm" yaml:"addAverageSuccessfulBatchGetItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulBatchWriteItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulBatchWriteItemLatencyAlarm" yaml:"addAverageSuccessfulBatchWriteItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulDeleteItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulDeleteItemLatencyAlarm" yaml:"addAverageSuccessfulDeleteItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulGetItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulGetItemLatencyAlarm" yaml:"addAverageSuccessfulGetItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulGetRecordsLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulGetRecordsLatencyAlarm" yaml:"addAverageSuccessfulGetRecordsLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulPutItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulPutItemLatencyAlarm" yaml:"addAverageSuccessfulPutItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulQueryLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulQueryLatencyAlarm" yaml:"addAverageSuccessfulQueryLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulScanLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulScanLatencyAlarm" yaml:"addAverageSuccessfulScanLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulUpdateItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulUpdateItemLatencyAlarm" yaml:"addAverageSuccessfulUpdateItemLatencyAlarm"`
	// Experimental.
	AddConsumedReadCapacityAlarm *map[string]*ConsumedCapacityThreshold `field:"optional" json:"addConsumedReadCapacityAlarm" yaml:"addConsumedReadCapacityAlarm"`
	// Experimental.
	AddConsumedWriteCapacityAlarm *map[string]*ConsumedCapacityThreshold `field:"optional" json:"addConsumedWriteCapacityAlarm" yaml:"addConsumedWriteCapacityAlarm"`
	// Experimental.
	AddReadThrottledEventsCountAlarm *map[string]*ThrottledEventsThreshold `field:"optional" json:"addReadThrottledEventsCountAlarm" yaml:"addReadThrottledEventsCountAlarm"`
	// Experimental.
	AddSystemErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addSystemErrorCountAlarm" yaml:"addSystemErrorCountAlarm"`
	// Experimental.
	AddWriteThrottledEventsCountAlarm *map[string]*ThrottledEventsThreshold `field:"optional" json:"addWriteThrottledEventsCountAlarm" yaml:"addWriteThrottledEventsCountAlarm"`
}

// Experimental.
type DynamoTableMonitoringProps struct {
	// table to monitor.
	// Experimental.
	Table awsdynamodb.ITable `field:"required" json:"table" yaml:"table"`
	// table billing mode.
	// Experimental.
	BillingMode awsdynamodb.BillingMode `field:"optional" json:"billingMode" yaml:"billingMode"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddAverageSuccessfulBatchGetItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulBatchGetItemLatencyAlarm" yaml:"addAverageSuccessfulBatchGetItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulBatchWriteItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulBatchWriteItemLatencyAlarm" yaml:"addAverageSuccessfulBatchWriteItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulDeleteItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulDeleteItemLatencyAlarm" yaml:"addAverageSuccessfulDeleteItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulGetItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulGetItemLatencyAlarm" yaml:"addAverageSuccessfulGetItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulGetRecordsLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulGetRecordsLatencyAlarm" yaml:"addAverageSuccessfulGetRecordsLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulPutItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulPutItemLatencyAlarm" yaml:"addAverageSuccessfulPutItemLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulQueryLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulQueryLatencyAlarm" yaml:"addAverageSuccessfulQueryLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulScanLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulScanLatencyAlarm" yaml:"addAverageSuccessfulScanLatencyAlarm"`
	// Experimental.
	AddAverageSuccessfulUpdateItemLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageSuccessfulUpdateItemLatencyAlarm" yaml:"addAverageSuccessfulUpdateItemLatencyAlarm"`
	// Experimental.
	AddConsumedReadCapacityAlarm *map[string]*ConsumedCapacityThreshold `field:"optional" json:"addConsumedReadCapacityAlarm" yaml:"addConsumedReadCapacityAlarm"`
	// Experimental.
	AddConsumedWriteCapacityAlarm *map[string]*ConsumedCapacityThreshold `field:"optional" json:"addConsumedWriteCapacityAlarm" yaml:"addConsumedWriteCapacityAlarm"`
	// Experimental.
	AddReadThrottledEventsCountAlarm *map[string]*ThrottledEventsThreshold `field:"optional" json:"addReadThrottledEventsCountAlarm" yaml:"addReadThrottledEventsCountAlarm"`
	// Experimental.
	AddSystemErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addSystemErrorCountAlarm" yaml:"addSystemErrorCountAlarm"`
	// Experimental.
	AddWriteThrottledEventsCountAlarm *map[string]*ThrottledEventsThreshold `field:"optional" json:"addWriteThrottledEventsCountAlarm" yaml:"addWriteThrottledEventsCountAlarm"`
}

// Experimental.
type EC2MetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Strategy() IEC2MetricFactoryStrategy
	// The percentage of allocated EC2 compute units that are currently in use on the instance.
	//
	// This metric identifies the processing power required to run an application on a selected instance.
	// Depending on the instance type, tools in your operating system can show a lower percentage than
	// CloudWatch when the instance is not allocated a full processor core.
	// Experimental.
	MetricAverageCpuUtilisationPercent() *[]awscloudwatch.IMetric
	// Bytes read from all instance store volumes available to the instance.
	//
	// This metric is used to determine the volume of the data the application reads from the hard disk of the instance.
	// This can be used to determine the speed of the application.
	// Experimental.
	MetricAverageDiskReadBytes() *[]awscloudwatch.IMetric
	// Completed read operations from all instance store volumes available to the instance in a specified period of time.
	// Experimental.
	MetricAverageDiskReadOps() *[]awscloudwatch.IMetric
	// Bytes written to all instance store volumes available to the instance.
	//
	// This metric is used to determine the volume of the data the application writes onto the hard disk of the instance.
	// This can be used to determine the speed of the application.
	// Experimental.
	MetricAverageDiskWriteBytes() *[]awscloudwatch.IMetric
	// Completed write operations to all instance store volumes available to the instance in a specified period of time.
	// Experimental.
	MetricAverageDiskWriteOps() *[]awscloudwatch.IMetric
	// The number of bytes received on all network interfaces by the instance.
	//
	// This metric identifies the volume of incoming network traffic to a single instance.
	// Experimental.
	MetricAverageNetworkInRateBytes() *[]awscloudwatch.IMetric
	// The number of bytes sent out on all network interfaces by the instance.
	//
	// This metric identifies the volume of outgoing network traffic from a single instance.
	// Experimental.
	MetricAverageNetworkOutRateBytes() *[]awscloudwatch.IMetric
}

// The jsii proxy struct for EC2MetricFactory
type jsiiProxy_EC2MetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_EC2MetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2MetricFactory) Strategy() IEC2MetricFactoryStrategy {
	var returns IEC2MetricFactoryStrategy
	_jsii_.Get(
		j,
		"strategy",
		&returns,
	)
	return returns
}


// Experimental.
func NewEC2MetricFactory(metricFactory MetricFactory, props *EC2MetricFactoryProps) EC2MetricFactory {
	_init_.Initialize()

	j := jsiiProxy_EC2MetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.EC2MetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewEC2MetricFactory_Override(e EC2MetricFactory, metricFactory MetricFactory, props *EC2MetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.EC2MetricFactory",
		[]interface{}{metricFactory, props},
		e,
	)
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageCpuUtilisationPercent() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageCpuUtilisationPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageDiskReadBytes() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageDiskReadBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageDiskReadOps() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageDiskReadOps",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageDiskWriteBytes() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageDiskWriteBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageDiskWriteOps() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageDiskWriteOps",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageNetworkInRateBytes() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageNetworkInRateBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2MetricFactory) MetricAverageNetworkOutRateBytes() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		e,
		"metricAverageNetworkOutRateBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type EC2MetricFactoryProps struct {
	// Auto-Scaling Group to monitor.
	// Experimental.
	AutoScalingGroup awsautoscaling.IAutoScalingGroup `field:"optional" json:"autoScalingGroup" yaml:"autoScalingGroup"`
	// Selected IDs of EC2 instances to monitor.
	// Experimental.
	InstanceIds *[]*string `field:"optional" json:"instanceIds" yaml:"instanceIds"`
}

// Experimental.
type EC2Monitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	CpuUtilisationMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	DiskReadBytesMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	DiskReadOpsMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	DiskWriteBytesMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	DiskWriteOpsMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	Family() *string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	NetworkInMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	NetworkOutMetrics() *[]awscloudwatch.IMetric
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDiskOpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateDiskWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateNetworkWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for EC2Monitoring
type jsiiProxy_EC2Monitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_EC2Monitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) CpuUtilisationMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"cpuUtilisationMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) DiskReadBytesMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"diskReadBytesMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) DiskReadOpsMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"diskReadOpsMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) DiskWriteBytesMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"diskWriteBytesMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) DiskWriteOpsMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"diskWriteOpsMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) Family() *string {
	var returns *string
	_jsii_.Get(
		j,
		"family",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) NetworkInMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"networkInMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) NetworkOutMetrics() *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric
	_jsii_.Get(
		j,
		"networkOutMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_EC2Monitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewEC2Monitoring(scope MonitoringScope, props *EC2MonitoringProps) EC2Monitoring {
	_init_.Initialize()

	j := jsiiProxy_EC2Monitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.EC2Monitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewEC2Monitoring_Override(e EC2Monitoring, scope MonitoringScope, props *EC2MonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.EC2Monitoring",
		[]interface{}{scope, props},
		e,
	)
}

func (e *jsiiProxy_EC2Monitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		e,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (e *jsiiProxy_EC2Monitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		e,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createCpuWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateDiskOpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createDiskOpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateDiskWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createDiskWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		e,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateNetworkWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createNetworkWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		e,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		e,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_EC2Monitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type EC2MonitoringOptions struct {
	// Auto-Scaling Group to monitor.
	// Experimental.
	AutoScalingGroup awsautoscaling.IAutoScalingGroup `field:"optional" json:"autoScalingGroup" yaml:"autoScalingGroup"`
	// Selected IDs of EC2 instances to monitor.
	// Experimental.
	InstanceIds *[]*string `field:"optional" json:"instanceIds" yaml:"instanceIds"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type EC2MonitoringProps struct {
	// Auto-Scaling Group to monitor.
	// Experimental.
	AutoScalingGroup awsautoscaling.IAutoScalingGroup `field:"optional" json:"autoScalingGroup" yaml:"autoScalingGroup"`
	// Selected IDs of EC2 instances to monitor.
	// Experimental.
	InstanceIds *[]*string `field:"optional" json:"instanceIds" yaml:"instanceIds"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Monitoring props for EC2 service with application load balancer and plain service.
// Experimental.
type Ec2ApplicationLoadBalancerMonitoringProps struct {
	// Experimental.
	ApplicationLoadBalancer awselasticloadbalancingv2.ApplicationLoadBalancer `field:"required" json:"applicationLoadBalancer" yaml:"applicationLoadBalancer"`
	// Experimental.
	ApplicationTargetGroup awselasticloadbalancingv2.ApplicationTargetGroup `field:"required" json:"applicationTargetGroup" yaml:"applicationTargetGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	Ec2Service awsecs.Ec2Service `field:"required" json:"ec2Service" yaml:"ec2Service"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Monitoring props for EC2 service with network load balancer and plain service.
// Experimental.
type Ec2NetworkLoadBalancerMonitoringProps struct {
	// Experimental.
	NetworkLoadBalancer awselasticloadbalancingv2.NetworkLoadBalancer `field:"required" json:"networkLoadBalancer" yaml:"networkLoadBalancer"`
	// Experimental.
	NetworkTargetGroup awselasticloadbalancingv2.NetworkTargetGroup `field:"required" json:"networkTargetGroup" yaml:"networkTargetGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	Ec2Service awsecs.Ec2Service `field:"required" json:"ec2Service" yaml:"ec2Service"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Experimental.
type Ec2ServiceMonitoring interface {
	Monitoring
	// Experimental.
	ActiveTcpFlowCountMetric() interface{}
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	BaseServiceMetricFactory() BaseServiceMetricFactory
	// Experimental.
	CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	CpuUtilisationMetric() interface{}
	// Experimental.
	HealthyTaskCountMetric() interface{}
	// Experimental.
	HealthyTaskPercentMetric() interface{}
	// Experimental.
	LoadBalancerMetricFactory() ILoadBalancerMetricFactory
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	MemoryUtilisationMetric() interface{}
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	NewTcpFlowCountMetric() interface{}
	// Experimental.
	ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ProcessedBytesMetric() interface{}
	// Experimental.
	RunningTaskCountMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TaskHealthAlarmFactory() TaskHealthAlarmFactory
	// Experimental.
	TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ThroughputAlarmFactory() ThroughputAlarmFactory
	// Experimental.
	Title() *string
	// Experimental.
	UnhealthyTaskCountMetric() interface{}
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpcFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for Ec2ServiceMonitoring
type jsiiProxy_Ec2ServiceMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_Ec2ServiceMonitoring) ActiveTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"activeTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) BaseServiceMetricFactory() BaseServiceMetricFactory {
	var returns BaseServiceMetricFactory
	_jsii_.Get(
		j,
		"baseServiceMetricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"cpuUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) CpuUtilisationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUtilisationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) HealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) HealthyTaskPercentMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskPercentMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) LoadBalancerMetricFactory() ILoadBalancerMetricFactory {
	var returns ILoadBalancerMetricFactory
	_jsii_.Get(
		j,
		"loadBalancerMetricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"memoryUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) MemoryUtilisationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"memoryUtilisationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) NewTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"newTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"processedBytesAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) ProcessedBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"processedBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) RunningTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"runningTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) TaskHealthAlarmFactory() TaskHealthAlarmFactory {
	var returns TaskHealthAlarmFactory
	_jsii_.Get(
		j,
		"taskHealthAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"taskHealthAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) ThroughputAlarmFactory() ThroughputAlarmFactory {
	var returns ThroughputAlarmFactory
	_jsii_.Get(
		j,
		"throughputAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) UnhealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unhealthyTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Ec2ServiceMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewEc2ServiceMonitoring(scope MonitoringScope, props *CustomEc2ServiceMonitoringProps) Ec2ServiceMonitoring {
	_init_.Initialize()

	j := jsiiProxy_Ec2ServiceMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.Ec2ServiceMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewEc2ServiceMonitoring_Override(e Ec2ServiceMonitoring, scope MonitoringScope, props *CustomEc2ServiceMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.Ec2ServiceMonitoring",
		[]interface{}{scope, props},
		e,
	)
}

func (e *jsiiProxy_Ec2ServiceMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		e,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (e *jsiiProxy_Ec2ServiceMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		e,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createCpuWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createMemoryWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		e,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createTaskHealthWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		e,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateTpcFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createTpcFlowsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		e,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_Ec2ServiceMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Monitoring props for load-balanced EC2 service.
// Experimental.
type Ec2ServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	Ec2Service interface{} `field:"required" json:"ec2Service" yaml:"ec2Service"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Experimental.
type ElastiCacheAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMaxEvictedItemsCountAlarm(metric interface{}, props *MaxItemsCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxItemsCountAlarm(metric interface{}, props *MaxItemsCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxUsedSwapMemoryAlarm(metric interface{}, props *MaxUsedSwapMemoryThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinFreeableMemoryAlarm(metric interface{}, props *MinFreeableMemoryThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for ElastiCacheAlarmFactory
type jsiiProxy_ElastiCacheAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ElastiCacheAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewElastiCacheAlarmFactory(alarmFactory AlarmFactory) ElastiCacheAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_ElastiCacheAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewElastiCacheAlarmFactory_Override(e ElastiCacheAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheAlarmFactory",
		[]interface{}{alarmFactory},
		e,
	)
}

func (e *jsiiProxy_ElastiCacheAlarmFactory) AddMaxEvictedItemsCountAlarm(metric interface{}, props *MaxItemsCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addMaxEvictedItemsCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheAlarmFactory) AddMaxItemsCountAlarm(metric interface{}, props *MaxItemsCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addMaxItemsCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheAlarmFactory) AddMaxUsedSwapMemoryAlarm(metric interface{}, props *MaxUsedSwapMemoryThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addMaxUsedSwapMemoryAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheAlarmFactory) AddMinFreeableMemoryAlarm(metric interface{}, props *MinFreeableMemoryThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addMinFreeableMemoryAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// See: https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheMetrics.html
//
// Experimental.
type ElastiCacheClusterMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricAverageCachedItemsSizeInBytes() interface{}
	// Experimental.
	MetricAverageConnections() interface{}
	// Experimental.
	MetricAverageFreeableMemoryInBytes() interface{}
	// Experimental.
	MetricAverageSwapUsageInBytes() interface{}
	// Experimental.
	MetricAverageUnusedMemoryInBytes() interface{}
	// Experimental.
	MetricEvictions() interface{}
	// Experimental.
	MetricMaxCpuUtilizationInPercent() interface{}
	// Experimental.
	MetricMaxItemCount() interface{}
	// Experimental.
	MetricNetworkBytesIn() interface{}
	// Experimental.
	MetricNetworkBytesOut() interface{}
}

// The jsii proxy struct for ElastiCacheClusterMetricFactory
type jsiiProxy_ElastiCacheClusterMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ElastiCacheClusterMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewElastiCacheClusterMetricFactory(metricFactory MetricFactory, props *ElastiCacheClusterMetricFactoryProps) ElastiCacheClusterMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_ElastiCacheClusterMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheClusterMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewElastiCacheClusterMetricFactory_Override(e ElastiCacheClusterMetricFactory, metricFactory MetricFactory, props *ElastiCacheClusterMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheClusterMetricFactory",
		[]interface{}{metricFactory, props},
		e,
	)
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricAverageCachedItemsSizeInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricAverageCachedItemsSizeInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricAverageConnections() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricAverageConnections",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricAverageFreeableMemoryInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricAverageFreeableMemoryInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricAverageSwapUsageInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricAverageSwapUsageInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricAverageUnusedMemoryInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricAverageUnusedMemoryInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricEvictions() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricEvictions",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricMaxCpuUtilizationInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricMaxCpuUtilizationInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricMaxItemCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricMaxItemCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricNetworkBytesIn() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricNetworkBytesIn",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMetricFactory) MetricNetworkBytesOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		e,
		"metricNetworkBytesOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ElastiCacheClusterMetricFactoryProps struct {
	// Cluster to monitor.
	// Experimental.
	ClusterId *string `field:"optional" json:"clusterId" yaml:"clusterId"`
}

// Experimental.
type ElastiCacheClusterMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ClusterUrl() *string
	// Experimental.
	ConnectionsMetric() interface{}
	// Experimental.
	CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	ElastiCacheAlarmFactory() ElastiCacheAlarmFactory
	// Experimental.
	EvictedItemsCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FreeableMemoryMetric() interface{}
	// Experimental.
	ItemsCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ItemsCountMetrics() interface{}
	// Experimental.
	ItemsEvictedMetrics() interface{}
	// Experimental.
	ItemsMemoryMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	SwapMemoryMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	UnusedMemoryMetric() interface{}
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateCpuUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateItemCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMemoryUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for ElastiCacheClusterMonitoring
type jsiiProxy_ElastiCacheClusterMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ClusterUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"clusterUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ConnectionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"connectionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"cpuUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ElastiCacheAlarmFactory() ElastiCacheAlarmFactory {
	var returns ElastiCacheAlarmFactory
	_jsii_.Get(
		j,
		"elastiCacheAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) EvictedItemsCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"evictedItemsCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) FreeableMemoryMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"freeableMemoryMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ItemsCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"itemsCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ItemsCountMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"itemsCountMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ItemsEvictedMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"itemsEvictedMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) ItemsMemoryMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"itemsMemoryMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"memoryUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) SwapMemoryMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"swapMemoryMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) UnusedMemoryMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unusedMemoryMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ElastiCacheClusterMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewElastiCacheClusterMonitoring(scope MonitoringScope, props *ElastiCacheClusterMonitoringProps) ElastiCacheClusterMonitoring {
	_init_.Initialize()

	j := jsiiProxy_ElastiCacheClusterMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheClusterMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewElastiCacheClusterMonitoring_Override(e ElastiCacheClusterMonitoring, scope MonitoringScope, props *ElastiCacheClusterMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ElastiCacheClusterMonitoring",
		[]interface{}{scope, props},
		e,
	)
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		e,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		e,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createConnectionsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateCpuUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createCpuUsageWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateItemCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createItemCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateMemoryUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		e,
		"createMemoryUsageWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		e,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		e,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		e,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ElastiCacheClusterMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		e,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type ElastiCacheClusterMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Cluster type (needed, since each type has their own specific metrics).
	// Experimental.
	ClusterType ElastiCacheClusterType `field:"required" json:"clusterType" yaml:"clusterType"`
	// Add CPU usage alarm.
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Add alarm on number of evicted items.
	// Experimental.
	AddMaxEvictedItemsCountAlarm *map[string]*MaxItemsCountThreshold `field:"optional" json:"addMaxEvictedItemsCountAlarm" yaml:"addMaxEvictedItemsCountAlarm"`
	// Add alarm on total number of items.
	// Experimental.
	AddMaxItemsCountAlarm *map[string]*MaxItemsCountThreshold `field:"optional" json:"addMaxItemsCountAlarm" yaml:"addMaxItemsCountAlarm"`
	// Add alarm on amount of used swap memory.
	// Experimental.
	AddMaxUsedSwapMemoryAlarm *map[string]*MaxUsedSwapMemoryThreshold `field:"optional" json:"addMaxUsedSwapMemoryAlarm" yaml:"addMaxUsedSwapMemoryAlarm"`
	// Add alarm on amount of freeable memory.
	// Experimental.
	AddMinFreeableMemoryAlarm *map[string]*MinFreeableMemoryThreshold `field:"optional" json:"addMinFreeableMemoryAlarm" yaml:"addMinFreeableMemoryAlarm"`
}

// Experimental.
type ElastiCacheClusterMonitoringProps struct {
	// Cluster to monitor.
	// Experimental.
	ClusterId *string `field:"optional" json:"clusterId" yaml:"clusterId"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Cluster type (needed, since each type has their own specific metrics).
	// Experimental.
	ClusterType ElastiCacheClusterType `field:"required" json:"clusterType" yaml:"clusterType"`
	// Add CPU usage alarm.
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Add alarm on number of evicted items.
	// Experimental.
	AddMaxEvictedItemsCountAlarm *map[string]*MaxItemsCountThreshold `field:"optional" json:"addMaxEvictedItemsCountAlarm" yaml:"addMaxEvictedItemsCountAlarm"`
	// Add alarm on total number of items.
	// Experimental.
	AddMaxItemsCountAlarm *map[string]*MaxItemsCountThreshold `field:"optional" json:"addMaxItemsCountAlarm" yaml:"addMaxItemsCountAlarm"`
	// Add alarm on amount of used swap memory.
	// Experimental.
	AddMaxUsedSwapMemoryAlarm *map[string]*MaxUsedSwapMemoryThreshold `field:"optional" json:"addMaxUsedSwapMemoryAlarm" yaml:"addMaxUsedSwapMemoryAlarm"`
	// Add alarm on amount of freeable memory.
	// Experimental.
	AddMinFreeableMemoryAlarm *map[string]*MinFreeableMemoryThreshold `field:"optional" json:"addMinFreeableMemoryAlarm" yaml:"addMinFreeableMemoryAlarm"`
}

// Experimental.
type ElastiCacheClusterType string

const (
	// Experimental.
	ElastiCacheClusterType_MEMCACHED ElastiCacheClusterType = "MEMCACHED"
	// Experimental.
	ElastiCacheClusterType_REDIS ElastiCacheClusterType = "REDIS"
)

// Experimental.
type ElasticsearchClusterStatus string

const (
	// Experimental.
	ElasticsearchClusterStatus_RED ElasticsearchClusterStatus = "RED"
	// Experimental.
	ElasticsearchClusterStatus_YELLOW ElasticsearchClusterStatus = "YELLOW"
)

// Experimental.
type ErrorAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddErrorCountAlarm(metric interface{}, errorType ErrorType, props *ErrorCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddErrorRateAlarm(metric interface{}, errorType ErrorType, props *ErrorRateThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for ErrorAlarmFactory
type jsiiProxy_ErrorAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ErrorAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewErrorAlarmFactory(alarmFactory AlarmFactory) ErrorAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_ErrorAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ErrorAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewErrorAlarmFactory_Override(e ErrorAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ErrorAlarmFactory",
		[]interface{}{alarmFactory},
		e,
	)
}

func (e *jsiiProxy_ErrorAlarmFactory) AddErrorCountAlarm(metric interface{}, errorType ErrorType, props *ErrorCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addErrorCountAlarm",
		[]interface{}{metric, errorType, props, disambiguator},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ErrorAlarmFactory) AddErrorRateAlarm(metric interface{}, errorType ErrorType, props *ErrorRateThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		e,
		"addErrorRateAlarm",
		[]interface{}{metric, errorType, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type ErrorCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxErrorCount *float64 `field:"required" json:"maxErrorCount" yaml:"maxErrorCount"`
}

// Experimental.
type ErrorRateThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxErrorRate *float64 `field:"required" json:"maxErrorRate" yaml:"maxErrorRate"`
}

// Experimental.
type ErrorType string

const (
	// Experimental.
	ErrorType_FAULT ErrorType = "FAULT"
	// Experimental.
	ErrorType_ERROR ErrorType = "ERROR"
	// Experimental.
	ErrorType_SYSTEM_ERROR ErrorType = "SYSTEM_ERROR"
	// Experimental.
	ErrorType_USER_ERROR ErrorType = "USER_ERROR"
	// Experimental.
	ErrorType_FAILURE ErrorType = "FAILURE"
	// Experimental.
	ErrorType_ABORTED ErrorType = "ABORTED"
	// Experimental.
	ErrorType_THROTTLED ErrorType = "THROTTLED"
	// Experimental.
	ErrorType_TIMED_OUT ErrorType = "TIMED_OUT"
	// Experimental.
	ErrorType_READ_ERROR ErrorType = "READ_ERROR"
	// Experimental.
	ErrorType_WRITE_ERROR ErrorType = "WRITE_ERROR"
	// Experimental.
	ErrorType_EXPIRED ErrorType = "EXPIRED"
	// Experimental.
	ErrorType_KILLED ErrorType = "KILLED"
)

// Dedupe string processor that adds prefix and/or suffix to the dedupe string.
// Experimental.
type ExtendDedupeString interface {
	IAlarmDedupeStringProcessor
	// Process the dedupe string which was auto-generated.
	// Experimental.
	ProcessDedupeString(dedupeString *string) *string
	// Process the dedupe string which was specified by the user as an override.
	// Experimental.
	ProcessDedupeStringOverride(dedupeString *string) *string
}

// The jsii proxy struct for ExtendDedupeString
type jsiiProxy_ExtendDedupeString struct {
	jsiiProxy_IAlarmDedupeStringProcessor
}

// Experimental.
func NewExtendDedupeString(prefix *string, suffix *string) ExtendDedupeString {
	_init_.Initialize()

	j := jsiiProxy_ExtendDedupeString{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ExtendDedupeString",
		[]interface{}{prefix, suffix},
		&j,
	)

	return &j
}

// Experimental.
func NewExtendDedupeString_Override(e ExtendDedupeString, prefix *string, suffix *string) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ExtendDedupeString",
		[]interface{}{prefix, suffix},
		e,
	)
}

func (e *jsiiProxy_ExtendDedupeString) ProcessDedupeString(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"processDedupeString",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

func (e *jsiiProxy_ExtendDedupeString) ProcessDedupeStringOverride(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		e,
		"processDedupeStringOverride",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

// Monitoring props for Fargate service with application load balancer and plain service.
// Experimental.
type FargateApplicationLoadBalancerMonitoringProps struct {
	// Experimental.
	ApplicationLoadBalancer awselasticloadbalancingv2.ApplicationLoadBalancer `field:"required" json:"applicationLoadBalancer" yaml:"applicationLoadBalancer"`
	// Experimental.
	ApplicationTargetGroup awselasticloadbalancingv2.ApplicationTargetGroup `field:"required" json:"applicationTargetGroup" yaml:"applicationTargetGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	FargateService awsecs.FargateService `field:"required" json:"fargateService" yaml:"fargateService"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Monitoring props for Fargate service with network load balancer and plain service.
// Experimental.
type FargateNetworkLoadBalancerMonitoringProps struct {
	// Experimental.
	NetworkLoadBalancer awselasticloadbalancingv2.NetworkLoadBalancer `field:"required" json:"networkLoadBalancer" yaml:"networkLoadBalancer"`
	// Experimental.
	NetworkTargetGroup awselasticloadbalancingv2.NetworkTargetGroup `field:"required" json:"networkTargetGroup" yaml:"networkTargetGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	FargateService awsecs.FargateService `field:"required" json:"fargateService" yaml:"fargateService"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Experimental.
type FargateServiceMonitoring interface {
	Monitoring
	// Experimental.
	ActiveTcpFlowCountMetric() interface{}
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	BaseServiceMetricFactory() BaseServiceMetricFactory
	// Experimental.
	CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	CpuUtilisationMetric() interface{}
	// Experimental.
	HealthyTaskCountMetric() interface{}
	// Experimental.
	HealthyTaskPercentMetric() interface{}
	// Experimental.
	LoadBalancerMetricFactory() ILoadBalancerMetricFactory
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	MemoryUtilisationMetric() interface{}
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	NewTcpFlowCountMetric() interface{}
	// Experimental.
	ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ProcessedBytesMetric() interface{}
	// Experimental.
	RunningTaskCountMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TaskHealthAlarmFactory() TaskHealthAlarmFactory
	// Experimental.
	TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ThroughputAlarmFactory() ThroughputAlarmFactory
	// Experimental.
	Title() *string
	// Experimental.
	UnhealthyTaskCountMetric() interface{}
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpcFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for FargateServiceMonitoring
type jsiiProxy_FargateServiceMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_FargateServiceMonitoring) ActiveTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"activeTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) BaseServiceMetricFactory() BaseServiceMetricFactory {
	var returns BaseServiceMetricFactory
	_jsii_.Get(
		j,
		"baseServiceMetricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) CpuUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"cpuUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) CpuUtilisationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUtilisationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) HealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) HealthyTaskPercentMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskPercentMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) LoadBalancerMetricFactory() ILoadBalancerMetricFactory {
	var returns ILoadBalancerMetricFactory
	_jsii_.Get(
		j,
		"loadBalancerMetricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"memoryUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) MemoryUtilisationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"memoryUtilisationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) NewTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"newTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"processedBytesAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) ProcessedBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"processedBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) RunningTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"runningTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) TaskHealthAlarmFactory() TaskHealthAlarmFactory {
	var returns TaskHealthAlarmFactory
	_jsii_.Get(
		j,
		"taskHealthAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"taskHealthAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) ThroughputAlarmFactory() ThroughputAlarmFactory {
	var returns ThroughputAlarmFactory
	_jsii_.Get(
		j,
		"throughputAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) UnhealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unhealthyTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_FargateServiceMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewFargateServiceMonitoring(scope MonitoringScope, props *CustomFargateServiceMonitoringProps) FargateServiceMonitoring {
	_init_.Initialize()

	j := jsiiProxy_FargateServiceMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.FargateServiceMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewFargateServiceMonitoring_Override(f FargateServiceMonitoring, scope MonitoringScope, props *CustomFargateServiceMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.FargateServiceMonitoring",
		[]interface{}{scope, props},
		f,
	)
}

func (f *jsiiProxy_FargateServiceMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		f,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (f *jsiiProxy_FargateServiceMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		f,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		f,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		f,
		"createCpuWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		f,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		f,
		"createMemoryWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		f,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		f,
		"createTaskHealthWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		f,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateTpcFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		f,
		"createTpcFlowsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		f,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		f,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FargateServiceMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		f,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Monitoring props for load-balanced Fargate service.
// Experimental.
type FargateServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	FargateService interface{} `field:"required" json:"fargateService" yaml:"fargateService"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Annotation strategy that fills the annotation provided, using the input and user requirements.
// Experimental.
type FillingAlarmAnnotationStrategy interface {
	IAlarmAnnotationStrategy
	// Creates annotation based on the metric and alarm properties.
	// Experimental.
	CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
	// Experimental.
	CreateAnnotationToFill(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
	// Experimental.
	GetAlarmingRangeShade(props *AlarmAnnotationStrategyProps) awscloudwatch.Shading
}

// The jsii proxy struct for FillingAlarmAnnotationStrategy
type jsiiProxy_FillingAlarmAnnotationStrategy struct {
	jsiiProxy_IAlarmAnnotationStrategy
}

// Experimental.
func NewFillingAlarmAnnotationStrategy_Override(f FillingAlarmAnnotationStrategy) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.FillingAlarmAnnotationStrategy",
		nil, // no parameters
		f,
	)
}

func (f *jsiiProxy_FillingAlarmAnnotationStrategy) CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		f,
		"createAnnotation",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FillingAlarmAnnotationStrategy) CreateAnnotationToFill(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		f,
		"createAnnotationToFill",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (f *jsiiProxy_FillingAlarmAnnotationStrategy) GetAlarmingRangeShade(props *AlarmAnnotationStrategyProps) awscloudwatch.Shading {
	var returns awscloudwatch.Shading

	_jsii_.Invoke(
		f,
		"getAlarmingRangeShade",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Experimental.
type FullRestartCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxFullRestartCount *float64 `field:"required" json:"maxFullRestartCount" yaml:"maxFullRestartCount"`
}

// Experimental.
type GlueJobMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	TypeCountDimensionsMap() *map[string]*string
	// Experimental.
	MetricActiveExecutorsAverage() interface{}
	// Experimental.
	MetricAverageExecutorCpuUsagePercentage() interface{}
	// Experimental.
	MetricAverageExecutorMemoryUsagePercentage() interface{}
	// Experimental.
	MetricCompletedStagesSum() interface{}
	// Experimental.
	MetricCompletedTasksSum() interface{}
	// Experimental.
	MetricFailedTasksRate() interface{}
	// Experimental.
	MetricFailedTasksSum() interface{}
	// Experimental.
	MetricKilledTasksRate() interface{}
	// Experimental.
	MetricKilledTasksSum() interface{}
	// Experimental.
	MetricMaximumNeededExecutors() interface{}
	// Experimental.
	MetricTotalReadBytesFromS3() interface{}
	// Experimental.
	MetricTotalWrittenBytesToS3() interface{}
}

// The jsii proxy struct for GlueJobMetricFactory
type jsiiProxy_GlueJobMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_GlueJobMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMetricFactory) TypeCountDimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"typeCountDimensionsMap",
		&returns,
	)
	return returns
}


// Experimental.
func NewGlueJobMetricFactory(metricFactory MetricFactory, props *GlueJobMetricFactoryProps) GlueJobMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_GlueJobMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.GlueJobMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewGlueJobMetricFactory_Override(g GlueJobMetricFactory, metricFactory MetricFactory, props *GlueJobMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.GlueJobMetricFactory",
		[]interface{}{metricFactory, props},
		g,
	)
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricActiveExecutorsAverage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricActiveExecutorsAverage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricAverageExecutorCpuUsagePercentage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricAverageExecutorCpuUsagePercentage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricAverageExecutorMemoryUsagePercentage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricAverageExecutorMemoryUsagePercentage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricCompletedStagesSum() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricCompletedStagesSum",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricCompletedTasksSum() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricCompletedTasksSum",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricFailedTasksRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricFailedTasksRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricFailedTasksSum() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricFailedTasksSum",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricKilledTasksRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricKilledTasksRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricKilledTasksSum() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricKilledTasksSum",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricMaximumNeededExecutors() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricMaximumNeededExecutors",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricTotalReadBytesFromS3() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricTotalReadBytesFromS3",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMetricFactory) MetricTotalWrittenBytesToS3() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		g,
		"metricTotalWrittenBytesToS3",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type GlueJobMetricFactoryProps struct {
	// Experimental.
	JobName *string `field:"required" json:"jobName" yaml:"jobName"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type GlueJobMonitoring interface {
	Monitoring
	// Experimental.
	ActiveExecutorsMetric() interface{}
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	BytesReadFromS3Metric() interface{}
	// Experimental.
	BytesWrittenToS3Metric() interface{}
	// Experimental.
	CompletedStagesMetric() interface{}
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedTaskCountMetric() interface{}
	// Experimental.
	FailedTaskRateMetric() interface{}
	// Experimental.
	HeapMemoryUsageMetric() interface{}
	// Experimental.
	KilledTaskCountMetric() interface{}
	// Experimental.
	KilledTaskRateMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	NeededExecutorsMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDataMovementWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateJobExecutionWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateUtilizationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for GlueJobMonitoring
type jsiiProxy_GlueJobMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_GlueJobMonitoring) ActiveExecutorsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"activeExecutorsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) BytesReadFromS3Metric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"bytesReadFromS3Metric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) BytesWrittenToS3Metric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"bytesWrittenToS3Metric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) CompletedStagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"completedStagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) FailedTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) FailedTaskRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedTaskRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) HeapMemoryUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"heapMemoryUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) KilledTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"killedTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) KilledTaskRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"killedTaskRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) NeededExecutorsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"neededExecutorsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GlueJobMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewGlueJobMonitoring(scope MonitoringScope, props *GlueJobMonitoringProps) GlueJobMonitoring {
	_init_.Initialize()

	j := jsiiProxy_GlueJobMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.GlueJobMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewGlueJobMonitoring_Override(g GlueJobMonitoring, scope MonitoringScope, props *GlueJobMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.GlueJobMonitoring",
		[]interface{}{scope, props},
		g,
	)
}

func (g *jsiiProxy_GlueJobMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		g,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (g *jsiiProxy_GlueJobMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		g,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		g,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		g,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateDataMovementWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		g,
		"createDataMovementWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		g,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		g,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateJobExecutionWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		g,
		"createJobExecutionWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		g,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		g,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateUtilizationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		g,
		"createUtilizationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		g,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		g,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GlueJobMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		g,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type GlueJobMonitoringOptions struct {
	// Experimental.
	JobName *string `field:"required" json:"jobName" yaml:"jobName"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddFailedTaskCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedTaskCountAlarm" yaml:"addFailedTaskCountAlarm"`
	// Experimental.
	AddFailedTaskRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedTaskRateAlarm" yaml:"addFailedTaskRateAlarm"`
	// Experimental.
	AddKilledTaskCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addKilledTaskCountAlarm" yaml:"addKilledTaskCountAlarm"`
	// Experimental.
	AddKilledTaskRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addKilledTaskRateAlarm" yaml:"addKilledTaskRateAlarm"`
}

// Experimental.
type GlueJobMonitoringProps struct {
	// Experimental.
	JobName *string `field:"required" json:"jobName" yaml:"jobName"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddFailedTaskCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedTaskCountAlarm" yaml:"addFailedTaskCountAlarm"`
	// Experimental.
	AddFailedTaskRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedTaskRateAlarm" yaml:"addFailedTaskRateAlarm"`
	// Experimental.
	AddKilledTaskCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addKilledTaskCountAlarm" yaml:"addKilledTaskCountAlarm"`
	// Experimental.
	AddKilledTaskRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addKilledTaskRateAlarm" yaml:"addKilledTaskRateAlarm"`
}

// Experimental.
type GraphWidgetType string

const (
	// Experimental.
	GraphWidgetType_LINE GraphWidgetType = "LINE"
	// Experimental.
	GraphWidgetType_STACKED_AREA GraphWidgetType = "STACKED_AREA"
	// Experimental.
	GraphWidgetType_PIE GraphWidgetType = "PIE"
	// Experimental.
	GraphWidgetType_BAR GraphWidgetType = "BAR"
	// Experimental.
	GraphWidgetType_SINGLE_VALUE GraphWidgetType = "SINGLE_VALUE"
)

// Experimental.
type HeaderLevel string

const (
	// Experimental.
	HeaderLevel_LARGE HeaderLevel = "LARGE"
	// Experimental.
	HeaderLevel_MEDIUM HeaderLevel = "MEDIUM"
	// Experimental.
	HeaderLevel_SMALL HeaderLevel = "SMALL"
)

// Experimental.
type HeaderWidget interface {
	awscloudwatch.TextWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for HeaderWidget
type jsiiProxy_HeaderWidget struct {
	internal.Type__awscloudwatchTextWidget
}

func (j *jsiiProxy_HeaderWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HeaderWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HeaderWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_HeaderWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewHeaderWidget(text *string, level HeaderLevel) HeaderWidget {
	_init_.Initialize()

	j := jsiiProxy_HeaderWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.HeaderWidget",
		[]interface{}{text, level},
		&j,
	)

	return &j
}

// Experimental.
func NewHeaderWidget_Override(h HeaderWidget, text *string, level HeaderLevel) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.HeaderWidget",
		[]interface{}{text, level},
		h,
	)
}

func (j *jsiiProxy_HeaderWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_HeaderWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (h *jsiiProxy_HeaderWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		h,
		"position",
		[]interface{}{x, y},
	)
}

func (h *jsiiProxy_HeaderWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		h,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type HealthyTaskCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinHealthyTasks *float64 `field:"required" json:"minHealthyTasks" yaml:"minHealthyTasks"`
}

// Experimental.
type HealthyTaskPercentThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinHealthyTaskPercent *float64 `field:"required" json:"minHealthyTaskPercent" yaml:"minHealthyTaskPercent"`
}

// Experimental.
type HighMessagesPublishedThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxMessagesPublishedCount *float64 `field:"required" json:"maxMessagesPublishedCount" yaml:"maxMessagesPublishedCount"`
}

// Experimental.
type HighTpsThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxTps *float64 `field:"required" json:"maxTps" yaml:"maxTps"`
}

// An object that appends actions to alarms.
// Experimental.
type IAlarmActionStrategy interface {
	// Experimental.
	AddAlarmActions(props *AlarmActionStrategyProps)
}

// The jsii proxy for IAlarmActionStrategy
type jsiiProxy_IAlarmActionStrategy struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmActionStrategy) AddAlarmActions(props *AlarmActionStrategyProps) {
	_jsii_.InvokeVoid(
		i,
		"addAlarmActions",
		[]interface{}{props},
	)
}

// Helper class for creating annotations for alarms.
// Experimental.
type IAlarmAnnotationStrategy interface {
	// Creates annotation based on the metric and alarm properties.
	// Experimental.
	CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation
}

// The jsii proxy for IAlarmAnnotationStrategy
type jsiiProxy_IAlarmAnnotationStrategy struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmAnnotationStrategy) CreateAnnotation(props *AlarmAnnotationStrategyProps) *awscloudwatch.HorizontalAnnotation {
	var returns *awscloudwatch.HorizontalAnnotation

	_jsii_.Invoke(
		i,
		"createAnnotation",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Experimental.
type IAlarmConsumer interface {
	// Experimental.
	Consume(alarms *[]*AlarmWithAnnotation)
}

// The jsii proxy for IAlarmConsumer
type jsiiProxy_IAlarmConsumer struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmConsumer) Consume(alarms *[]*AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		i,
		"consume",
		[]interface{}{alarms},
	)
}

// Strategy used to finalize dedupe string.
// Experimental.
type IAlarmDedupeStringProcessor interface {
	// Process the dedupe string which was auto-generated.
	//
	// Returns: final dedupe string.
	// Experimental.
	ProcessDedupeString(dedupeString *string) *string
	// Process the dedupe string which was specified by the user as an override.
	//
	// Returns: final dedupe string.
	// Experimental.
	ProcessDedupeStringOverride(dedupeString *string) *string
}

// The jsii proxy for IAlarmDedupeStringProcessor
type jsiiProxy_IAlarmDedupeStringProcessor struct {
	_ byte // padding
}

func (i *jsiiProxy_IAlarmDedupeStringProcessor) ProcessDedupeString(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"processDedupeString",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IAlarmDedupeStringProcessor) ProcessDedupeStringOverride(dedupeString *string) *string {
	var returns *string

	_jsii_.Invoke(
		i,
		"processDedupeStringOverride",
		[]interface{}{dedupeString},
		&returns,
	)

	return returns
}

// Experimental.
type IDashboardFactory interface {
	// Experimental.
	AddSegment(props IDashboardFactoryProps)
	// Experimental.
	CreatedAlarmDashboard() awscloudwatch.Dashboard
	// Experimental.
	CreatedDashboard() awscloudwatch.Dashboard
	// Experimental.
	CreatedSummaryDashboard() awscloudwatch.Dashboard
}

// The jsii proxy for IDashboardFactory
type jsiiProxy_IDashboardFactory struct {
	_ byte // padding
}

func (i *jsiiProxy_IDashboardFactory) AddSegment(props IDashboardFactoryProps) {
	_jsii_.InvokeVoid(
		i,
		"addSegment",
		[]interface{}{props},
	)
}

func (i *jsiiProxy_IDashboardFactory) CreatedAlarmDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		i,
		"createdAlarmDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IDashboardFactory) CreatedDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		i,
		"createdDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IDashboardFactory) CreatedSummaryDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		i,
		"createdSummaryDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type IDashboardFactoryProps interface {
	// Dashboard placement override props.
	// Experimental.
	OverrideProps() *MonitoringDashboardsOverrideProps
	// Experimental.
	SetOverrideProps(o *MonitoringDashboardsOverrideProps)
	// Segment to be placed on the dashboard.
	// Experimental.
	Segment() IDashboardSegment
	// Experimental.
	SetSegment(s IDashboardSegment)
}

// The jsii proxy for IDashboardFactoryProps
type jsiiProxy_IDashboardFactoryProps struct {
	_ byte // padding
}

func (j *jsiiProxy_IDashboardFactoryProps) OverrideProps() *MonitoringDashboardsOverrideProps {
	var returns *MonitoringDashboardsOverrideProps
	_jsii_.Get(
		j,
		"overrideProps",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IDashboardFactoryProps) SetOverrideProps(val *MonitoringDashboardsOverrideProps) {
	_jsii_.Set(
		j,
		"overrideProps",
		val,
	)
}

func (j *jsiiProxy_IDashboardFactoryProps) Segment() IDashboardSegment {
	var returns IDashboardSegment
	_jsii_.Get(
		j,
		"segment",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_IDashboardFactoryProps) SetSegment(val IDashboardSegment) {
	_jsii_.Set(
		j,
		"segment",
		val,
	)
}

// Experimental.
type IDashboardSegment interface {
	// Returns widgets for all alarms.
	//
	// These should go to the runbook or service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Returns widgets for the summary.
	//
	// These should go to the team OPS dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns all widgets.
	//
	// These should go to the detailed service dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy for IDashboardSegment
type jsiiProxy_IDashboardSegment struct {
	_ byte // padding
}

func (i *jsiiProxy_IDashboardSegment) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		i,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IDashboardSegment) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		i,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_IDashboardSegment) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		i,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type IEC2MetricFactoryStrategy interface {
	// Experimental.
	CreateMetrics(metricFactory MetricFactory, metricName *string, statistic MetricStatistic) *[]awscloudwatch.IMetric
}

// The jsii proxy for IEC2MetricFactoryStrategy
type jsiiProxy_IEC2MetricFactoryStrategy struct {
	_ byte // padding
}

func (i *jsiiProxy_IEC2MetricFactoryStrategy) CreateMetrics(metricFactory MetricFactory, metricName *string, statistic MetricStatistic) *[]awscloudwatch.IMetric {
	var returns *[]awscloudwatch.IMetric

	_jsii_.Invoke(
		i,
		"createMetrics",
		[]interface{}{metricFactory, metricName, statistic},
		&returns,
	)

	return returns
}

// Common interface for load-balancer based service metric factories.
// Experimental.
type ILoadBalancerMetricFactory interface {
	// Experimental.
	MetricActiveConnectionCount() interface{}
	// Experimental.
	MetricHealthyTaskCount() interface{}
	// Experimental.
	MetricHealthyTaskInPercent() interface{}
	// Experimental.
	MetricNewConnectionCount() interface{}
	// Experimental.
	MetricProcessedBytesMin() interface{}
	// Experimental.
	MetricUnhealthyTaskCount() interface{}
}

// The jsii proxy for ILoadBalancerMetricFactory
type jsiiProxy_ILoadBalancerMetricFactory struct {
	_ byte // padding
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricActiveConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricActiveConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricHealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricHealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricHealthyTaskInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricHealthyTaskInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricNewConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricNewConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricProcessedBytesMin() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricProcessedBytesMin",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (i *jsiiProxy_ILoadBalancerMetricFactory) MetricUnhealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		i,
		"metricUnhealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Strategy for creating widgets.
// Experimental.
type IWidgetFactory interface {
	// Create widget representing an alarm detail.
	// Experimental.
	CreateAlarmDetailWidget(alarm *AlarmWithAnnotation) awscloudwatch.IWidget
}

// The jsii proxy for IWidgetFactory
type jsiiProxy_IWidgetFactory struct {
	_ byte // padding
}

func (i *jsiiProxy_IWidgetFactory) CreateAlarmDetailWidget(alarm *AlarmWithAnnotation) awscloudwatch.IWidget {
	var returns awscloudwatch.IWidget

	_jsii_.Invoke(
		i,
		"createAlarmDetailWidget",
		[]interface{}{alarm},
		&returns,
	)

	return returns
}

// Experimental.
type KeyValueTableWidget interface {
	awscloudwatch.TextWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for KeyValueTableWidget
type jsiiProxy_KeyValueTableWidget struct {
	internal.Type__awscloudwatchTextWidget
}

func (j *jsiiProxy_KeyValueTableWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KeyValueTableWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KeyValueTableWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KeyValueTableWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewKeyValueTableWidget(data *[]*map[string]interface{}) KeyValueTableWidget {
	_init_.Initialize()

	j := jsiiProxy_KeyValueTableWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KeyValueTableWidget",
		[]interface{}{data},
		&j,
	)

	return &j
}

// Experimental.
func NewKeyValueTableWidget_Override(k KeyValueTableWidget, data *[]*map[string]interface{}) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KeyValueTableWidget",
		[]interface{}{data},
		k,
	)
}

func (j *jsiiProxy_KeyValueTableWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_KeyValueTableWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (k *jsiiProxy_KeyValueTableWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		k,
		"position",
		[]interface{}{x, y},
	)
}

func (k *jsiiProxy_KeyValueTableWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		k,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddIteratorMaxAgeAlarm(metric interface{}, props *MaxIteratorAgeThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddProvisionedReadThroughputExceededAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddProvisionedWriteThroughputExceededAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddPutRecordsFailedAlarm(metric interface{}, props *RecordsFailedThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddPutRecordsThrottledAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for KinesisAlarmFactory
type jsiiProxy_KinesisAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_KinesisAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisAlarmFactory(alarmFactory AlarmFactory) KinesisAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_KinesisAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisAlarmFactory_Override(k KinesisAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisAlarmFactory",
		[]interface{}{alarmFactory},
		k,
	)
}

func (k *jsiiProxy_KinesisAlarmFactory) AddIteratorMaxAgeAlarm(metric interface{}, props *MaxIteratorAgeThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addIteratorMaxAgeAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisAlarmFactory) AddProvisionedReadThroughputExceededAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addProvisionedReadThroughputExceededAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisAlarmFactory) AddProvisionedWriteThroughputExceededAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addProvisionedWriteThroughputExceededAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisAlarmFactory) AddPutRecordsFailedAlarm(metric interface{}, props *RecordsFailedThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addPutRecordsFailedAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisAlarmFactory) AddPutRecordsThrottledAlarm(metric interface{}, props *RecordsThrottledThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addPutRecordsThrottledAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type KinesisDataAnalyticsAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddDowntimeAlarm(metric interface{}, props *MaxDowntimeThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddFullRestartAlarm(metric interface{}, props *FullRestartCountThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for KinesisDataAnalyticsAlarmFactory
type jsiiProxy_KinesisDataAnalyticsAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_KinesisDataAnalyticsAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisDataAnalyticsAlarmFactory(alarmFactory AlarmFactory) KinesisDataAnalyticsAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_KinesisDataAnalyticsAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisDataAnalyticsAlarmFactory_Override(k KinesisDataAnalyticsAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsAlarmFactory",
		[]interface{}{alarmFactory},
		k,
	)
}

func (k *jsiiProxy_KinesisDataAnalyticsAlarmFactory) AddDowntimeAlarm(metric interface{}, props *MaxDowntimeThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addDowntimeAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsAlarmFactory) AddFullRestartAlarm(metric interface{}, props *FullRestartCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"addFullRestartAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// See: https://docs.aws.amazon.com/kinesisanalytics/latest/java/metrics-dimensions.html
//
// Experimental.
type KinesisDataAnalyticsMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricCpuUtilizationPercent() interface{}
	// Experimental.
	MetricDowntimeMs() interface{}
	// Experimental.
	MetricFullRestartsCount() interface{}
	// Experimental.
	MetricHeapMemoryUtilizationPercent() interface{}
	// Experimental.
	MetricKPUsCount() interface{}
	// Experimental.
	MetricLastCheckpointDurationMs() interface{}
	// Experimental.
	MetricLastCheckpointSizeBytes() interface{}
	// Experimental.
	MetricNumberOfFailedCheckpointsCount() interface{}
	// Experimental.
	MetricOldGenerationGCCount() interface{}
	// Experimental.
	MetricOldGenerationGCTimeMs() interface{}
	// Experimental.
	MetricUptimeMs() interface{}
}

// The jsii proxy struct for KinesisDataAnalyticsMetricFactory
type jsiiProxy_KinesisDataAnalyticsMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_KinesisDataAnalyticsMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisDataAnalyticsMetricFactory(metricFactory MetricFactory, props *KinesisDataAnalyticsMetricFactoryProps) KinesisDataAnalyticsMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_KinesisDataAnalyticsMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisDataAnalyticsMetricFactory_Override(k KinesisDataAnalyticsMetricFactory, metricFactory MetricFactory, props *KinesisDataAnalyticsMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsMetricFactory",
		[]interface{}{metricFactory, props},
		k,
	)
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricCpuUtilizationPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricCpuUtilizationPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricDowntimeMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricDowntimeMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricFullRestartsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricFullRestartsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricHeapMemoryUtilizationPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricHeapMemoryUtilizationPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricKPUsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricKPUsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricLastCheckpointDurationMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricLastCheckpointDurationMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricLastCheckpointSizeBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricLastCheckpointSizeBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricNumberOfFailedCheckpointsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricNumberOfFailedCheckpointsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricOldGenerationGCCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricOldGenerationGCCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricOldGenerationGCTimeMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricOldGenerationGCTimeMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMetricFactory) MetricUptimeMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricUptimeMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisDataAnalyticsMetricFactoryProps struct {
	// Experimental.
	Application *string `field:"required" json:"application" yaml:"application"`
}

// Experimental.
type KinesisDataAnalyticsMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	CpuUtilizationPercentMetric() interface{}
	// Experimental.
	DowntimeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DowntimeMsMetric() interface{}
	// Experimental.
	FullRestartAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FullRestartsCountMetric() interface{}
	// Experimental.
	HeapMemoryUtilizationPercentMetric() interface{}
	// Experimental.
	KdaAlarmFactory() KinesisDataAnalyticsAlarmFactory
	// Experimental.
	KinesisDataAnalyticsUrl() *string
	// Experimental.
	KpusCountMetric() interface{}
	// Experimental.
	LastCheckpointDurationMsMetric() interface{}
	// Experimental.
	LastCheckpointSizeBytesMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	NumberOfFailedCheckpointsCountMetric() interface{}
	// Experimental.
	OldGenerationGCCountMetric() interface{}
	// Experimental.
	OldGenerationGCTimeMsMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDownTimeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateFullRestartsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateGarbageCollectionWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateKPUWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLastCheckpointDurationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLastCheckpointSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateNumberOfFailedCheckpointsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateResourceUtilizationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for KinesisDataAnalyticsMonitoring
type jsiiProxy_KinesisDataAnalyticsMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) CpuUtilizationPercentMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUtilizationPercentMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) DowntimeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"downtimeAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) DowntimeMsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"downtimeMsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) FullRestartAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"fullRestartAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) FullRestartsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"fullRestartsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) HeapMemoryUtilizationPercentMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"heapMemoryUtilizationPercentMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) KdaAlarmFactory() KinesisDataAnalyticsAlarmFactory {
	var returns KinesisDataAnalyticsAlarmFactory
	_jsii_.Get(
		j,
		"kdaAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) KinesisDataAnalyticsUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kinesisDataAnalyticsUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) KpusCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"kpusCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) LastCheckpointDurationMsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"lastCheckpointDurationMsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) LastCheckpointSizeBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"lastCheckpointSizeBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) NumberOfFailedCheckpointsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"numberOfFailedCheckpointsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) OldGenerationGCCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"oldGenerationGCCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) OldGenerationGCTimeMsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"oldGenerationGCTimeMsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataAnalyticsMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisDataAnalyticsMonitoring(scope MonitoringScope, props *KinesisDataAnalyticsMonitoringProps) KinesisDataAnalyticsMonitoring {
	_init_.Initialize()

	j := jsiiProxy_KinesisDataAnalyticsMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisDataAnalyticsMonitoring_Override(k KinesisDataAnalyticsMonitoring, scope MonitoringScope, props *KinesisDataAnalyticsMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataAnalyticsMonitoring",
		[]interface{}{scope, props},
		k,
	)
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		k,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		k,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateDownTimeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createDownTimeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateFullRestartsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createFullRestartsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateGarbageCollectionWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createGarbageCollectionWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateKPUWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createKPUWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateLastCheckpointDurationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createLastCheckpointDurationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateLastCheckpointSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createLastCheckpointSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		k,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateNumberOfFailedCheckpointsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createNumberOfFailedCheckpointsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateResourceUtilizationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createResourceUtilizationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		k,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		k,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataAnalyticsMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisDataAnalyticsMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDowntimeAlarm *map[string]*MaxDowntimeThreshold `field:"optional" json:"addDowntimeAlarm" yaml:"addDowntimeAlarm"`
	// Experimental.
	AddFullRestartCountAlarm *map[string]*FullRestartCountThreshold `field:"optional" json:"addFullRestartCountAlarm" yaml:"addFullRestartCountAlarm"`
}

// Experimental.
type KinesisDataAnalyticsMonitoringProps struct {
	// Experimental.
	Application *string `field:"required" json:"application" yaml:"application"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDowntimeAlarm *map[string]*MaxDowntimeThreshold `field:"optional" json:"addDowntimeAlarm" yaml:"addDowntimeAlarm"`
	// Experimental.
	AddFullRestartCountAlarm *map[string]*FullRestartCountThreshold `field:"optional" json:"addFullRestartCountAlarm" yaml:"addFullRestartCountAlarm"`
}

// See: https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html
//
// Experimental.
type KinesisDataStreamMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricGetRecordsIteratorAgeMaxMs() interface{}
	// Experimental.
	MetricGetRecordsLatencyAverageMs() interface{}
	// Experimental.
	MetricGetRecordsSuccessCount() interface{}
	// Experimental.
	MetricGetRecordsSumBytes() interface{}
	// Experimental.
	MetricGetRecordsSumCount() interface{}
	// Experimental.
	MetricIncomingDataSumBytes() interface{}
	// Experimental.
	MetricIncomingDataSumCount() interface{}
	// Experimental.
	MetricPutRecordLatencyAverageMs() interface{}
	// Experimental.
	MetricPutRecordsFailedRecordsCount() interface{}
	// Experimental.
	MetricPutRecordsLatencyAverageMs() interface{}
	// Experimental.
	MetricPutRecordsSuccessCount() interface{}
	// Experimental.
	MetricPutRecordsSuccessfulRecordsCount() interface{}
	// Experimental.
	MetricPutRecordsSumBytes() interface{}
	// Experimental.
	MetricPutRecordsThrottledRecordsCount() interface{}
	// Experimental.
	MetricPutRecordsTotalRecordsCount() interface{}
	// Experimental.
	MetricPutRecordSuccessCount() interface{}
	// Experimental.
	MetricPutRecordSumBytes() interface{}
	// Experimental.
	MetricReadProvisionedThroughputExceededPercent() interface{}
	// Experimental.
	MetricWriteProvisionedThroughputExceededPercent() interface{}
}

// The jsii proxy struct for KinesisDataStreamMetricFactory
type jsiiProxy_KinesisDataStreamMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_KinesisDataStreamMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisDataStreamMetricFactory(metricFactory MetricFactory, props *KinesisDataStreamMetricFactoryProps) KinesisDataStreamMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_KinesisDataStreamMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataStreamMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisDataStreamMetricFactory_Override(k KinesisDataStreamMetricFactory, metricFactory MetricFactory, props *KinesisDataStreamMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataStreamMetricFactory",
		[]interface{}{metricFactory, props},
		k,
	)
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricGetRecordsIteratorAgeMaxMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricGetRecordsIteratorAgeMaxMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricGetRecordsLatencyAverageMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricGetRecordsLatencyAverageMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricGetRecordsSuccessCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricGetRecordsSuccessCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricGetRecordsSumBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricGetRecordsSumBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricGetRecordsSumCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricGetRecordsSumCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricIncomingDataSumBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingDataSumBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricIncomingDataSumCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingDataSumCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordLatencyAverageMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordLatencyAverageMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsFailedRecordsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsFailedRecordsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsLatencyAverageMs() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsLatencyAverageMs",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsSuccessCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsSuccessCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsSuccessfulRecordsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsSuccessfulRecordsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsSumBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsSumBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsThrottledRecordsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsThrottledRecordsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordsTotalRecordsCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordsTotalRecordsCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordSuccessCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordSuccessCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricPutRecordSumBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordSumBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricReadProvisionedThroughputExceededPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricReadProvisionedThroughputExceededPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMetricFactory) MetricWriteProvisionedThroughputExceededPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricWriteProvisionedThroughputExceededPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisDataStreamMetricFactoryProps struct {
	// Experimental.
	StreamName *string `field:"required" json:"streamName" yaml:"streamName"`
}

// Experimental.
type KinesisDataStreamMonitoring interface {
	Monitoring
	// Experimental.
	AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	IncomingDataSumBytesMetric() interface{}
	// Experimental.
	IncomingDataSumCountMetric() interface{}
	// Experimental.
	KinesisAlarmFactory() KinesisAlarmFactory
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MetricGetRecordsIteratorAge() interface{}
	// Experimental.
	MetricGetRecordsLatencyAverage() interface{}
	// Experimental.
	MetricGetRecordsSuccessCount() interface{}
	// Experimental.
	MetricGetRecordsSumCount() interface{}
	// Experimental.
	MetricGetRecordSumBytes() interface{}
	// Experimental.
	ProvisionedCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	PutRecordLatencyAverageMetric() interface{}
	// Experimental.
	PutRecordsFailedRecordsCountMetric() interface{}
	// Experimental.
	PutRecordsLatencyAverageMetric() interface{}
	// Experimental.
	PutRecordsSuccessCountMetric() interface{}
	// Experimental.
	PutRecordsSuccessfulRecordsCountMetric() interface{}
	// Experimental.
	PutRecordsSumBytesMetric() interface{}
	// Experimental.
	PutRecordsThrottledRecordsCountMetric() interface{}
	// Experimental.
	PutRecordsTotalRecordsCountMetric() interface{}
	// Experimental.
	PutRecordSuccessCountMetric() interface{}
	// Experimental.
	PutRecordSumBytesMetric() interface{}
	// Experimental.
	ReadProvisionedThroughputExceededMetric() interface{}
	// Experimental.
	RecordCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StreamUrl() *string
	// Experimental.
	Title() *string
	// Experimental.
	WriteProvisionedThroughputExceededMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateIncomingDataWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateIteratorAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateOperationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateRecordNumberWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateRecordSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateSecondAdditionalRow() awscloudwatch.Row
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for KinesisDataStreamMonitoring
type jsiiProxy_KinesisDataStreamMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"ageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) IncomingDataSumBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingDataSumBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) IncomingDataSumCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingDataSumCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) KinesisAlarmFactory() KinesisAlarmFactory {
	var returns KinesisAlarmFactory
	_jsii_.Get(
		j,
		"kinesisAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) MetricGetRecordsIteratorAge() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricGetRecordsIteratorAge",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) MetricGetRecordsLatencyAverage() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricGetRecordsLatencyAverage",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) MetricGetRecordsSuccessCount() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricGetRecordsSuccessCount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) MetricGetRecordsSumCount() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricGetRecordsSumCount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) MetricGetRecordSumBytes() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"metricGetRecordSumBytes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) ProvisionedCapacityAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"provisionedCapacityAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordLatencyAverageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordLatencyAverageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsFailedRecordsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsFailedRecordsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsLatencyAverageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsLatencyAverageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsSuccessCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsSuccessCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsSuccessfulRecordsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsSuccessfulRecordsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsSumBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsSumBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsThrottledRecordsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsThrottledRecordsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordsTotalRecordsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordsTotalRecordsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordSuccessCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordSuccessCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) PutRecordSumBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordSumBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) ReadProvisionedThroughputExceededMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readProvisionedThroughputExceededMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) RecordCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"recordCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) StreamUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"streamUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisDataStreamMonitoring) WriteProvisionedThroughputExceededMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeProvisionedThroughputExceededMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisDataStreamMonitoring(scope MonitoringScope, props *KinesisDataStreamMonitoringProps) KinesisDataStreamMonitoring {
	_init_.Initialize()

	j := jsiiProxy_KinesisDataStreamMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataStreamMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisDataStreamMonitoring_Override(k KinesisDataStreamMonitoring, scope MonitoringScope, props *KinesisDataStreamMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisDataStreamMonitoring",
		[]interface{}{scope, props},
		k,
	)
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		k,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		k,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateCapacityWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createCapacityWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateIncomingDataWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createIncomingDataWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateIteratorAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createIteratorAgeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		k,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateOperationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createOperationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateRecordNumberWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createRecordNumberWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateRecordSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createRecordSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateSecondAdditionalRow() awscloudwatch.Row {
	var returns awscloudwatch.Row

	_jsii_.Invoke(
		k,
		"createSecondAdditionalRow",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		k,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		k,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisDataStreamMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisDataStreamMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddIteratorMaxAgeAlarm *map[string]*MaxIteratorAgeThreshold `field:"optional" json:"addIteratorMaxAgeAlarm" yaml:"addIteratorMaxAgeAlarm"`
	// Experimental.
	AddPutRecordsFailedAlarm *map[string]*RecordsFailedThreshold `field:"optional" json:"addPutRecordsFailedAlarm" yaml:"addPutRecordsFailedAlarm"`
	// Experimental.
	AddPutRecordsThrottledAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addPutRecordsThrottledAlarm" yaml:"addPutRecordsThrottledAlarm"`
	// Experimental.
	AddReadProvisionedThroughputExceededAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addReadProvisionedThroughputExceededAlarm" yaml:"addReadProvisionedThroughputExceededAlarm"`
	// Experimental.
	AddThrottledRecordsAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addThrottledRecordsAlarm" yaml:"addThrottledRecordsAlarm"`
	// Experimental.
	AddWriteProvisionedThroughputExceededAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addWriteProvisionedThroughputExceededAlarm" yaml:"addWriteProvisionedThroughputExceededAlarm"`
}

// Experimental.
type KinesisDataStreamMonitoringProps struct {
	// Experimental.
	StreamName *string `field:"required" json:"streamName" yaml:"streamName"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddIteratorMaxAgeAlarm *map[string]*MaxIteratorAgeThreshold `field:"optional" json:"addIteratorMaxAgeAlarm" yaml:"addIteratorMaxAgeAlarm"`
	// Experimental.
	AddPutRecordsFailedAlarm *map[string]*RecordsFailedThreshold `field:"optional" json:"addPutRecordsFailedAlarm" yaml:"addPutRecordsFailedAlarm"`
	// Experimental.
	AddPutRecordsThrottledAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addPutRecordsThrottledAlarm" yaml:"addPutRecordsThrottledAlarm"`
	// Experimental.
	AddReadProvisionedThroughputExceededAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addReadProvisionedThroughputExceededAlarm" yaml:"addReadProvisionedThroughputExceededAlarm"`
	// Experimental.
	AddThrottledRecordsAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addThrottledRecordsAlarm" yaml:"addThrottledRecordsAlarm"`
	// Experimental.
	AddWriteProvisionedThroughputExceededAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addWriteProvisionedThroughputExceededAlarm" yaml:"addWriteProvisionedThroughputExceededAlarm"`
}

// See: https://docs.aws.amazon.com/firehose/latest/dev/monitoring-with-cloudwatch-metrics.html
//
// Experimental.
type KinesisFirehoseMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricBytesPerSecondLimit() interface{}
	// Experimental.
	MetricFailedConversionCount() interface{}
	// Experimental.
	MetricIncomingBytes() interface{}
	// Experimental.
	MetricIncomingBytesToLimitRate() interface{}
	// Experimental.
	MetricIncomingPutRequests() interface{}
	// Experimental.
	MetricIncomingPutRequestsToLimitRate() interface{}
	// Experimental.
	MetricIncomingRecordCount() interface{}
	// Experimental.
	MetricIncomingRecordsToLimitRate() interface{}
	// Experimental.
	MetricPutRecordBatchLatencyP90InMillis() interface{}
	// Experimental.
	MetricPutRecordLatencyP90InMillis() interface{}
	// Experimental.
	MetricPutRequestsPerSecondLimit() interface{}
	// Experimental.
	MetricRecordsPerSecondLimit() interface{}
	// Experimental.
	MetricSuccessfulConversionCount() interface{}
	// Experimental.
	MetricThrottledRecordCount() interface{}
}

// The jsii proxy struct for KinesisFirehoseMetricFactory
type jsiiProxy_KinesisFirehoseMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_KinesisFirehoseMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisFirehoseMetricFactory(metricFactory MetricFactory, props *KinesisFirehoseMetricFactoryProps) KinesisFirehoseMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_KinesisFirehoseMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisFirehoseMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisFirehoseMetricFactory_Override(k KinesisFirehoseMetricFactory, metricFactory MetricFactory, props *KinesisFirehoseMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisFirehoseMetricFactory",
		[]interface{}{metricFactory, props},
		k,
	)
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricBytesPerSecondLimit() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricBytesPerSecondLimit",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricFailedConversionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricFailedConversionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingBytesToLimitRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingBytesToLimitRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingPutRequests() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingPutRequests",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingPutRequestsToLimitRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingPutRequestsToLimitRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingRecordCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingRecordCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricIncomingRecordsToLimitRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricIncomingRecordsToLimitRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricPutRecordBatchLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordBatchLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricPutRecordLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRecordLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricPutRequestsPerSecondLimit() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricPutRequestsPerSecondLimit",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricRecordsPerSecondLimit() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricRecordsPerSecondLimit",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricSuccessfulConversionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricSuccessfulConversionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMetricFactory) MetricThrottledRecordCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		k,
		"metricThrottledRecordCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisFirehoseMetricFactoryProps struct {
	// Experimental.
	DeliveryStreamName *string `field:"required" json:"deliveryStreamName" yaml:"deliveryStreamName"`
}

// Experimental.
type KinesisFirehoseMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	FailedConversionMetric() interface{}
	// Experimental.
	IncomingBytesMetric() interface{}
	// Experimental.
	IncomingBytesToLimitRate() interface{}
	// Experimental.
	IncomingPutRequestsToLimitRate() interface{}
	// Experimental.
	IncomingRecordsMetric() interface{}
	// Experimental.
	IncomingRecordsToLimitRate() interface{}
	// Experimental.
	KinesisAlarmFactory() KinesisAlarmFactory
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	PutRecordBatchLatency() interface{}
	// Experimental.
	PutRecordLatency() interface{}
	// Experimental.
	RecordCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StreamUrl() *string
	// Experimental.
	SuccessfulConversionMetric() interface{}
	// Experimental.
	ThrottledRecordsMetric() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateConversionWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateIncomingRecordWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLimitWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for KinesisFirehoseMonitoring
type jsiiProxy_KinesisFirehoseMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) FailedConversionMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedConversionMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) IncomingBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) IncomingBytesToLimitRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingBytesToLimitRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) IncomingPutRequestsToLimitRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingPutRequestsToLimitRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) IncomingRecordsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingRecordsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) IncomingRecordsToLimitRate() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingRecordsToLimitRate",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) KinesisAlarmFactory() KinesisAlarmFactory {
	var returns KinesisAlarmFactory
	_jsii_.Get(
		j,
		"kinesisAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) PutRecordBatchLatency() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordBatchLatency",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) PutRecordLatency() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"putRecordLatency",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) RecordCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"recordCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) StreamUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"streamUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) SuccessfulConversionMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"successfulConversionMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) ThrottledRecordsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"throttledRecordsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_KinesisFirehoseMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewKinesisFirehoseMonitoring(scope MonitoringScope, props *KinesisFirehoseMonitoringProps) KinesisFirehoseMonitoring {
	_init_.Initialize()

	j := jsiiProxy_KinesisFirehoseMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisFirehoseMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewKinesisFirehoseMonitoring_Override(k KinesisFirehoseMonitoring, scope MonitoringScope, props *KinesisFirehoseMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.KinesisFirehoseMonitoring",
		[]interface{}{scope, props},
		k,
	)
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		k,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		k,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateConversionWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createConversionWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		k,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateIncomingRecordWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createIncomingRecordWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateLimitWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		k,
		"createLimitWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		k,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		k,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		k,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (k *jsiiProxy_KinesisFirehoseMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		k,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type KinesisFirehoseMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddRecordsThrottledAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addRecordsThrottledAlarm" yaml:"addRecordsThrottledAlarm"`
}

// Experimental.
type KinesisFirehoseMonitoringProps struct {
	// Experimental.
	DeliveryStreamName *string `field:"required" json:"deliveryStreamName" yaml:"deliveryStreamName"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddRecordsThrottledAlarm *map[string]*RecordsThrottledThreshold `field:"optional" json:"addRecordsThrottledAlarm" yaml:"addRecordsThrottledAlarm"`
}

// Experimental.
type LambdaFunctionEnhancedMetricFactory interface {
	// Experimental.
	LambdaFunction() awslambda.IFunction
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	EnhancedMetricAvgCpuTotalTime() interface{}
	// Experimental.
	EnhancedMetricAvgMemoryUtilization() interface{}
	// Experimental.
	EnhancedMetricFunctionCost() interface{}
	// Experimental.
	EnhancedMetricMaxCpuTotalTime() interface{}
	// Experimental.
	EnhancedMetricMaxMemoryUtilization() interface{}
	// Experimental.
	EnhancedMetricP90CpuTotalTime() interface{}
	// Experimental.
	EnhancedMetricP90MemoryUtilization() interface{}
}

// The jsii proxy struct for LambdaFunctionEnhancedMetricFactory
type jsiiProxy_LambdaFunctionEnhancedMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_LambdaFunctionEnhancedMetricFactory) LambdaFunction() awslambda.IFunction {
	var returns awslambda.IFunction
	_jsii_.Get(
		j,
		"lambdaFunction",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionEnhancedMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewLambdaFunctionEnhancedMetricFactory(metricFactory MetricFactory, lambdaFunction awslambda.IFunction) LambdaFunctionEnhancedMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_LambdaFunctionEnhancedMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionEnhancedMetricFactory",
		[]interface{}{metricFactory, lambdaFunction},
		&j,
	)

	return &j
}

// Experimental.
func NewLambdaFunctionEnhancedMetricFactory_Override(l LambdaFunctionEnhancedMetricFactory, metricFactory MetricFactory, lambdaFunction awslambda.IFunction) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionEnhancedMetricFactory",
		[]interface{}{metricFactory, lambdaFunction},
		l,
	)
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricAvgCpuTotalTime() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricAvgCpuTotalTime",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricAvgMemoryUtilization() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricAvgMemoryUtilization",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricFunctionCost() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricFunctionCost",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricMaxCpuTotalTime() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricMaxCpuTotalTime",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricMaxMemoryUtilization() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricMaxMemoryUtilization",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricP90CpuTotalTime() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricP90CpuTotalTime",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionEnhancedMetricFactory) EnhancedMetricP90MemoryUtilization() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"enhancedMetricP90MemoryUtilization",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type LambdaFunctionMetricFactory interface {
	// Experimental.
	FillTpsWithZeroes() *bool
	// Experimental.
	LambdaFunction() awslambda.IFunction
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricConcurrentExecutions() interface{}
	// Experimental.
	MetricFaultCount() interface{}
	// Experimental.
	MetricFaultRate() interface{}
	// Experimental.
	MetricInvocationCount() interface{}
	// Experimental.
	MetricInvocationRate() interface{}
	// Experimental.
	MetricLatencyP50InMillis() interface{}
	// Experimental.
	MetricLatencyP90InMillis() interface{}
	// Experimental.
	MetricLatencyP99InMillis() interface{}
	// Experimental.
	MetricMaxIteratorAgeInMillis() interface{}
	// Experimental.
	MetricProvisionedConcurrencySpilloverInvocations() interface{}
	// Experimental.
	MetricProvisionedConcurrencySpilloverRate() interface{}
	// Experimental.
	MetricThrottlesCount() interface{}
	// Experimental.
	MetricThrottlesRate() interface{}
	// Deprecated: use metricInvocationRate.
	MetricTps() interface{}
}

// The jsii proxy struct for LambdaFunctionMetricFactory
type jsiiProxy_LambdaFunctionMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_LambdaFunctionMetricFactory) FillTpsWithZeroes() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"fillTpsWithZeroes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMetricFactory) LambdaFunction() awslambda.IFunction {
	var returns awslambda.IFunction
	_jsii_.Get(
		j,
		"lambdaFunction",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewLambdaFunctionMetricFactory(metricFactory MetricFactory, props *LambdaFunctionMetricFactoryProps) LambdaFunctionMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_LambdaFunctionMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewLambdaFunctionMetricFactory_Override(l LambdaFunctionMetricFactory, metricFactory MetricFactory, props *LambdaFunctionMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionMetricFactory",
		[]interface{}{metricFactory, props},
		l,
	)
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricConcurrentExecutions() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricConcurrentExecutions",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricFaultCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricFaultCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricFaultRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricFaultRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricInvocationCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricInvocationCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricInvocationRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricInvocationRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricMaxIteratorAgeInMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricMaxIteratorAgeInMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricProvisionedConcurrencySpilloverInvocations() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricProvisionedConcurrencySpilloverInvocations",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricProvisionedConcurrencySpilloverRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricProvisionedConcurrencySpilloverRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricThrottlesCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricThrottlesCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricThrottlesRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricThrottlesRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMetricFactory) MetricTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		l,
		"metricTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type LambdaFunctionMetricFactoryProps struct {
	// Experimental.
	LambdaFunction awslambda.IFunction `field:"required" json:"lambdaFunction" yaml:"lambdaFunction"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Generate dashboard charts for Lambda Insights metrics.
	//
	// To enable Lambda Insights on your Lambda function, see
	// https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Getting-Started-clouddevelopmentkit.html
	// Experimental.
	LambdaInsightsEnabled *bool `field:"optional" json:"lambdaInsightsEnabled" yaml:"lambdaInsightsEnabled"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type LambdaFunctionMonitoring interface {
	Monitoring
	// Experimental.
	AgeAlarmFactory() AgeAlarmFactory
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConcurrentExecutionsCountMetric() interface{}
	// Experimental.
	CpuTotalTimeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	EnhancedMetricFactory() LambdaFunctionEnhancedMetricFactory
	// Experimental.
	EnhancedMetricFunctionCostMetric() interface{}
	// Experimental.
	EnhancedMonitoringAvgCpuTotalTimeMetric() interface{}
	// Experimental.
	EnhancedMonitoringAvgMemoryUtilizationMetric() interface{}
	// Experimental.
	EnhancedMonitoringMaxCpuTotalTimeMetric() interface{}
	// Experimental.
	EnhancedMonitoringMaxMemoryUtilizationMetric() interface{}
	// Experimental.
	EnhancedMonitoringP90CpuTotalTimeMetric() interface{}
	// Experimental.
	EnhancedMonitoringP90MemoryUtilizationMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FaultCountMetric() interface{}
	// Experimental.
	FaultRateMetric() interface{}
	// Experimental.
	FunctionUrl() *string
	// Experimental.
	InvocationCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	InvocationCountMetric() interface{}
	// Experimental.
	InvocationRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LambdaInsightsEnabled() *bool
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MaxIteratorAgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	MaxIteratorAgeMetric() interface{}
	// Experimental.
	MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	MetricFactory() LambdaFunctionMetricFactory
	// Experimental.
	NamingStrategy() MonitoringNamingStrategy
	// Experimental.
	P50LatencyMetric() interface{}
	// Experimental.
	P90LatencyMetric() interface{}
	// Experimental.
	P99LatencyMetric() interface{}
	// Experimental.
	ProvisionedConcurrencySpilloverInvocationsCountMetric() interface{}
	// Experimental.
	ProvisionedConcurrencySpilloverInvocationsRateMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TaskHealthAlarmFactory() TaskHealthAlarmFactory
	// Experimental.
	ThrottlesCountMetric() interface{}
	// Experimental.
	ThrottlesRateMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	TpsAlarmFactory() TpsAlarmFactory
	// Experimental.
	TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TpsMetric() interface{}
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateInvocationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateIteratorAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLambdaInsightsCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLambdaInsightsFunctionCostWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLambdaInsightsMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for LambdaFunctionMonitoring
type jsiiProxy_LambdaFunctionMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_LambdaFunctionMonitoring) AgeAlarmFactory() AgeAlarmFactory {
	var returns AgeAlarmFactory
	_jsii_.Get(
		j,
		"ageAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ConcurrentExecutionsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"concurrentExecutionsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) CpuTotalTimeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"cpuTotalTimeAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMetricFactory() LambdaFunctionEnhancedMetricFactory {
	var returns LambdaFunctionEnhancedMetricFactory
	_jsii_.Get(
		j,
		"enhancedMetricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMetricFunctionCostMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMetricFunctionCostMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringAvgCpuTotalTimeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringAvgCpuTotalTimeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringAvgMemoryUtilizationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringAvgMemoryUtilizationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringMaxCpuTotalTimeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringMaxCpuTotalTimeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringMaxMemoryUtilizationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringMaxMemoryUtilizationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringP90CpuTotalTimeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringP90CpuTotalTimeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) EnhancedMonitoringP90MemoryUtilizationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"enhancedMonitoringP90MemoryUtilizationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) FaultCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"faultCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) FaultRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"faultRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) FunctionUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"functionUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) InvocationCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"invocationCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) InvocationCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"invocationCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) InvocationRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"invocationRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) LambdaInsightsEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"lambdaInsightsEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) MaxIteratorAgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"maxIteratorAgeAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) MaxIteratorAgeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"maxIteratorAgeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) MemoryUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"memoryUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) MetricFactory() LambdaFunctionMetricFactory {
	var returns LambdaFunctionMetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) NamingStrategy() MonitoringNamingStrategy {
	var returns MonitoringNamingStrategy
	_jsii_.Get(
		j,
		"namingStrategy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) P50LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) P90LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) P99LatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99LatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ProvisionedConcurrencySpilloverInvocationsCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedConcurrencySpilloverInvocationsCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ProvisionedConcurrencySpilloverInvocationsRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"provisionedConcurrencySpilloverInvocationsRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) TaskHealthAlarmFactory() TaskHealthAlarmFactory {
	var returns TaskHealthAlarmFactory
	_jsii_.Get(
		j,
		"taskHealthAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ThrottlesCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"throttlesCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) ThrottlesRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"throttlesRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) TpsAlarmFactory() TpsAlarmFactory {
	var returns TpsAlarmFactory
	_jsii_.Get(
		j,
		"tpsAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) TpsAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"tpsAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LambdaFunctionMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewLambdaFunctionMonitoring(scope MonitoringScope, props *LambdaFunctionMonitoringProps) LambdaFunctionMonitoring {
	_init_.Initialize()

	j := jsiiProxy_LambdaFunctionMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewLambdaFunctionMonitoring_Override(l LambdaFunctionMonitoring, scope MonitoringScope, props *LambdaFunctionMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LambdaFunctionMonitoring",
		[]interface{}{scope, props},
		l,
	)
}

func (l *jsiiProxy_LambdaFunctionMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		l,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (l *jsiiProxy_LambdaFunctionMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		l,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateInvocationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createInvocationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateIteratorAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createIteratorAgeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateLambdaInsightsCpuWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createLambdaInsightsCpuWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateLambdaInsightsFunctionCostWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createLambdaInsightsFunctionCostWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateLambdaInsightsMemoryWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createLambdaInsightsMemoryWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		l,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		l,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateTpsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		l,
		"createTpsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		l,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LambdaFunctionMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type LambdaFunctionMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddConcurrentExecutionsCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addConcurrentExecutionsCountAlarm" yaml:"addConcurrentExecutionsCountAlarm"`
	// Experimental.
	AddEnhancedMonitoringAvgCpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringAvgCpuTotalTimeAlarm" yaml:"addEnhancedMonitoringAvgCpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringAvgMemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringAvgMemoryUtilizationAlarm" yaml:"addEnhancedMonitoringAvgMemoryUtilizationAlarm"`
	// Experimental.
	AddEnhancedMonitoringMaxCpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringMaxCpuTotalTimeAlarm" yaml:"addEnhancedMonitoringMaxCpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringMaxMemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringMaxMemoryUtilizationAlarm" yaml:"addEnhancedMonitoringMaxMemoryUtilizationAlarm"`
	// Experimental.
	AddEnhancedMonitoringP90CpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringP90CpuTotalTimeAlarm" yaml:"addEnhancedMonitoringP90CpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringP90MemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringP90MemoryUtilizationAlarm" yaml:"addEnhancedMonitoringP90MemoryUtilizationAlarm"`
	// Experimental.
	AddFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFaultCountAlarm" yaml:"addFaultCountAlarm"`
	// Experimental.
	AddFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFaultRateAlarm" yaml:"addFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// Experimental.
	AddMaxIteratorAgeAlarm *map[string]*MaxAgeThreshold `field:"optional" json:"addMaxIteratorAgeAlarm" yaml:"addMaxIteratorAgeAlarm"`
	// Experimental.
	AddProvisionedConcurrencySpilloverInvocationsCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addProvisionedConcurrencySpilloverInvocationsCountAlarm" yaml:"addProvisionedConcurrencySpilloverInvocationsCountAlarm"`
	// Experimental.
	AddProvisionedConcurrencySpilloverInvocationsRateAlarm *map[string]*RunningTaskRateThreshold `field:"optional" json:"addProvisionedConcurrencySpilloverInvocationsRateAlarm" yaml:"addProvisionedConcurrencySpilloverInvocationsRateAlarm"`
	// Experimental.
	AddThrottlesCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addThrottlesCountAlarm" yaml:"addThrottlesCountAlarm"`
	// Experimental.
	AddThrottlesRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addThrottlesRateAlarm" yaml:"addThrottlesRateAlarm"`
}

// Experimental.
type LambdaFunctionMonitoringProps struct {
	// Experimental.
	LambdaFunction awslambda.IFunction `field:"required" json:"lambdaFunction" yaml:"lambdaFunction"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Generate dashboard charts for Lambda Insights metrics.
	//
	// To enable Lambda Insights on your Lambda function, see
	// https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Lambda-Insights-Getting-Started-clouddevelopmentkit.html
	// Experimental.
	LambdaInsightsEnabled *bool `field:"optional" json:"lambdaInsightsEnabled" yaml:"lambdaInsightsEnabled"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddConcurrentExecutionsCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addConcurrentExecutionsCountAlarm" yaml:"addConcurrentExecutionsCountAlarm"`
	// Experimental.
	AddEnhancedMonitoringAvgCpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringAvgCpuTotalTimeAlarm" yaml:"addEnhancedMonitoringAvgCpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringAvgMemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringAvgMemoryUtilizationAlarm" yaml:"addEnhancedMonitoringAvgMemoryUtilizationAlarm"`
	// Experimental.
	AddEnhancedMonitoringMaxCpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringMaxCpuTotalTimeAlarm" yaml:"addEnhancedMonitoringMaxCpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringMaxMemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringMaxMemoryUtilizationAlarm" yaml:"addEnhancedMonitoringMaxMemoryUtilizationAlarm"`
	// Experimental.
	AddEnhancedMonitoringP90CpuTotalTimeAlarm *map[string]*DurationThreshold `field:"optional" json:"addEnhancedMonitoringP90CpuTotalTimeAlarm" yaml:"addEnhancedMonitoringP90CpuTotalTimeAlarm"`
	// Experimental.
	AddEnhancedMonitoringP90MemoryUtilizationAlarm *map[string]*UsageThreshold `field:"optional" json:"addEnhancedMonitoringP90MemoryUtilizationAlarm" yaml:"addEnhancedMonitoringP90MemoryUtilizationAlarm"`
	// Experimental.
	AddFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFaultCountAlarm" yaml:"addFaultCountAlarm"`
	// Experimental.
	AddFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFaultRateAlarm" yaml:"addFaultRateAlarm"`
	// Experimental.
	AddHighTpsAlarm *map[string]*HighTpsThreshold `field:"optional" json:"addHighTpsAlarm" yaml:"addHighTpsAlarm"`
	// Experimental.
	AddLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP50Alarm" yaml:"addLatencyP50Alarm"`
	// Experimental.
	AddLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP90Alarm" yaml:"addLatencyP90Alarm"`
	// Experimental.
	AddLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addLatencyP99Alarm" yaml:"addLatencyP99Alarm"`
	// Experimental.
	AddLowTpsAlarm *map[string]*LowTpsThreshold `field:"optional" json:"addLowTpsAlarm" yaml:"addLowTpsAlarm"`
	// Experimental.
	AddMaxIteratorAgeAlarm *map[string]*MaxAgeThreshold `field:"optional" json:"addMaxIteratorAgeAlarm" yaml:"addMaxIteratorAgeAlarm"`
	// Experimental.
	AddProvisionedConcurrencySpilloverInvocationsCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addProvisionedConcurrencySpilloverInvocationsCountAlarm" yaml:"addProvisionedConcurrencySpilloverInvocationsCountAlarm"`
	// Experimental.
	AddProvisionedConcurrencySpilloverInvocationsRateAlarm *map[string]*RunningTaskRateThreshold `field:"optional" json:"addProvisionedConcurrencySpilloverInvocationsRateAlarm" yaml:"addProvisionedConcurrencySpilloverInvocationsRateAlarm"`
	// Experimental.
	AddThrottlesCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addThrottlesCountAlarm" yaml:"addThrottlesCountAlarm"`
	// Experimental.
	AddThrottlesRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addThrottlesRateAlarm" yaml:"addThrottlesRateAlarm"`
}

// Experimental.
type LatencyAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddDurationAlarm(metric interface{}, latencyType LatencyType, props *DurationThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddIntegrationLatencyAlarm(metric interface{}, latencyType LatencyType, props *LatencyThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddJvmGarbageCollectionDurationAlarm(metric interface{}, latencyType LatencyType, props *DurationThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddLatencyAlarm(metric interface{}, latencyType LatencyType, props *LatencyThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for LatencyAlarmFactory
type jsiiProxy_LatencyAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_LatencyAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewLatencyAlarmFactory(alarmFactory AlarmFactory) LatencyAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_LatencyAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LatencyAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewLatencyAlarmFactory_Override(l LatencyAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LatencyAlarmFactory",
		[]interface{}{alarmFactory},
		l,
	)
}

func (l *jsiiProxy_LatencyAlarmFactory) AddDurationAlarm(metric interface{}, latencyType LatencyType, props *DurationThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"addDurationAlarm",
		[]interface{}{metric, latencyType, props, disambiguator},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LatencyAlarmFactory) AddIntegrationLatencyAlarm(metric interface{}, latencyType LatencyType, props *LatencyThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"addIntegrationLatencyAlarm",
		[]interface{}{metric, latencyType, props, disambiguator},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LatencyAlarmFactory) AddJvmGarbageCollectionDurationAlarm(metric interface{}, latencyType LatencyType, props *DurationThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"addJvmGarbageCollectionDurationAlarm",
		[]interface{}{metric, latencyType, props, disambiguator},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LatencyAlarmFactory) AddLatencyAlarm(metric interface{}, latencyType LatencyType, props *LatencyThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"addLatencyAlarm",
		[]interface{}{metric, latencyType, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type LatencyThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxLatency awscdk.Duration `field:"required" json:"maxLatency" yaml:"maxLatency"`
}

// Experimental.
type LatencyType string

const (
	// Experimental.
	LatencyType_P50 LatencyType = "P50"
	// Experimental.
	LatencyType_P70 LatencyType = "P70"
	// Experimental.
	LatencyType_P90 LatencyType = "P90"
	// Experimental.
	LatencyType_P95 LatencyType = "P95"
	// Experimental.
	LatencyType_P99 LatencyType = "P99"
	// Experimental.
	LatencyType_P999 LatencyType = "P999"
	// Experimental.
	LatencyType_P9999 LatencyType = "P9999"
	// Experimental.
	LatencyType_P100 LatencyType = "P100"
	// Experimental.
	LatencyType_TM50 LatencyType = "TM50"
	// Experimental.
	LatencyType_TM70 LatencyType = "TM70"
	// Experimental.
	LatencyType_TM90 LatencyType = "TM90"
	// Experimental.
	LatencyType_TM95 LatencyType = "TM95"
	// Experimental.
	LatencyType_TM99 LatencyType = "TM99"
	// Experimental.
	LatencyType_TM999 LatencyType = "TM999"
	// Experimental.
	LatencyType_TM9999 LatencyType = "TM9999"
	// Experimental.
	LatencyType_AVERAGE LatencyType = "AVERAGE"
)

// Level of a given log.
// Experimental.
type LogLevel string

const (
	// Experimental.
	LogLevel_ERROR LogLevel = "ERROR"
	// Experimental.
	LogLevel_CRITICAL LogLevel = "CRITICAL"
	// Experimental.
	LogLevel_FATAL LogLevel = "FATAL"
)

// Experimental.
type LogLevelAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddLogCountAlarm(metric interface{}, logLevel LogLevel, props *LogLevelCountThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for LogLevelAlarmFactory
type jsiiProxy_LogLevelAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_LogLevelAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewLogLevelAlarmFactory(alarmFactory AlarmFactory) LogLevelAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_LogLevelAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LogLevelAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewLogLevelAlarmFactory_Override(l LogLevelAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LogLevelAlarmFactory",
		[]interface{}{alarmFactory},
		l,
	)
}

func (l *jsiiProxy_LogLevelAlarmFactory) AddLogCountAlarm(metric interface{}, logLevel LogLevel, props *LogLevelCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"addLogCountAlarm",
		[]interface{}{metric, logLevel, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type LogLevelCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Threshold for the number of logs to alarm on.
	// Experimental.
	MaxLogCount *float64 `field:"required" json:"maxLogCount" yaml:"maxLogCount"`
}

// Monitors a CloudWatch log group for various patterns.
// Experimental.
type LogMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	Limit() *float64
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	LogGroupName() *string
	// Experimental.
	LogGroupUrl() *string
	// Experimental.
	Pattern() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	ResolveRecommendedHeight(numRows *float64) *float64
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for LogMonitoring
type jsiiProxy_LogMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_LogMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) Limit() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"limit",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) LogGroupName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logGroupName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) LogGroupUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"logGroupUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) Pattern() *string {
	var returns *string
	_jsii_.Get(
		j,
		"pattern",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_LogMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewLogMonitoring(scope MonitoringScope, props *LogMonitoringProps) LogMonitoring {
	_init_.Initialize()

	j := jsiiProxy_LogMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.LogMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewLogMonitoring_Override(l LogMonitoring, scope MonitoringScope, props *LogMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.LogMonitoring",
		[]interface{}{scope, props},
		l,
	)
}

func (l *jsiiProxy_LogMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		l,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (l *jsiiProxy_LogMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		l,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		l,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		l,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		l,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) ResolveRecommendedHeight(numRows *float64) *float64 {
	var returns *float64

	_jsii_.Invoke(
		l,
		"resolveRecommendedHeight",
		[]interface{}{numRows},
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (l *jsiiProxy_LogMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		l,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type LogMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// name of the log group to analyze for the given pattern.
	// Experimental.
	LogGroupName *string `field:"required" json:"logGroupName" yaml:"logGroupName"`
	// pattern to show, e.g. "ERROR".
	// Experimental.
	Pattern *string `field:"required" json:"pattern" yaml:"pattern"`
	// number of log messages to search for.
	// Experimental.
	Limit *float64 `field:"optional" json:"limit" yaml:"limit"`
	// widget title.
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
}

// Experimental.
type LowMessagesPublishedThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinMessagesPublishedCount *float64 `field:"required" json:"minMessagesPublishedCount" yaml:"minMessagesPublishedCount"`
}

// Experimental.
type LowTpsThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinTps *float64 `field:"required" json:"minTps" yaml:"minTps"`
}

// Experimental.
type MaxAgeThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxAgeInMillis *float64 `field:"required" json:"maxAgeInMillis" yaml:"maxAgeInMillis"`
}

// Experimental.
type MaxDowntimeThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxDowntimeInMillis *float64 `field:"required" json:"maxDowntimeInMillis" yaml:"maxDowntimeInMillis"`
}

// Experimental.
type MaxIncomingMessagesCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxIncomingMessagesCount *float64 `field:"required" json:"maxIncomingMessagesCount" yaml:"maxIncomingMessagesCount"`
}

// Experimental.
type MaxItemsCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxItemsCount *float64 `field:"required" json:"maxItemsCount" yaml:"maxItemsCount"`
}

// Experimental.
type MaxIteratorAgeThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxAgeInMillis *float64 `field:"required" json:"maxAgeInMillis" yaml:"maxAgeInMillis"`
}

// Experimental.
type MaxMessageAgeThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxAgeInSeconds *float64 `field:"required" json:"maxAgeInSeconds" yaml:"maxAgeInSeconds"`
}

// Experimental.
type MaxMessageCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxMessageCount *float64 `field:"required" json:"maxMessageCount" yaml:"maxMessageCount"`
}

// Experimental.
type MaxTimeToDrainThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxTimeToDrain awscdk.Duration `field:"required" json:"maxTimeToDrain" yaml:"maxTimeToDrain"`
}

// Experimental.
type MaxUsedSwapMemoryThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxUsedSwapMemoryInBytes *float64 `field:"required" json:"maxUsedSwapMemoryInBytes" yaml:"maxUsedSwapMemoryInBytes"`
}

// Experimental.
type MetricFactory interface {
	// Experimental.
	GlobalDefaults() *MetricFactoryDefaults
	// Adapts properties of a foreign metric (metric created outside of this metric factory) to comply with the global defaults.
	//
	// Might modify namespace and metric period.
	// Experimental.
	AdaptMetric(metric interface{}) interface{}
	// Adapts properties of a foreign metric (metric created outside of this metric factory) to comply with the global defaults.
	//
	// Might modify namespace. Preserves metric period.
	// Experimental.
	AdaptMetricPreservingPeriod(metric interface{}) interface{}
	// Merges the given additional dimensions to the given target dimension hash.
	//
	// All existing dimensions with the same key are replaced.
	// Experimental.
	AddAdditionalDimensions(target *map[string]*string, additionalDimensions *map[string]*string)
	// Factory method that creates a metric.
	//
	// The metric properties will already be updated to comply with the global defaults.
	// Experimental.
	CreateMetric(metricName *string, statistic MetricStatistic, label *string, dimensionsMap *map[string]*string, color *string, namespace *string, period awscdk.Duration) interface{}
	// Factory method that creates anomaly detection on a metric.
	//
	// Anomaly occurs whenever a metric value falls outside of a precomputed range of predicted values.
	// The detection does not need any setup. The model will start learning automatically and should be ready in a few minutes.
	// Usually, the anomaly detection is paired with an alarm.
	// See: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html
	//
	// Experimental.
	CreateMetricAnomalyDetection(metric awscloudwatch.IMetric, stdev *float64, label *string, color *string, expressionId *string, period awscdk.Duration) interface{}
	// Factory method that creates a metric math expression.
	//
	// The metric properties will already be updated to comply with the global defaults.
	// Experimental.
	CreateMetricMath(expression *string, usingMetrics *map[string]awscloudwatch.IMetric, label *string, color *string, period awscdk.Duration) interface{}
	// Factory method that creates a metric search query.
	//
	// The metric properties will already be updated to comply with the global defaults.
	// Experimental.
	CreateMetricSearch(query *string, dimensionsMap *map[string]*string, statistic MetricStatistic, namespace *string, label *string, period awscdk.Duration) awscloudwatch.IMetric
	// Creates a metric math expression that divides the given metric by given coefficient.
	//
	// Does nothing if the divisor is one. Preserves the metric period.
	// Experimental.
	DivideMetric(metric interface{}, divisor *float64, label *string, expressionId *string) interface{}
	// Returns the given namespace (if defined) or the global namespace as a fallback.
	//
	// If there is no namespace to fallback to (neither the custom or the default one), it will fail.
	// Experimental.
	GetNamespaceWithFallback(value *string) *string
	// Creates a metric math expression that multiplies the given metric by given coefficient.
	//
	// Does nothing if the multiplier is one. Preserves the metric period.
	// Experimental.
	MultiplyMetric(metric interface{}, multiplier *float64, label *string, expressionId *string) interface{}
	// Helper method that helps to sanitize the given expression ID and removes all invalid characters.
	//
	// Valid expression ID regexp is the following: ^[a-z][a-zA-Z0-9_]*$
	// As this is just to validate a suffix and not the whole ID, we do not have to verify the first lower case letter.
	// Experimental.
	SanitizeMetricExpressionIdSuffix(expressionId *string) *string
	// Creates a metric math expression that computes a rate from a regular metric.
	//
	// For example, it allows you to compute rate per second (TPS), per minute, or just an average of your transactions.
	// Experimental.
	ToRate(metric interface{}, method RateComputationMethod, addStatsToLabel *bool, expressionId *string, fillWithZeroes *bool) interface{}
}

// The jsii proxy struct for MetricFactory
type jsiiProxy_MetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_MetricFactory) GlobalDefaults() *MetricFactoryDefaults {
	var returns *MetricFactoryDefaults
	_jsii_.Get(
		j,
		"globalDefaults",
		&returns,
	)
	return returns
}


// Experimental.
func NewMetricFactory(props *MetricFactoryProps) MetricFactory {
	_init_.Initialize()

	j := jsiiProxy_MetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MetricFactory",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewMetricFactory_Override(m MetricFactory, props *MetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MetricFactory",
		[]interface{}{props},
		m,
	)
}

func (m *jsiiProxy_MetricFactory) AdaptMetric(metric interface{}) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"adaptMetric",
		[]interface{}{metric},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) AdaptMetricPreservingPeriod(metric interface{}) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"adaptMetricPreservingPeriod",
		[]interface{}{metric},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) AddAdditionalDimensions(target *map[string]*string, additionalDimensions *map[string]*string) {
	_jsii_.InvokeVoid(
		m,
		"addAdditionalDimensions",
		[]interface{}{target, additionalDimensions},
	)
}

func (m *jsiiProxy_MetricFactory) CreateMetric(metricName *string, statistic MetricStatistic, label *string, dimensionsMap *map[string]*string, color *string, namespace *string, period awscdk.Duration) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"createMetric",
		[]interface{}{metricName, statistic, label, dimensionsMap, color, namespace, period},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) CreateMetricAnomalyDetection(metric awscloudwatch.IMetric, stdev *float64, label *string, color *string, expressionId *string, period awscdk.Duration) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"createMetricAnomalyDetection",
		[]interface{}{metric, stdev, label, color, expressionId, period},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) CreateMetricMath(expression *string, usingMetrics *map[string]awscloudwatch.IMetric, label *string, color *string, period awscdk.Duration) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"createMetricMath",
		[]interface{}{expression, usingMetrics, label, color, period},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) CreateMetricSearch(query *string, dimensionsMap *map[string]*string, statistic MetricStatistic, namespace *string, label *string, period awscdk.Duration) awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric

	_jsii_.Invoke(
		m,
		"createMetricSearch",
		[]interface{}{query, dimensionsMap, statistic, namespace, label, period},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) DivideMetric(metric interface{}, divisor *float64, label *string, expressionId *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"divideMetric",
		[]interface{}{metric, divisor, label, expressionId},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) GetNamespaceWithFallback(value *string) *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"getNamespaceWithFallback",
		[]interface{}{value},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) MultiplyMetric(metric interface{}, multiplier *float64, label *string, expressionId *string) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"multiplyMetric",
		[]interface{}{metric, multiplier, label, expressionId},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) SanitizeMetricExpressionIdSuffix(expressionId *string) *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"sanitizeMetricExpressionIdSuffix",
		[]interface{}{expressionId},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MetricFactory) ToRate(metric interface{}, method RateComputationMethod, addStatsToLabel *bool, expressionId *string, fillWithZeroes *bool) interface{} {
	var returns interface{}

	_jsii_.Invoke(
		m,
		"toRate",
		[]interface{}{metric, method, addStatsToLabel, expressionId, fillWithZeroes},
		&returns,
	)

	return returns
}

// These are the globals used for each metric, unless there is some kind of override.
// Experimental.
type MetricFactoryDefaults struct {
	// Each metric exists in a namespace.
	//
	// AWS Services have their own namespace, but here you can specify your custom one.
	// Experimental.
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	// Metric period.
	//
	// Default value is used if not defined.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
}

// Experimental.
type MetricFactoryProps struct {
	// Allows you to specify the global defaults, which can be overridden in the individual metrics or alarms.
	// Experimental.
	GlobalDefaults *MetricFactoryDefaults `field:"optional" json:"globalDefaults" yaml:"globalDefaults"`
}

// Metric aggregation statistic to be used with the IMetric objects.
// See: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html
//
// Experimental.
type MetricStatistic string

const (
	// 50th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P50 MetricStatistic = "P50"
	// 70th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P70 MetricStatistic = "P70"
	// 90th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P90 MetricStatistic = "P90"
	// 95th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P95 MetricStatistic = "P95"
	// 99th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P99 MetricStatistic = "P99"
	// 99.9th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P999 MetricStatistic = "P999"
	// 99.99th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P9999 MetricStatistic = "P9999"
	// 100th percentile of all datapoints.
	// Experimental.
	MetricStatistic_P100 MetricStatistic = "P100"
	// trimmed mean;
	//
	// calculates the average after removing the 50% of data points with the highest values.
	// Experimental.
	MetricStatistic_TM50 MetricStatistic = "TM50"
	// trimmed mean;
	//
	// calculates the average after removing the 30% of data points with the highest values.
	// Experimental.
	MetricStatistic_TM70 MetricStatistic = "TM70"
	// trimmed mean;
	//
	// calculates the average after removing the 10% of data points with the highest values.
	// Experimental.
	MetricStatistic_TM90 MetricStatistic = "TM90"
	// trimmed mean;
	//
	// calculates the average after removing the 5% of data points with the highest values.
	// Experimental.
	MetricStatistic_TM95 MetricStatistic = "TM95"
	// trimmed mean;
	//
	// calculates the average after removing the 1% of data points with the highest values.
	// Experimental.
	MetricStatistic_TM99 MetricStatistic = "TM99"
	// trimmed mean;
	//
	// calculates the average after removing the 0.1% of data points with the highest values
	// Experimental.
	MetricStatistic_TM999 MetricStatistic = "TM999"
	// trimmed mean;
	//
	// calculates the average after removing the 0.01% of data points with the highest values
	// Experimental.
	MetricStatistic_TM9999 MetricStatistic = "TM9999"
	// trimmed mean;
	//
	// calculates the average after removing the 1% lowest data points and the 1% highest data points.
	// Experimental.
	MetricStatistic_TM99_BOTH MetricStatistic = "TM99_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 5% lowest data points and the 5% highest data points.
	// Experimental.
	MetricStatistic_TM95_BOTH MetricStatistic = "TM95_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 10% lowest data points and the 10% highest data points.
	// Experimental.
	MetricStatistic_TM90_BOTH MetricStatistic = "TM90_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 15% lowest data points and the 15% highest data points.
	// Experimental.
	MetricStatistic_TM85_BOTH MetricStatistic = "TM85_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 20% lowest data points and the 20% highest data points.
	// Experimental.
	MetricStatistic_TM80_BOTH MetricStatistic = "TM80_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 25% lowest data points and the 25% highest data points.
	// Experimental.
	MetricStatistic_TM75_BOTH MetricStatistic = "TM75_BOTH"
	// trimmed mean;
	//
	// calculates the average after removing the 30% lowest data points and the 30% highest data points.
	// Experimental.
	MetricStatistic_TM70_BOTH MetricStatistic = "TM70_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the 50% of the highest values to be equal to the value at the 50th percentile.
	// Experimental.
	MetricStatistic_WM50 MetricStatistic = "WM50"
	// winsorized mean;
	//
	// calculates the average while treating the 30% of the highest values to be equal to the value at the 70th percentile.
	// Experimental.
	MetricStatistic_WM70 MetricStatistic = "WM70"
	// winsorized mean;
	//
	// calculates the average while treating the 10% of the highest values to be equal to the value at the 90th percentile.
	// Experimental.
	MetricStatistic_WM90 MetricStatistic = "WM90"
	// winsorized mean;
	//
	// calculates the average while treating the 5% of the highest values to be equal to the value at the 95th percentile.
	// Experimental.
	MetricStatistic_WM95 MetricStatistic = "WM95"
	// winsorized mean;
	//
	// calculates the average while treating the 1% of the highest values to be equal to the value at the 99th percentile.
	// Experimental.
	MetricStatistic_WM99 MetricStatistic = "WM99"
	// winsorized mean;
	//
	// calculates the average while treating the 0.1% of the highest values to be equal to the value at the 99.9th percentile
	// Experimental.
	MetricStatistic_WM999 MetricStatistic = "WM999"
	// winsorized mean;
	//
	// calculates the average while treating the 0.01% of the highest values to be equal to the value at the 99.99th percentile
	// Experimental.
	MetricStatistic_WM9999 MetricStatistic = "WM9999"
	// winsorized mean;
	//
	// calculates the average while treating the highest 1% of data points to be the value of the 99% boundary, and treating the lowest 1% of data points to be the value of the 1% boundary.
	// Experimental.
	MetricStatistic_WM99_BOTH MetricStatistic = "WM99_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 5% of data points to be the value of the 95% boundary, and treating the lowest 5% of data points to be the value of the 5% boundary.
	// Experimental.
	MetricStatistic_WM95_BOTH MetricStatistic = "WM95_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 10% of data points to be the value of the 90% boundary, and treating the lowest 10% of data points to be the value of the 10% boundary.
	// Experimental.
	MetricStatistic_WM90_BOTH MetricStatistic = "WM90_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 15% of data points to be the value of the 85% boundary, and treating the lowest 15% of data points to be the value of the 15% boundary.
	// Experimental.
	MetricStatistic_WM85_BOTH MetricStatistic = "WM85_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 20% of data points to be the value of the 80% boundary, and treating the lowest 20% of data points to be the value of the 20% boundary.
	// Experimental.
	MetricStatistic_WM80_BOTH MetricStatistic = "WM80_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 25% of data points to be the value of the 75% boundary, and treating the lowest 25% of data points to be the value of the 25% boundary.
	// Experimental.
	MetricStatistic_WM75_BOTH MetricStatistic = "WM75_BOTH"
	// winsorized mean;
	//
	// calculates the average while treating the highest 30% of data points to be the value of the 70% boundary, and treating the lowest 30% of data points to be the value of the 30% boundary.
	// Experimental.
	MetricStatistic_WM70_BOTH MetricStatistic = "WM70_BOTH"
	// minimum of all datapoints.
	// Experimental.
	MetricStatistic_MIN MetricStatistic = "MIN"
	// maximum of all datapoints.
	// Experimental.
	MetricStatistic_MAX MetricStatistic = "MAX"
	// sum of all datapoints.
	// Experimental.
	MetricStatistic_SUM MetricStatistic = "SUM"
	// average of all datapoints.
	// Experimental.
	MetricStatistic_AVERAGE MetricStatistic = "AVERAGE"
	// number of datapoints.
	// Experimental.
	MetricStatistic_N MetricStatistic = "N"
)

// Experimental.
type MinFreeableMemoryThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinFreeableMemoryInBytes *float64 `field:"required" json:"minFreeableMemoryInBytes" yaml:"minFreeableMemoryInBytes"`
}

// Experimental.
type MinIncomingMessagesCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinIncomingMessagesCount *float64 `field:"required" json:"minIncomingMessagesCount" yaml:"minIncomingMessagesCount"`
}

// Experimental.
type MinMessageCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinMessageCount *float64 `field:"required" json:"minMessageCount" yaml:"minMessageCount"`
}

// Experimental.
type MinProcessedBytesThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Threshold for the least number of bytes processed.
	// Experimental.
	MinProcessedBytes *float64 `field:"required" json:"minProcessedBytes" yaml:"minProcessedBytes"`
}

// Experimental.
type MinRunningTaskCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinRunningTasks *float64 `field:"required" json:"minRunningTasks" yaml:"minRunningTasks"`
}

// An independent unit of monitoring.
//
// This is the base for all monitoring classes with alarm support.
// Experimental.
type Monitoring interface {
	IDashboardSegment
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for Monitoring
type jsiiProxy_Monitoring struct {
	jsiiProxy_IDashboardSegment
}

func (j *jsiiProxy_Monitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Monitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Monitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}


// Experimental.
func NewMonitoring_Override(m Monitoring, scope MonitoringScope, props *BaseMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.Monitoring",
		[]interface{}{scope, props},
		m,
	)
}

func (m *jsiiProxy_Monitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		m,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (m *jsiiProxy_Monitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		m,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		m,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		m,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		m,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		m,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		m,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_Monitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		m,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// A CDK aspect that adds support for monitoring all resources within scope.
// Experimental.
type MonitoringAspect interface {
	awscdk.IAspect
	// All aspects can visit an IConstruct.
	// Experimental.
	Visit(node constructs.IConstruct)
}

// The jsii proxy struct for MonitoringAspect
type jsiiProxy_MonitoringAspect struct {
	internal.Type__awscdkIAspect
}

// Experimental.
func NewMonitoringAspect(monitoringFacade MonitoringFacade, props *MonitoringAspectProps) MonitoringAspect {
	_init_.Initialize()

	j := jsiiProxy_MonitoringAspect{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringAspect",
		[]interface{}{monitoringFacade, props},
		&j,
	)

	return &j
}

// Experimental.
func NewMonitoringAspect_Override(m MonitoringAspect, monitoringFacade MonitoringFacade, props *MonitoringAspectProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringAspect",
		[]interface{}{monitoringFacade, props},
		m,
	)
}

func (m *jsiiProxy_MonitoringAspect) Visit(node constructs.IConstruct) {
	_jsii_.InvokeVoid(
		m,
		"visit",
		[]interface{}{node},
	)
}

// Experimental.
type MonitoringAspectProps struct {
	// Experimental.
	Acm *MonitoringAspectType `field:"optional" json:"acm" yaml:"acm"`
	// Experimental.
	ApiGateway *MonitoringAspectType `field:"optional" json:"apiGateway" yaml:"apiGateway"`
	// Experimental.
	ApiGatewayV2 *MonitoringAspectType `field:"optional" json:"apiGatewayV2" yaml:"apiGatewayV2"`
	// Experimental.
	AppSync *MonitoringAspectType `field:"optional" json:"appSync" yaml:"appSync"`
	// Experimental.
	AutoScalingGroup *MonitoringAspectType `field:"optional" json:"autoScalingGroup" yaml:"autoScalingGroup"`
	// Experimental.
	Billing *MonitoringAspectType `field:"optional" json:"billing" yaml:"billing"`
	// Experimental.
	CloudFront *MonitoringAspectType `field:"optional" json:"cloudFront" yaml:"cloudFront"`
	// Experimental.
	CodeBuild *MonitoringAspectType `field:"optional" json:"codeBuild" yaml:"codeBuild"`
	// Experimental.
	DocumentDb *MonitoringAspectType `field:"optional" json:"documentDb" yaml:"documentDb"`
	// Experimental.
	DynamoDB *MonitoringAspectType `field:"optional" json:"dynamoDB" yaml:"dynamoDB"`
	// Experimental.
	Ec2 *MonitoringAspectType `field:"optional" json:"ec2" yaml:"ec2"`
	// Experimental.
	ElasticCache *MonitoringAspectType `field:"optional" json:"elasticCache" yaml:"elasticCache"`
	// Experimental.
	Glue *MonitoringAspectType `field:"optional" json:"glue" yaml:"glue"`
	// Experimental.
	KinesisDataAnalytics *MonitoringAspectType `field:"optional" json:"kinesisDataAnalytics" yaml:"kinesisDataAnalytics"`
	// Experimental.
	KinesisDataStream *MonitoringAspectType `field:"optional" json:"kinesisDataStream" yaml:"kinesisDataStream"`
	// Experimental.
	KinesisFirehose *MonitoringAspectType `field:"optional" json:"kinesisFirehose" yaml:"kinesisFirehose"`
	// Experimental.
	Lambda *MonitoringAspectType `field:"optional" json:"lambda" yaml:"lambda"`
	// Experimental.
	OpenSearch *MonitoringAspectType `field:"optional" json:"openSearch" yaml:"openSearch"`
	// Experimental.
	Rds *MonitoringAspectType `field:"optional" json:"rds" yaml:"rds"`
	// Experimental.
	Redshift *MonitoringAspectType `field:"optional" json:"redshift" yaml:"redshift"`
	// Experimental.
	S3 *MonitoringAspectType `field:"optional" json:"s3" yaml:"s3"`
	// Experimental.
	SecretsManager *MonitoringAspectType `field:"optional" json:"secretsManager" yaml:"secretsManager"`
	// Experimental.
	Sns *MonitoringAspectType `field:"optional" json:"sns" yaml:"sns"`
	// Experimental.
	Sqs *MonitoringAspectType `field:"optional" json:"sqs" yaml:"sqs"`
	// Experimental.
	StepFunctions *MonitoringAspectType `field:"optional" json:"stepFunctions" yaml:"stepFunctions"`
	// Experimental.
	SyntheticsCanaries *MonitoringAspectType `field:"optional" json:"syntheticsCanaries" yaml:"syntheticsCanaries"`
	// Experimental.
	WebApplicationFirewallAclV2 *MonitoringAspectType `field:"optional" json:"webApplicationFirewallAclV2" yaml:"webApplicationFirewallAclV2"`
}

// Experimental.
type MonitoringAspectType struct {
	// If the monitoring aspect is enabled for this resource.
	// Experimental.
	Enabled *bool `field:"optional" json:"enabled" yaml:"enabled"`
	// The monitoring props for this resource.
	// Experimental.
	Props interface{} `field:"optional" json:"props" yaml:"props"`
}

// Experimental.
type MonitoringDashboardsOverrideProps struct {
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
}

// Experimental.
type MonitoringDashboardsProps struct {
	// Prefix added to each dashboard name.
	//
	// This allows to have all dashboards sorted close to each other and also separate multiple monitoring facades.
	// Experimental.
	DashboardNamePrefix *string `field:"required" json:"dashboardNamePrefix" yaml:"dashboardNamePrefix"`
	// Flag indicating whether the alarm dashboard should be created.
	//
	// This is independent on other create dashboard flags.
	// Experimental.
	CreateAlarmDashboard *bool `field:"optional" json:"createAlarmDashboard" yaml:"createAlarmDashboard"`
	// Flag indicating whether the default dashboard should be created.
	//
	// This is independent on other create dashboard flags.
	// Experimental.
	CreateDashboard *bool `field:"optional" json:"createDashboard" yaml:"createDashboard"`
	// Flag indicating whether the summary dashboard should be created.
	//
	// This is independent on other create dashboard flags.
	// Experimental.
	CreateSummaryDashboard *bool `field:"optional" json:"createSummaryDashboard" yaml:"createSummaryDashboard"`
	// Period override for the detail dashboard (and other auxiliary dashboards).
	// Experimental.
	DetailDashboardPeriodOverride awscloudwatch.PeriodOverride `field:"optional" json:"detailDashboardPeriodOverride" yaml:"detailDashboardPeriodOverride"`
	// Range of the detail dashboard (and other auxiliary dashboards).
	// See: DefaultDetailDashboardRange.
	//
	// Experimental.
	DetailDashboardRange awscdk.Duration `field:"optional" json:"detailDashboardRange" yaml:"detailDashboardRange"`
	// Dashboard rendering preference.
	// Experimental.
	RenderingPreference DashboardRenderingPreference `field:"optional" json:"renderingPreference" yaml:"renderingPreference"`
	// Period override for the summary dashboard.
	// Experimental.
	SummaryDashboardPeriodOverride awscloudwatch.PeriodOverride `field:"optional" json:"summaryDashboardPeriodOverride" yaml:"summaryDashboardPeriodOverride"`
	// Range of the summary dashboard.
	// Experimental.
	SummaryDashboardRange awscdk.Duration `field:"optional" json:"summaryDashboardRange" yaml:"summaryDashboardRange"`
}

// Main entry point to create your monitoring.
// Experimental.
type MonitoringFacade interface {
	MonitoringScope
	// Experimental.
	AlarmFactoryDefaults() *AlarmFactoryDefaults
	// Experimental.
	CreatedSegments() *[]IDashboardSegment
	// Experimental.
	DashboardFactory() IDashboardFactory
	// Experimental.
	MetricFactoryDefaults() *MetricFactoryDefaults
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Experimental.
	AddLargeHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade
	// Experimental.
	AddMediumHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade
	// Experimental.
	AddSegment(segment IDashboardSegment, overrideProps *MonitoringDashboardsOverrideProps) MonitoringFacade
	// Experimental.
	AddSmallHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade
	// Experimental.
	AddWidget(widget awscloudwatch.IWidget, addToSummary *bool, addToAlarm *bool) MonitoringFacade
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Creates a new factory that creates AWS Console URLs.
	// Experimental.
	CreateAwsConsoleUrlFactory() AwsConsoleUrlFactory
	// Finds a subset of created alarms that are marked by a specific disambiguator and creates a composite alarm.
	//
	// This composite alarm is created with an 'OR' condition, so it triggers with any child alarm.
	// NOTE: This composite alarm is not added among other alarms, so it is not returned by createdAlarms() calls.
	// Experimental.
	CreateCompositeAlarmUsingDisambiguator(alarmDisambiguator *string, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm
	// Finds a subset of created alarms that are marked by a specific custom tag and creates a composite alarm.
	//
	// This composite alarm is created with an 'OR' condition, so it triggers with any child alarm.
	// NOTE: This composite alarm is not added among other alarms, so it is not returned by createdAlarms() calls.
	// Experimental.
	CreateCompositeAlarmUsingTag(customTag *string, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm
	// Experimental.
	CreatedAlarmDashboard() awscloudwatch.Dashboard
	// Returns the created alarms across all the monitorings added up until now.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Returns a subset of created alarms that are marked by a specific disambiguator.
	// Experimental.
	CreatedAlarmsWithDisambiguator(disambiguator *string) *[]*AlarmWithAnnotation
	// Returns a subset of created alarms that are marked by a specific custom tag.
	// Experimental.
	CreatedAlarmsWithTag(customTag *string) *[]*AlarmWithAnnotation
	// Experimental.
	CreatedDashboard() awscloudwatch.Dashboard
	// Returns the created monitorings added up until now.
	// Experimental.
	CreatedMonitorings() *[]Monitoring
	// Experimental.
	CreatedSummaryDashboard() awscloudwatch.Dashboard
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	MonitorApiGateway(props *ApiGatewayMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorApiGatewayV2HttpApi(props *ApiGatewayV2HttpApiMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorAppSyncApi(props *AppSyncMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorAutoScalingGroup(props *AutoScalingGroupMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorBilling(props *BillingMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorCertificate(props *CertificateManagerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorCloudFrontDistribution(props *CloudFrontDistributionMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorCodeBuildProject(props *CodeBuildProjectMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorCustom(props *CustomMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorDocumentDbCluster(props *DocumentDbMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorDynamoTable(props *DynamoTableMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorDynamoTableGlobalSecondaryIndex(props *DynamoTableGlobalSecondaryIndexMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorEc2ApplicationLoadBalancer(props *Ec2ApplicationLoadBalancerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorEC2Instances(props *EC2MonitoringProps) MonitoringFacade
	// Experimental.
	MonitorEc2NetworkLoadBalancer(props *Ec2NetworkLoadBalancerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorEc2Service(props *Ec2ServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorElastiCacheCluster(props *ElastiCacheClusterMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorElasticsearchCluster(props *OpenSearchClusterMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorFargateApplicationLoadBalancer(props *FargateApplicationLoadBalancerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorFargateNetworkLoadBalancer(props *FargateNetworkLoadBalancerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorFargateService(props *FargateServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorGlueJob(props *GlueJobMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorKinesisDataAnalytics(props *KinesisDataAnalyticsMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorKinesisDataStream(props *KinesisDataStreamMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorKinesisFirehose(props *KinesisFirehoseMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorLambdaFunction(props *LambdaFunctionMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorLog(props *LogMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorNetworkLoadBalancer(props *NetworkLoadBalancerMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorOpenSearchCluster(props *OpenSearchClusterMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorQueueProcessingEc2Service(props *QueueProcessingEc2ServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorQueueProcessingFargateService(props *QueueProcessingFargateServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorRdsCluster(props *RdsClusterMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorRedshiftCluster(props *RedshiftClusterMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorS3Bucket(props *S3BucketMonitoringProps) MonitoringFacade
	// Monitor all the resources in the given scope.
	// Experimental.
	MonitorScope(scope constructs.Construct, aspectProps *MonitoringAspectProps)
	// Experimental.
	MonitorSecretsManagerSecret(props *SecretsManagerSecretMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSimpleEc2Service(props *SimpleEc2ServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSimpleFargateService(props *SimpleFargateServiceMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSnsTopic(props *SnsTopicMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSqsQueue(props *SqsQueueMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSqsQueueWithDlq(props *SqsQueueMonitoringWithDlqProps) MonitoringFacade
	// Experimental.
	MonitorStepFunction(props *StepFunctionMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorStepFunctionActivity(props *StepFunctionActivityMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorStepFunctionLambdaIntegration(props *StepFunctionLambdaIntegrationMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorStepFunctionServiceIntegration(props *StepFunctionServiceIntegrationMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorSyntheticsCanary(props *SyntheticsCanaryMonitoringProps) MonitoringFacade
	// Experimental.
	MonitorWebApplicationFirewallAclV2(props *WafV2MonitoringProps) MonitoringFacade
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for MonitoringFacade
type jsiiProxy_MonitoringFacade struct {
	jsiiProxy_MonitoringScope
}

func (j *jsiiProxy_MonitoringFacade) AlarmFactoryDefaults() *AlarmFactoryDefaults {
	var returns *AlarmFactoryDefaults
	_jsii_.Get(
		j,
		"alarmFactoryDefaults",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringFacade) CreatedSegments() *[]IDashboardSegment {
	var returns *[]IDashboardSegment
	_jsii_.Get(
		j,
		"createdSegments",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringFacade) DashboardFactory() IDashboardFactory {
	var returns IDashboardFactory
	_jsii_.Get(
		j,
		"dashboardFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringFacade) MetricFactoryDefaults() *MetricFactoryDefaults {
	var returns *MetricFactoryDefaults
	_jsii_.Get(
		j,
		"metricFactoryDefaults",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringFacade) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Experimental.
func NewMonitoringFacade(scope constructs.Construct, id *string, props *MonitoringFacadeProps) MonitoringFacade {
	_init_.Initialize()

	j := jsiiProxy_MonitoringFacade{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringFacade",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewMonitoringFacade_Override(m MonitoringFacade, scope constructs.Construct, id *string, props *MonitoringFacadeProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringFacade",
		[]interface{}{scope, id, props},
		m,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func MonitoringFacade_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.MonitoringFacade",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) AddLargeHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"addLargeHeader",
		[]interface{}{text, addToSummary, addToAlarm},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) AddMediumHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"addMediumHeader",
		[]interface{}{text, addToSummary, addToAlarm},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) AddSegment(segment IDashboardSegment, overrideProps *MonitoringDashboardsOverrideProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"addSegment",
		[]interface{}{segment, overrideProps},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) AddSmallHeader(text *string, addToSummary *bool, addToAlarm *bool) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"addSmallHeader",
		[]interface{}{text, addToSummary, addToAlarm},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) AddWidget(widget awscloudwatch.IWidget, addToSummary *bool, addToAlarm *bool) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"addWidget",
		[]interface{}{widget, addToSummary, addToAlarm},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		m,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateAwsConsoleUrlFactory() AwsConsoleUrlFactory {
	var returns AwsConsoleUrlFactory

	_jsii_.Invoke(
		m,
		"createAwsConsoleUrlFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateCompositeAlarmUsingDisambiguator(alarmDisambiguator *string, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm {
	var returns awscloudwatch.CompositeAlarm

	_jsii_.Invoke(
		m,
		"createCompositeAlarmUsingDisambiguator",
		[]interface{}{alarmDisambiguator, props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateCompositeAlarmUsingTag(customTag *string, props *AddCompositeAlarmProps) awscloudwatch.CompositeAlarm {
	var returns awscloudwatch.CompositeAlarm

	_jsii_.Invoke(
		m,
		"createCompositeAlarmUsingTag",
		[]interface{}{customTag, props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedAlarmDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		m,
		"createdAlarmDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		m,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedAlarmsWithDisambiguator(disambiguator *string) *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		m,
		"createdAlarmsWithDisambiguator",
		[]interface{}{disambiguator},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedAlarmsWithTag(customTag *string) *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		m,
		"createdAlarmsWithTag",
		[]interface{}{customTag},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		m,
		"createdDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedMonitorings() *[]Monitoring {
	var returns *[]Monitoring

	_jsii_.Invoke(
		m,
		"createdMonitorings",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreatedSummaryDashboard() awscloudwatch.Dashboard {
	var returns awscloudwatch.Dashboard

	_jsii_.Invoke(
		m,
		"createdSummaryDashboard",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		m,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		m,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorApiGateway(props *ApiGatewayMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorApiGateway",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorApiGatewayV2HttpApi(props *ApiGatewayV2HttpApiMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorApiGatewayV2HttpApi",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorAppSyncApi(props *AppSyncMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorAppSyncApi",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorAutoScalingGroup(props *AutoScalingGroupMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorAutoScalingGroup",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorBilling(props *BillingMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorBilling",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorCertificate(props *CertificateManagerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorCertificate",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorCloudFrontDistribution(props *CloudFrontDistributionMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorCloudFrontDistribution",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorCodeBuildProject(props *CodeBuildProjectMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorCodeBuildProject",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorCustom(props *CustomMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorCustom",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorDocumentDbCluster(props *DocumentDbMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorDocumentDbCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorDynamoTable(props *DynamoTableMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorDynamoTable",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorDynamoTableGlobalSecondaryIndex(props *DynamoTableGlobalSecondaryIndexMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorDynamoTableGlobalSecondaryIndex",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorEc2ApplicationLoadBalancer(props *Ec2ApplicationLoadBalancerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorEc2ApplicationLoadBalancer",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorEC2Instances(props *EC2MonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorEC2Instances",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorEc2NetworkLoadBalancer(props *Ec2NetworkLoadBalancerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorEc2NetworkLoadBalancer",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorEc2Service(props *Ec2ServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorEc2Service",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorElastiCacheCluster(props *ElastiCacheClusterMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorElastiCacheCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorElasticsearchCluster(props *OpenSearchClusterMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorElasticsearchCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorFargateApplicationLoadBalancer(props *FargateApplicationLoadBalancerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorFargateApplicationLoadBalancer",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorFargateNetworkLoadBalancer(props *FargateNetworkLoadBalancerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorFargateNetworkLoadBalancer",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorFargateService(props *FargateServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorFargateService",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorGlueJob(props *GlueJobMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorGlueJob",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorKinesisDataAnalytics(props *KinesisDataAnalyticsMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorKinesisDataAnalytics",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorKinesisDataStream(props *KinesisDataStreamMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorKinesisDataStream",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorKinesisFirehose(props *KinesisFirehoseMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorKinesisFirehose",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorLambdaFunction(props *LambdaFunctionMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorLambdaFunction",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorLog(props *LogMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorLog",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorNetworkLoadBalancer(props *NetworkLoadBalancerMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorNetworkLoadBalancer",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorOpenSearchCluster(props *OpenSearchClusterMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorOpenSearchCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorQueueProcessingEc2Service(props *QueueProcessingEc2ServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorQueueProcessingEc2Service",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorQueueProcessingFargateService(props *QueueProcessingFargateServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorQueueProcessingFargateService",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorRdsCluster(props *RdsClusterMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorRdsCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorRedshiftCluster(props *RedshiftClusterMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorRedshiftCluster",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorS3Bucket(props *S3BucketMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorS3Bucket",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorScope(scope constructs.Construct, aspectProps *MonitoringAspectProps) {
	_jsii_.InvokeVoid(
		m,
		"monitorScope",
		[]interface{}{scope, aspectProps},
	)
}

func (m *jsiiProxy_MonitoringFacade) MonitorSecretsManagerSecret(props *SecretsManagerSecretMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSecretsManagerSecret",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSimpleEc2Service(props *SimpleEc2ServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSimpleEc2Service",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSimpleFargateService(props *SimpleFargateServiceMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSimpleFargateService",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSnsTopic(props *SnsTopicMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSnsTopic",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSqsQueue(props *SqsQueueMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSqsQueue",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSqsQueueWithDlq(props *SqsQueueMonitoringWithDlqProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSqsQueueWithDlq",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorStepFunction(props *StepFunctionMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorStepFunction",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorStepFunctionActivity(props *StepFunctionActivityMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorStepFunctionActivity",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorStepFunctionLambdaIntegration(props *StepFunctionLambdaIntegrationMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorStepFunctionLambdaIntegration",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorStepFunctionServiceIntegration(props *StepFunctionServiceIntegrationMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorStepFunctionServiceIntegration",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorSyntheticsCanary(props *SyntheticsCanaryMonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorSyntheticsCanary",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) MonitorWebApplicationFirewallAclV2(props *WafV2MonitoringProps) MonitoringFacade {
	var returns MonitoringFacade

	_jsii_.Invoke(
		m,
		"monitorWebApplicationFirewallAclV2",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringFacade) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type MonitoringFacadeProps struct {
	// Defaults for alarm factory.
	// Experimental.
	AlarmFactoryDefaults *AlarmFactoryDefaults `field:"optional" json:"alarmFactoryDefaults" yaml:"alarmFactoryDefaults"`
	// Defaults for dashboard factory.
	// Experimental.
	DashboardFactory IDashboardFactory `field:"optional" json:"dashboardFactory" yaml:"dashboardFactory"`
	// Defaults for metric factory.
	// Experimental.
	MetricFactoryDefaults *MetricFactoryDefaults `field:"optional" json:"metricFactoryDefaults" yaml:"metricFactoryDefaults"`
}

// Experimental.
type MonitoringHeaderWidget interface {
	HeaderWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for MonitoringHeaderWidget
type jsiiProxy_MonitoringHeaderWidget struct {
	jsiiProxy_HeaderWidget
}

func (j *jsiiProxy_MonitoringHeaderWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringHeaderWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringHeaderWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_MonitoringHeaderWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewMonitoringHeaderWidget(props *MonitoringHeaderWidgetProps) MonitoringHeaderWidget {
	_init_.Initialize()

	j := jsiiProxy_MonitoringHeaderWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringHeaderWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewMonitoringHeaderWidget_Override(m MonitoringHeaderWidget, props *MonitoringHeaderWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringHeaderWidget",
		[]interface{}{props},
		m,
	)
}

func (j *jsiiProxy_MonitoringHeaderWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_MonitoringHeaderWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (m *jsiiProxy_MonitoringHeaderWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		m,
		"position",
		[]interface{}{x, y},
	)
}

func (m *jsiiProxy_MonitoringHeaderWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		m,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type MonitoringHeaderWidgetProps struct {
	// Experimental.
	Title *string `field:"required" json:"title" yaml:"title"`
	// Experimental.
	Family *string `field:"optional" json:"family" yaml:"family"`
	// Experimental.
	GoToLinkUrl *string `field:"optional" json:"goToLinkUrl" yaml:"goToLinkUrl"`
}

// Utility class to unify approach to naming monitoring sections.
// See: https://docs.aws.amazon.com/cdk/latest/guide/tokens.html#tokens_lazy
//
// Experimental.
type MonitoringNamingStrategy interface {
	// Experimental.
	Input() *NameResolutionInput
	// Experimental.
	ResolveAlarmFriendlyName() *string
	// Experimental.
	ResolveHumanReadableName() *string
}

// The jsii proxy struct for MonitoringNamingStrategy
type jsiiProxy_MonitoringNamingStrategy struct {
	_ byte // padding
}

func (j *jsiiProxy_MonitoringNamingStrategy) Input() *NameResolutionInput {
	var returns *NameResolutionInput
	_jsii_.Get(
		j,
		"input",
		&returns,
	)
	return returns
}


// Experimental.
func NewMonitoringNamingStrategy(input *NameResolutionInput) MonitoringNamingStrategy {
	_init_.Initialize()

	j := jsiiProxy_MonitoringNamingStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringNamingStrategy",
		[]interface{}{input},
		&j,
	)

	return &j
}

// Experimental.
func NewMonitoringNamingStrategy_Override(m MonitoringNamingStrategy, input *NameResolutionInput) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringNamingStrategy",
		[]interface{}{input},
		m,
	)
}

// Experimental.
func MonitoringNamingStrategy_IsAlarmFriendly(str *string) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.MonitoringNamingStrategy",
		"isAlarmFriendly",
		[]interface{}{str},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringNamingStrategy) ResolveAlarmFriendlyName() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"resolveAlarmFriendlyName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringNamingStrategy) ResolveHumanReadableName() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"resolveHumanReadableName",
		nil, // no parameters
		&returns,
	)

	return returns
}

// A scope (construct) where all monitoring constructs are living in.
// Experimental.
type MonitoringScope interface {
	constructs.Construct
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Creates a new factory that creates AWS Console URLs.
	// Experimental.
	CreateAwsConsoleUrlFactory() AwsConsoleUrlFactory
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for MonitoringScope
type jsiiProxy_MonitoringScope struct {
	internal.Type__constructsConstruct
}

func (j *jsiiProxy_MonitoringScope) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Creates a new construct node.
// Experimental.
func NewMonitoringScope_Override(m MonitoringScope, scope constructs.Construct, id *string) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MonitoringScope",
		[]interface{}{scope, id},
		m,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func MonitoringScope_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.MonitoringScope",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringScope) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		m,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringScope) CreateAwsConsoleUrlFactory() AwsConsoleUrlFactory {
	var returns AwsConsoleUrlFactory

	_jsii_.Invoke(
		m,
		"createAwsConsoleUrlFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringScope) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		m,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringScope) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		m,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (m *jsiiProxy_MonitoringScope) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		m,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Alarm action strategy that combines multiple actions in the same order as they were given.
// Experimental.
type MultipleAlarmActionStrategy interface {
	IAlarmActionStrategy
	// Experimental.
	Actions() *[]IAlarmActionStrategy
	// Experimental.
	AddAlarmActions(props *AlarmActionStrategyProps)
}

// The jsii proxy struct for MultipleAlarmActionStrategy
type jsiiProxy_MultipleAlarmActionStrategy struct {
	jsiiProxy_IAlarmActionStrategy
}

func (j *jsiiProxy_MultipleAlarmActionStrategy) Actions() *[]IAlarmActionStrategy {
	var returns *[]IAlarmActionStrategy
	_jsii_.Get(
		j,
		"actions",
		&returns,
	)
	return returns
}


// Experimental.
func NewMultipleAlarmActionStrategy(actions *[]IAlarmActionStrategy) MultipleAlarmActionStrategy {
	_init_.Initialize()

	j := jsiiProxy_MultipleAlarmActionStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.MultipleAlarmActionStrategy",
		[]interface{}{actions},
		&j,
	)

	return &j
}

// Experimental.
func NewMultipleAlarmActionStrategy_Override(m MultipleAlarmActionStrategy, actions *[]IAlarmActionStrategy) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.MultipleAlarmActionStrategy",
		[]interface{}{actions},
		m,
	)
}

func (m *jsiiProxy_MultipleAlarmActionStrategy) AddAlarmActions(props *AlarmActionStrategyProps) {
	_jsii_.InvokeVoid(
		m,
		"addAlarmActions",
		[]interface{}{props},
	)
}

// Experimental.
type NameResolutionInput struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Fallback name before we fallback to extracting name from the construct itself.
	//
	// This might be some construct reference, such is cluster ID, stream name, and so on.
	// Experimental.
	FallbackConstructName *string `field:"optional" json:"fallbackConstructName" yaml:"fallbackConstructName"`
	// Construct that this naming strategy is naming.
	//
	// It is used as a last resort for naming.
	// Experimental.
	NamedConstruct constructs.IConstruct `field:"optional" json:"namedConstruct" yaml:"namedConstruct"`
}

// Metric factory to create metrics for network load-balanced service.
// Experimental.
type NetworkLoadBalancerMetricFactory interface {
	ILoadBalancerMetricFactory
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	NetworkLoadBalancer() awselasticloadbalancingv2.NetworkLoadBalancer
	// Experimental.
	NetworkTargetGroup() awselasticloadbalancingv2.NetworkTargetGroup
	// Experimental.
	MetricActiveConnectionCount() interface{}
	// Experimental.
	MetricHealthyTaskCount() interface{}
	// Experimental.
	MetricHealthyTaskInPercent() interface{}
	// Experimental.
	MetricNewConnectionCount() interface{}
	// Experimental.
	MetricProcessedBytesMin() interface{}
	// Experimental.
	MetricUnhealthyTaskCount() interface{}
}

// The jsii proxy struct for NetworkLoadBalancerMetricFactory
type jsiiProxy_NetworkLoadBalancerMetricFactory struct {
	jsiiProxy_ILoadBalancerMetricFactory
}

func (j *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMetricFactory) NetworkLoadBalancer() awselasticloadbalancingv2.NetworkLoadBalancer {
	var returns awselasticloadbalancingv2.NetworkLoadBalancer
	_jsii_.Get(
		j,
		"networkLoadBalancer",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMetricFactory) NetworkTargetGroup() awselasticloadbalancingv2.NetworkTargetGroup {
	var returns awselasticloadbalancingv2.NetworkTargetGroup
	_jsii_.Get(
		j,
		"networkTargetGroup",
		&returns,
	)
	return returns
}


// Experimental.
func NewNetworkLoadBalancerMetricFactory(metricFactory MetricFactory, props *NetworkLoadBalancerMetricFactoryProps) NetworkLoadBalancerMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_NetworkLoadBalancerMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.NetworkLoadBalancerMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewNetworkLoadBalancerMetricFactory_Override(n NetworkLoadBalancerMetricFactory, metricFactory MetricFactory, props *NetworkLoadBalancerMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.NetworkLoadBalancerMetricFactory",
		[]interface{}{metricFactory, props},
		n,
	)
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricActiveConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricActiveConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricHealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricHealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricHealthyTaskInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricHealthyTaskInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricNewConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricNewConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricProcessedBytesMin() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricProcessedBytesMin",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMetricFactory) MetricUnhealthyTaskCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		n,
		"metricUnhealthyTaskCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Props to create NetworkLoadBalancerMetricFactory.
// Experimental.
type NetworkLoadBalancerMetricFactoryProps struct {
	// Experimental.
	NetworkLoadBalancer awselasticloadbalancingv2.NetworkLoadBalancer `field:"required" json:"networkLoadBalancer" yaml:"networkLoadBalancer"`
	// Experimental.
	NetworkTargetGroup awselasticloadbalancingv2.NetworkTargetGroup `field:"required" json:"networkTargetGroup" yaml:"networkTargetGroup"`
}

// Experimental.
type NetworkLoadBalancerMonitoring interface {
	Monitoring
	// Experimental.
	ActiveTcpFlowCountMetric() interface{}
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	HealthyTaskCountMetric() interface{}
	// Experimental.
	HealthyTaskPercentMetric() interface{}
	// Experimental.
	HumanReadableName() *string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MetricFactory() NetworkLoadBalancerMetricFactory
	// Experimental.
	NewTcpFlowCountMetric() interface{}
	// Experimental.
	ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ProcessedBytesMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TaskHealthAlarmFactory() TaskHealthAlarmFactory
	// Experimental.
	TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ThroughputAlarmFactory() ThroughputAlarmFactory
	// Experimental.
	UnhealthyTaskCountMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTcpFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for NetworkLoadBalancerMonitoring
type jsiiProxy_NetworkLoadBalancerMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) ActiveTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"activeTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) HealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) HealthyTaskPercentMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"healthyTaskPercentMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) HumanReadableName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"humanReadableName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) MetricFactory() NetworkLoadBalancerMetricFactory {
	var returns NetworkLoadBalancerMetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) NewTcpFlowCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"newTcpFlowCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) ProcessedBytesAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"processedBytesAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) ProcessedBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"processedBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) TaskHealthAlarmFactory() TaskHealthAlarmFactory {
	var returns TaskHealthAlarmFactory
	_jsii_.Get(
		j,
		"taskHealthAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) TaskHealthAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"taskHealthAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) ThroughputAlarmFactory() ThroughputAlarmFactory {
	var returns ThroughputAlarmFactory
	_jsii_.Get(
		j,
		"throughputAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NetworkLoadBalancerMonitoring) UnhealthyTaskCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"unhealthyTaskCountMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewNetworkLoadBalancerMonitoring(scope MonitoringScope, props *NetworkLoadBalancerMonitoringProps) NetworkLoadBalancerMonitoring {
	_init_.Initialize()

	j := jsiiProxy_NetworkLoadBalancerMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.NetworkLoadBalancerMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewNetworkLoadBalancerMonitoring_Override(n NetworkLoadBalancerMonitoring, scope MonitoringScope, props *NetworkLoadBalancerMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.NetworkLoadBalancerMonitoring",
		[]interface{}{scope, props},
		n,
	)
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		n,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		n,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		n,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		n,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		n,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateTaskHealthWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		n,
		"createTaskHealthWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateTcpFlowsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		n,
		"createTcpFlowsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		n,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		n,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		n,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NetworkLoadBalancerMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		n,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type NetworkLoadBalancerMonitoringProps struct {
	// Experimental.
	NetworkLoadBalancer awselasticloadbalancingv2.NetworkLoadBalancer `field:"required" json:"networkLoadBalancer" yaml:"networkLoadBalancer"`
	// Experimental.
	NetworkTargetGroup awselasticloadbalancingv2.NetworkTargetGroup `field:"required" json:"networkTargetGroup" yaml:"networkTargetGroup"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddHealthyTaskCountAlarm *map[string]*HealthyTaskCountThreshold `field:"optional" json:"addHealthyTaskCountAlarm" yaml:"addHealthyTaskCountAlarm"`
	// Experimental.
	AddHealthyTaskPercentAlarm *map[string]*HealthyTaskPercentThreshold `field:"optional" json:"addHealthyTaskPercentAlarm" yaml:"addHealthyTaskPercentAlarm"`
	// Experimental.
	AddMinProcessedBytesAlarm *map[string]*MinProcessedBytesThreshold `field:"optional" json:"addMinProcessedBytesAlarm" yaml:"addMinProcessedBytesAlarm"`
	// Experimental.
	AddUnhealthyTaskCountAlarm *map[string]*UnhealthyTaskCountThreshold `field:"optional" json:"addUnhealthyTaskCountAlarm" yaml:"addUnhealthyTaskCountAlarm"`
}

// Alarm action strategy that does not add any actions.
// Experimental.
type NoopAlarmActionStrategy interface {
	IAlarmActionStrategy
	// Experimental.
	AddAlarmActions(_props *AlarmActionStrategyProps)
}

// The jsii proxy struct for NoopAlarmActionStrategy
type jsiiProxy_NoopAlarmActionStrategy struct {
	jsiiProxy_IAlarmActionStrategy
}

// Experimental.
func NewNoopAlarmActionStrategy() NoopAlarmActionStrategy {
	_init_.Initialize()

	j := jsiiProxy_NoopAlarmActionStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.NoopAlarmActionStrategy",
		nil, // no parameters
		&j,
	)

	return &j
}

// Experimental.
func NewNoopAlarmActionStrategy_Override(n NoopAlarmActionStrategy) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.NoopAlarmActionStrategy",
		nil, // no parameters
		n,
	)
}

func (n *jsiiProxy_NoopAlarmActionStrategy) AddAlarmActions(_props *AlarmActionStrategyProps) {
	_jsii_.InvokeVoid(
		n,
		"addAlarmActions",
		[]interface{}{_props},
	)
}

// Experimental.
type NotificationsFailedThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxNotificationsFailedCount *float64 `field:"required" json:"maxNotificationsFailedCount" yaml:"maxNotificationsFailedCount"`
}

// Backported set of metric functions added in @aws-cdk/aws-elasticsearch@1.65.0.
// See: https://github.com/aws/aws-cdk/releases/tag/v1.73.0
//
// Experimental.
type OpenSearchBackportedMetrics interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Return the given named metric for this Domain.
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for automated snapshot failures.
	// Experimental.
	MetricAutomatedSnapshotFailure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the cluster blocking index writes.
	// Deprecated: use metricClusterIndexWritesBlocked instead.
	MetricClusterIndexWriteBlocked(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the cluster blocking index writes.
	// Experimental.
	MetricClusterIndexWritesBlocked(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the time the cluster status is red.
	// Experimental.
	MetricClusterStatusRed(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the time the cluster status is yellow.
	// Experimental.
	MetricClusterStatusYellow(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for CPU utilization.
	// Experimental.
	MetricCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the storage space of nodes in the cluster.
	// Experimental.
	MetricFreeStorageSpace(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for indexing latency.
	// Experimental.
	MetricIndexingLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for JVM memory pressure.
	// Experimental.
	MetricJVMMemoryPressure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for KMS key errors.
	// Experimental.
	MetricKMSKeyError(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for KMS key being inaccessible.
	// Experimental.
	MetricKMSKeyInaccessible(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for master CPU utilization.
	// Experimental.
	MetricMasterCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for master JVM memory pressure.
	// Experimental.
	MetricMasterJVMMemoryPressure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the number of nodes.
	// Experimental.
	MetricNodes(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for number of searchable documents.
	// Experimental.
	MetricSearchableDocuments(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for search latency.
	// Experimental.
	MetricSearchLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
}

// The jsii proxy struct for OpenSearchBackportedMetrics
type jsiiProxy_OpenSearchBackportedMetrics struct {
	_ byte // padding
}

func (j *jsiiProxy_OpenSearchBackportedMetrics) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}


// Experimental.
func NewOpenSearchBackportedMetrics(domain interface{}) OpenSearchBackportedMetrics {
	_init_.Initialize()

	j := jsiiProxy_OpenSearchBackportedMetrics{}

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchBackportedMetrics",
		[]interface{}{domain},
		&j,
	)

	return &j
}

// Experimental.
func NewOpenSearchBackportedMetrics_Override(o OpenSearchBackportedMetrics, domain interface{}) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchBackportedMetrics",
		[]interface{}{domain},
		o,
	)
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricAutomatedSnapshotFailure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricAutomatedSnapshotFailure",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricClusterIndexWriteBlocked(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricClusterIndexWriteBlocked",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricClusterIndexWritesBlocked(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricClusterIndexWritesBlocked",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricClusterStatusRed(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricClusterStatusRed",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricClusterStatusYellow(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricClusterStatusYellow",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricCPUUtilization",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricFreeStorageSpace(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricFreeStorageSpace",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricIndexingLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricIndexingLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricJVMMemoryPressure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricJVMMemoryPressure",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricKMSKeyError(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricKMSKeyError",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricKMSKeyInaccessible(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricKMSKeyInaccessible",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricMasterCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricMasterCPUUtilization",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricMasterJVMMemoryPressure(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricMasterJVMMemoryPressure",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricNodes(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricNodes",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricSearchableDocuments(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricSearchableDocuments",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchBackportedMetrics) MetricSearchLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricSearchLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Experimental.
type OpenSearchClusterAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddAutomatedSnapshotFailureAlarm(metric interface{}, props *OpenSearchClusterAutomatedSnapshotFailureThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddClusterIndexWritesBlockedAlarm(metric interface{}, props *OpenSearchClusterIndexWritesBlockedThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddClusterNodeCountAlarm(metric interface{}, props *OpenSearchClusterNodesThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddClusterStatusAlarm(metric interface{}, props *OpenSearchClusterStatusCustomization, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddKmsKeyErrorAlarm(metric interface{}, props *OpenSearchKmsKeyErrorThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddKmsKeyInaccessibleAlarm(metric interface{}, props *OpenSearchKmsKeyInaccessibleThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for OpenSearchClusterAlarmFactory
type jsiiProxy_OpenSearchClusterAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_OpenSearchClusterAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewOpenSearchClusterAlarmFactory(alarmFactory AlarmFactory) OpenSearchClusterAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_OpenSearchClusterAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewOpenSearchClusterAlarmFactory_Override(o OpenSearchClusterAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterAlarmFactory",
		[]interface{}{alarmFactory},
		o,
	)
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddAutomatedSnapshotFailureAlarm(metric interface{}, props *OpenSearchClusterAutomatedSnapshotFailureThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addAutomatedSnapshotFailureAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddClusterIndexWritesBlockedAlarm(metric interface{}, props *OpenSearchClusterIndexWritesBlockedThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addClusterIndexWritesBlockedAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddClusterNodeCountAlarm(metric interface{}, props *OpenSearchClusterNodesThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addClusterNodeCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddClusterStatusAlarm(metric interface{}, props *OpenSearchClusterStatusCustomization, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addClusterStatusAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddKmsKeyErrorAlarm(metric interface{}, props *OpenSearchKmsKeyErrorThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addKmsKeyErrorAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterAlarmFactory) AddKmsKeyInaccessibleAlarm(metric interface{}, props *OpenSearchKmsKeyInaccessibleThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"addKmsKeyInaccessibleAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type OpenSearchClusterAutomatedSnapshotFailureThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxFailures *float64 `field:"required" json:"maxFailures" yaml:"maxFailures"`
}

// Experimental.
type OpenSearchClusterIndexWritesBlockedThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxBlockedWrites *float64 `field:"required" json:"maxBlockedWrites" yaml:"maxBlockedWrites"`
}

// Experimental.
type OpenSearchClusterMetricFactory interface {
	// Experimental.
	DomainMetrics() OpenSearchBackportedMetrics
	// Experimental.
	FillTpsWithZeroes() *bool
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricAutomatedSnapshotFailure() interface{}
	// Deprecated: use metricClusterIndexWritesBlocked instead.
	MetricClusterIndexWriteBlocked() interface{}
	// Experimental.
	MetricClusterIndexWritesBlocked() interface{}
	// Experimental.
	MetricClusterStatusRed() interface{}
	// Experimental.
	MetricClusterStatusYellow() interface{}
	// Experimental.
	MetricCpuUsage() interface{}
	// Experimental.
	MetricDiskSpaceUsageInPercent() interface{}
	// Experimental.
	MetricIndexingLatencyP50InMillis() interface{}
	// Experimental.
	MetricIndexingLatencyP90InMillis() interface{}
	// Experimental.
	MetricIndexingLatencyP99InMillis() interface{}
	// Experimental.
	MetricJvmMemoryPressure() interface{}
	// Experimental.
	MetricKmsKeyError() interface{}
	// Experimental.
	MetricKmsKeyInaccessible() interface{}
	// Experimental.
	MetricMasterCpuUsage() interface{}
	// Experimental.
	MetricMasterJvmMemoryPressure() interface{}
	// Experimental.
	MetricNodes() interface{}
	// Experimental.
	MetricSearchCount() awscloudwatch.Metric
	// Experimental.
	MetricSearchLatencyP50InMillis() interface{}
	// Experimental.
	MetricSearchLatencyP90InMillis() interface{}
	// Experimental.
	MetricSearchLatencyP99InMillis() interface{}
	// Experimental.
	MetricSearchRate() interface{}
	// Deprecated: use metricSearchRate.
	MetricTps() interface{}
}

// The jsii proxy struct for OpenSearchClusterMetricFactory
type jsiiProxy_OpenSearchClusterMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_OpenSearchClusterMetricFactory) DomainMetrics() OpenSearchBackportedMetrics {
	var returns OpenSearchBackportedMetrics
	_jsii_.Get(
		j,
		"domainMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMetricFactory) FillTpsWithZeroes() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"fillTpsWithZeroes",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewOpenSearchClusterMetricFactory(metricFactory MetricFactory, props *OpenSearchClusterMetricFactoryProps) OpenSearchClusterMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_OpenSearchClusterMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewOpenSearchClusterMetricFactory_Override(o OpenSearchClusterMetricFactory, metricFactory MetricFactory, props *OpenSearchClusterMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterMetricFactory",
		[]interface{}{metricFactory, props},
		o,
	)
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricAutomatedSnapshotFailure() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricAutomatedSnapshotFailure",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricClusterIndexWriteBlocked() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricClusterIndexWriteBlocked",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricClusterIndexWritesBlocked() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricClusterIndexWritesBlocked",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricClusterStatusRed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricClusterStatusRed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricClusterStatusYellow() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricClusterStatusYellow",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricCpuUsage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricCpuUsage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricDiskSpaceUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricDiskSpaceUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricIndexingLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricIndexingLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricIndexingLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricIndexingLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricIndexingLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricIndexingLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricJvmMemoryPressure() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricJvmMemoryPressure",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricKmsKeyError() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricKmsKeyError",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricKmsKeyInaccessible() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricKmsKeyInaccessible",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricMasterCpuUsage() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricMasterCpuUsage",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricMasterJvmMemoryPressure() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricMasterJvmMemoryPressure",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricNodes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricNodes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricSearchCount() awscloudwatch.Metric {
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		o,
		"metricSearchCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricSearchLatencyP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricSearchLatencyP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricSearchLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricSearchLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricSearchLatencyP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricSearchLatencyP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricSearchRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricSearchRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMetricFactory) MetricTps() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		o,
		"metricTps",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type OpenSearchClusterMetricFactoryProps struct {
	// Experimental.
	Domain interface{} `field:"required" json:"domain" yaml:"domain"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type OpenSearchClusterMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	AutomatedSnapshotFailureMetric() interface{}
	// Experimental.
	ClusterAlarmFactory() OpenSearchClusterAlarmFactory
	// Experimental.
	ClusterAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ClusterStatusRedMetric() interface{}
	// Experimental.
	ClusterStatusYellowMetric() interface{}
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	DiskSpaceUsageMetric() interface{}
	// Experimental.
	IndexingLatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	IndexingLatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	IndexWriteBlockedMetric() interface{}
	// Experimental.
	JvmMemoryPressureMetric() interface{}
	// Experimental.
	KmsKeyErrorMetric() interface{}
	// Experimental.
	KmsKeyInaccessibleMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MasterCpuUsageMetric() interface{}
	// Experimental.
	MasterJvmMemoryPressureMetric() interface{}
	// Experimental.
	MasterUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	NodeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	NodesMetric() interface{}
	// Experimental.
	P50IndexingLatencyMetric() interface{}
	// Experimental.
	P50SearchLatencyMetric() interface{}
	// Experimental.
	P90IndexingLatencyMetric() interface{}
	// Experimental.
	P90SearchLatencyMetric() interface{}
	// Experimental.
	P99IndexingLatencyMetric() interface{}
	// Experimental.
	P99SearchLatencyMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	SearchLatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	SearchLatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Title() *string
	// Experimental.
	TpsMetric() interface{}
	// Experimental.
	Url() *string
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Experimental.
	UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for OpenSearchClusterMonitoring
type jsiiProxy_OpenSearchClusterMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) AutomatedSnapshotFailureMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"automatedSnapshotFailureMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) ClusterAlarmFactory() OpenSearchClusterAlarmFactory {
	var returns OpenSearchClusterAlarmFactory
	_jsii_.Get(
		j,
		"clusterAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) ClusterAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"clusterAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) ClusterStatusRedMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"clusterStatusRedMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) ClusterStatusYellowMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"clusterStatusYellowMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) DiskSpaceUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"diskSpaceUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) IndexingLatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"indexingLatencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) IndexingLatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"indexingLatencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) IndexWriteBlockedMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"indexWriteBlockedMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) JvmMemoryPressureMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"jvmMemoryPressureMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) KmsKeyErrorMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"kmsKeyErrorMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) KmsKeyInaccessibleMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"kmsKeyInaccessibleMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) MasterCpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"masterCpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) MasterJvmMemoryPressureMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"masterJvmMemoryPressureMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) MasterUsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"masterUsageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) NodeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"nodeAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) NodesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"nodesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P50IndexingLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50IndexingLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P50SearchLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50SearchLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P90IndexingLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90IndexingLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P90SearchLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90SearchLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P99IndexingLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99IndexingLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) P99SearchLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99SearchLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) SearchLatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"searchLatencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) SearchLatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"searchLatencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) TpsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"tpsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) Url() *string {
	var returns *string
	_jsii_.Get(
		j,
		"url",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpenSearchClusterMonitoring) UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"usageAnnotations",
		&returns,
	)
	return returns
}


// Experimental.
func NewOpenSearchClusterMonitoring(scope MonitoringScope, props *OpenSearchClusterMonitoringProps) OpenSearchClusterMonitoring {
	_init_.Initialize()

	j := jsiiProxy_OpenSearchClusterMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewOpenSearchClusterMonitoring_Override(o OpenSearchClusterMonitoring, scope MonitoringScope, props *OpenSearchClusterMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.OpenSearchClusterMonitoring",
		[]interface{}{scope, props},
		o,
	)
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		o,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		o,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		o,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		o,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		o,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		o,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		o,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (o *jsiiProxy_OpenSearchClusterMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		o,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type OpenSearchClusterMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddClusterAutomatedSnapshotFailureAlarm *map[string]*OpenSearchClusterAutomatedSnapshotFailureThreshold `field:"optional" json:"addClusterAutomatedSnapshotFailureAlarm" yaml:"addClusterAutomatedSnapshotFailureAlarm"`
	// Experimental.
	AddClusterIndexWritesBlockedAlarm *map[string]*OpenSearchClusterIndexWritesBlockedThreshold `field:"optional" json:"addClusterIndexWritesBlockedAlarm" yaml:"addClusterIndexWritesBlockedAlarm"`
	// Experimental.
	AddClusterNodeCountAlarm *map[string]*OpenSearchClusterNodesThreshold `field:"optional" json:"addClusterNodeCountAlarm" yaml:"addClusterNodeCountAlarm"`
	// Experimental.
	AddClusterStatusAlarm *map[string]*OpenSearchClusterStatusCustomization `field:"optional" json:"addClusterStatusAlarm" yaml:"addClusterStatusAlarm"`
	// Experimental.
	AddCpuSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuSpaceUsageAlarm" yaml:"addCpuSpaceUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
	// Experimental.
	AddIndexingLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP50Alarm" yaml:"addIndexingLatencyP50Alarm"`
	// Experimental.
	AddIndexingLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP90Alarm" yaml:"addIndexingLatencyP90Alarm"`
	// Experimental.
	AddIndexingLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP99Alarm" yaml:"addIndexingLatencyP99Alarm"`
	// Experimental.
	AddJvmMemoryPressureAlarm *map[string]*UsageThreshold `field:"optional" json:"addJvmMemoryPressureAlarm" yaml:"addJvmMemoryPressureAlarm"`
	// Experimental.
	AddKmsKeyErrorAlarm *map[string]*OpenSearchKmsKeyErrorThreshold `field:"optional" json:"addKmsKeyErrorAlarm" yaml:"addKmsKeyErrorAlarm"`
	// Experimental.
	AddKmsKeyInaccessibleAlarm *map[string]*OpenSearchKmsKeyInaccessibleThreshold `field:"optional" json:"addKmsKeyInaccessibleAlarm" yaml:"addKmsKeyInaccessibleAlarm"`
	// Experimental.
	AddMasterCpuSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMasterCpuSpaceUsageAlarm" yaml:"addMasterCpuSpaceUsageAlarm"`
	// Experimental.
	AddMasterJvmMemoryPressureAlarm *map[string]*UsageThreshold `field:"optional" json:"addMasterJvmMemoryPressureAlarm" yaml:"addMasterJvmMemoryPressureAlarm"`
	// Experimental.
	AddSearchLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP50Alarm" yaml:"addSearchLatencyP50Alarm"`
	// Experimental.
	AddSearchLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP90Alarm" yaml:"addSearchLatencyP90Alarm"`
	// Experimental.
	AddSearchLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP99Alarm" yaml:"addSearchLatencyP99Alarm"`
}

// Experimental.
type OpenSearchClusterMonitoringProps struct {
	// Experimental.
	Domain interface{} `field:"required" json:"domain" yaml:"domain"`
	// Experimental.
	FillTpsWithZeroes *bool `field:"optional" json:"fillTpsWithZeroes" yaml:"fillTpsWithZeroes"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddClusterAutomatedSnapshotFailureAlarm *map[string]*OpenSearchClusterAutomatedSnapshotFailureThreshold `field:"optional" json:"addClusterAutomatedSnapshotFailureAlarm" yaml:"addClusterAutomatedSnapshotFailureAlarm"`
	// Experimental.
	AddClusterIndexWritesBlockedAlarm *map[string]*OpenSearchClusterIndexWritesBlockedThreshold `field:"optional" json:"addClusterIndexWritesBlockedAlarm" yaml:"addClusterIndexWritesBlockedAlarm"`
	// Experimental.
	AddClusterNodeCountAlarm *map[string]*OpenSearchClusterNodesThreshold `field:"optional" json:"addClusterNodeCountAlarm" yaml:"addClusterNodeCountAlarm"`
	// Experimental.
	AddClusterStatusAlarm *map[string]*OpenSearchClusterStatusCustomization `field:"optional" json:"addClusterStatusAlarm" yaml:"addClusterStatusAlarm"`
	// Experimental.
	AddCpuSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuSpaceUsageAlarm" yaml:"addCpuSpaceUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
	// Experimental.
	AddIndexingLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP50Alarm" yaml:"addIndexingLatencyP50Alarm"`
	// Experimental.
	AddIndexingLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP90Alarm" yaml:"addIndexingLatencyP90Alarm"`
	// Experimental.
	AddIndexingLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addIndexingLatencyP99Alarm" yaml:"addIndexingLatencyP99Alarm"`
	// Experimental.
	AddJvmMemoryPressureAlarm *map[string]*UsageThreshold `field:"optional" json:"addJvmMemoryPressureAlarm" yaml:"addJvmMemoryPressureAlarm"`
	// Experimental.
	AddKmsKeyErrorAlarm *map[string]*OpenSearchKmsKeyErrorThreshold `field:"optional" json:"addKmsKeyErrorAlarm" yaml:"addKmsKeyErrorAlarm"`
	// Experimental.
	AddKmsKeyInaccessibleAlarm *map[string]*OpenSearchKmsKeyInaccessibleThreshold `field:"optional" json:"addKmsKeyInaccessibleAlarm" yaml:"addKmsKeyInaccessibleAlarm"`
	// Experimental.
	AddMasterCpuSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMasterCpuSpaceUsageAlarm" yaml:"addMasterCpuSpaceUsageAlarm"`
	// Experimental.
	AddMasterJvmMemoryPressureAlarm *map[string]*UsageThreshold `field:"optional" json:"addMasterJvmMemoryPressureAlarm" yaml:"addMasterJvmMemoryPressureAlarm"`
	// Experimental.
	AddSearchLatencyP50Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP50Alarm" yaml:"addSearchLatencyP50Alarm"`
	// Experimental.
	AddSearchLatencyP90Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP90Alarm" yaml:"addSearchLatencyP90Alarm"`
	// Experimental.
	AddSearchLatencyP99Alarm *map[string]*LatencyThreshold `field:"optional" json:"addSearchLatencyP99Alarm" yaml:"addSearchLatencyP99Alarm"`
}

// Experimental.
type OpenSearchClusterNodesThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MinNodes *float64 `field:"required" json:"minNodes" yaml:"minNodes"`
}

// Experimental.
type OpenSearchClusterStatus string

const (
	// Experimental.
	OpenSearchClusterStatus_RED OpenSearchClusterStatus = "RED"
	// Experimental.
	OpenSearchClusterStatus_YELLOW OpenSearchClusterStatus = "YELLOW"
)

// Experimental.
type OpenSearchClusterStatusCustomization struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	Status interface{} `field:"required" json:"status" yaml:"status"`
}

// Experimental.
type OpenSearchKmsKeyErrorThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxErrors *float64 `field:"required" json:"maxErrors" yaml:"maxErrors"`
}

// Experimental.
type OpenSearchKmsKeyInaccessibleThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxAccessAttempts *float64 `field:"required" json:"maxAccessAttempts" yaml:"maxAccessAttempts"`
}

// Alarm action strategy that creates an AWS OpsCenter OpsItem.
// Experimental.
type OpsItemAlarmActionStrategy interface {
	IAlarmActionStrategy
	// OPS Item Category.
	// Experimental.
	Category() awscloudwatchactions.OpsItemCategory
	// OPS Item Severity.
	// Experimental.
	Severity() awscloudwatchactions.OpsItemSeverity
	// Experimental.
	AddAlarmActions(props *AlarmActionStrategyProps)
}

// The jsii proxy struct for OpsItemAlarmActionStrategy
type jsiiProxy_OpsItemAlarmActionStrategy struct {
	jsiiProxy_IAlarmActionStrategy
}

func (j *jsiiProxy_OpsItemAlarmActionStrategy) Category() awscloudwatchactions.OpsItemCategory {
	var returns awscloudwatchactions.OpsItemCategory
	_jsii_.Get(
		j,
		"category",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_OpsItemAlarmActionStrategy) Severity() awscloudwatchactions.OpsItemSeverity {
	var returns awscloudwatchactions.OpsItemSeverity
	_jsii_.Get(
		j,
		"severity",
		&returns,
	)
	return returns
}


// Experimental.
func NewOpsItemAlarmActionStrategy(severity awscloudwatchactions.OpsItemSeverity, category awscloudwatchactions.OpsItemCategory) OpsItemAlarmActionStrategy {
	_init_.Initialize()

	j := jsiiProxy_OpsItemAlarmActionStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.OpsItemAlarmActionStrategy",
		[]interface{}{severity, category},
		&j,
	)

	return &j
}

// Experimental.
func NewOpsItemAlarmActionStrategy_Override(o OpsItemAlarmActionStrategy, severity awscloudwatchactions.OpsItemSeverity, category awscloudwatchactions.OpsItemCategory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.OpsItemAlarmActionStrategy",
		[]interface{}{severity, category},
		o,
	)
}

func (o *jsiiProxy_OpsItemAlarmActionStrategy) AddAlarmActions(props *AlarmActionStrategyProps) {
	_jsii_.InvokeVoid(
		o,
		"addAlarmActions",
		[]interface{}{props},
	)
}

// Experimental.
type QueueAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMaxQueueIncomingMessagesCountAlarm(metric interface{}, props *MaxIncomingMessagesCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxQueueMessageAgeAlarm(metric interface{}, props *MaxMessageAgeThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxQueueMessageCountAlarm(metric interface{}, props *MaxMessageCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxQueueTimeToDrainMessagesAlarm(metric interface{}, props *MaxTimeToDrainThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinQueueIncomingMessagesCountAlarm(metric interface{}, props *MinIncomingMessagesCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinQueueMessageCountAlarm(metric interface{}, props *MinMessageCountThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for QueueAlarmFactory
type jsiiProxy_QueueAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_QueueAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewQueueAlarmFactory(alarmFactory AlarmFactory) QueueAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_QueueAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.QueueAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewQueueAlarmFactory_Override(q QueueAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.QueueAlarmFactory",
		[]interface{}{alarmFactory},
		q,
	)
}

func (q *jsiiProxy_QueueAlarmFactory) AddMaxQueueIncomingMessagesCountAlarm(metric interface{}, props *MaxIncomingMessagesCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMaxQueueIncomingMessagesCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (q *jsiiProxy_QueueAlarmFactory) AddMaxQueueMessageAgeAlarm(metric interface{}, props *MaxMessageAgeThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMaxQueueMessageAgeAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (q *jsiiProxy_QueueAlarmFactory) AddMaxQueueMessageCountAlarm(metric interface{}, props *MaxMessageCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMaxQueueMessageCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (q *jsiiProxy_QueueAlarmFactory) AddMaxQueueTimeToDrainMessagesAlarm(metric interface{}, props *MaxTimeToDrainThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMaxQueueTimeToDrainMessagesAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (q *jsiiProxy_QueueAlarmFactory) AddMinQueueIncomingMessagesCountAlarm(metric interface{}, props *MinIncomingMessagesCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMinQueueIncomingMessagesCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (q *jsiiProxy_QueueAlarmFactory) AddMinQueueMessageCountAlarm(metric interface{}, props *MinMessageCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		q,
		"addMinQueueMessageCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type QueueProcessingEc2ServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Ec2Service awsecspatterns.QueueProcessingEc2Service `field:"required" json:"ec2Service" yaml:"ec2Service"`
	// Experimental.
	AddDeadLetterQueueAlarms *BaseDlqAlarms `field:"optional" json:"addDeadLetterQueueAlarms" yaml:"addDeadLetterQueueAlarms"`
	// Experimental.
	AddQueueAlarms *BaseSqsQueueAlarms `field:"optional" json:"addQueueAlarms" yaml:"addQueueAlarms"`
	// Experimental.
	AddServiceAlarms *BaseFargateServiceAlarms `field:"optional" json:"addServiceAlarms" yaml:"addServiceAlarms"`
}

// Experimental.
type QueueProcessingFargateServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	FargateService awsecspatterns.QueueProcessingFargateService `field:"required" json:"fargateService" yaml:"fargateService"`
	// Experimental.
	AddDeadLetterQueueAlarms *BaseDlqAlarms `field:"optional" json:"addDeadLetterQueueAlarms" yaml:"addDeadLetterQueueAlarms"`
	// Experimental.
	AddQueueAlarms *BaseSqsQueueAlarms `field:"optional" json:"addQueueAlarms" yaml:"addQueueAlarms"`
	// Experimental.
	AddServiceAlarms *BaseFargateServiceAlarms `field:"optional" json:"addServiceAlarms" yaml:"addServiceAlarms"`
}

// Enumeration of different rate computation methods.
// Experimental.
type RateComputationMethod string

const (
	// Number of occurrences relative to requests.
	//
	// Less sensitive than per-second when TPS > 1.
	// Experimental.
	RateComputationMethod_AVERAGE RateComputationMethod = "AVERAGE"
	// Number of occurrences per second.
	//
	// More sensitive than average when TPS > 1.
	// Experimental.
	RateComputationMethod_PER_SECOND RateComputationMethod = "PER_SECOND"
	// Number of occurrences per minute.
	// Experimental.
	RateComputationMethod_PER_MINUTE RateComputationMethod = "PER_MINUTE"
	// Number of occurrences per hour.
	// Experimental.
	RateComputationMethod_PER_HOUR RateComputationMethod = "PER_HOUR"
	// Number of occurrences per day.
	// Experimental.
	RateComputationMethod_PER_DAY RateComputationMethod = "PER_DAY"
)

// Experimental.
type RdsClusterMetricFactory interface {
	// Experimental.
	ClusterIdentifier() *string
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricAverageCpuUsageInPercent() interface{}
	// Experimental.
	MetricCommitLatencyP90InMillis() interface{}
	// Experimental.
	MetricDeleteLatencyP90InMillis() interface{}
	// Experimental.
	MetricDiskSpaceUsageInPercent() interface{}
	// Experimental.
	MetricFreeStorageInBytes() interface{}
	// Experimental.
	MetricInsertLatencyP90InMillis() interface{}
	// Experimental.
	MetricSelectLatencyP90InMillis() interface{}
	// Experimental.
	MetricTotalConnectionCount() interface{}
	// Experimental.
	MetricUpdateLatencyP90InMillis() interface{}
	// Experimental.
	MetricUsedStorageInBytes() interface{}
}

// The jsii proxy struct for RdsClusterMetricFactory
type jsiiProxy_RdsClusterMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_RdsClusterMetricFactory) ClusterIdentifier() *string {
	var returns *string
	_jsii_.Get(
		j,
		"clusterIdentifier",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewRdsClusterMetricFactory(metricFactory MetricFactory, props *RdsClusterMetricFactoryProps) RdsClusterMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_RdsClusterMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.RdsClusterMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewRdsClusterMetricFactory_Override(r RdsClusterMetricFactory, metricFactory MetricFactory, props *RdsClusterMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.RdsClusterMetricFactory",
		[]interface{}{metricFactory, props},
		r,
	)
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricAverageCpuUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricAverageCpuUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricCommitLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricCommitLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricDeleteLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricDeleteLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricDiskSpaceUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricDiskSpaceUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricFreeStorageInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricFreeStorageInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricInsertLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricInsertLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricSelectLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricSelectLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricTotalConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricTotalConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricUpdateLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricUpdateLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMetricFactory) MetricUsedStorageInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricUsedStorageInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type RdsClusterMetricFactoryProps struct {
	// database cluster (either this or `clusterIdentifier` need to be specified).
	// Experimental.
	Cluster awsrds.IDatabaseCluster `field:"optional" json:"cluster" yaml:"cluster"`
	// database cluster identifier (either this or `cluster` need to be specified).
	// Deprecated: please use `cluster` instead.
	ClusterIdentifier *string `field:"optional" json:"clusterIdentifier" yaml:"clusterIdentifier"`
}

// Experimental.
type RdsClusterMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	CommitLatencyMetric() interface{}
	// Experimental.
	ConnectionsMetric() interface{}
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	DeleteLatencyMetric() interface{}
	// Experimental.
	DiskSpaceUsageMetric() interface{}
	// Experimental.
	InsertLatencyMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	SelectLatencyMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	UpdateLatencyMetric() interface{}
	// Experimental.
	Url() *string
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Experimental.
	UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateCpuAndDiskUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for RdsClusterMonitoring
type jsiiProxy_RdsClusterMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_RdsClusterMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) CommitLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"commitLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) ConnectionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"connectionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) DeleteLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deleteLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) DiskSpaceUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"diskSpaceUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) InsertLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"insertLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) SelectLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"selectLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) UpdateLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"updateLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) Url() *string {
	var returns *string
	_jsii_.Get(
		j,
		"url",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RdsClusterMonitoring) UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"usageAnnotations",
		&returns,
	)
	return returns
}


// Experimental.
func NewRdsClusterMonitoring(scope MonitoringScope, props *RdsClusterMonitoringProps) RdsClusterMonitoring {
	_init_.Initialize()

	j := jsiiProxy_RdsClusterMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.RdsClusterMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewRdsClusterMonitoring_Override(r RdsClusterMonitoring, scope MonitoringScope, props *RdsClusterMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.RdsClusterMonitoring",
		[]interface{}{scope, props},
		r,
	)
}

func (r *jsiiProxy_RdsClusterMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		r,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (r *jsiiProxy_RdsClusterMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		r,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createConnectionsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateCpuAndDiskUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createCpuAndDiskUsageWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		r,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		r,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		r,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		r,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RdsClusterMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type RdsClusterMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
}

// Experimental.
type RdsClusterMonitoringProps struct {
	// database cluster (either this or `clusterIdentifier` need to be specified).
	// Experimental.
	Cluster awsrds.IDatabaseCluster `field:"optional" json:"cluster" yaml:"cluster"`
	// database cluster identifier (either this or `cluster` need to be specified).
	// Deprecated: please use `cluster` instead.
	ClusterIdentifier *string `field:"optional" json:"clusterIdentifier" yaml:"clusterIdentifier"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
}

// Experimental.
type RecordsFailedThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxRecordsFailedThreshold *float64 `field:"required" json:"maxRecordsFailedThreshold" yaml:"maxRecordsFailedThreshold"`
}

// Experimental.
type RecordsThrottledThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxRecordsThrottledThreshold *float64 `field:"required" json:"maxRecordsThrottledThreshold" yaml:"maxRecordsThrottledThreshold"`
}

// Experimental.
type RedshiftClusterMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricAverageCpuUsageInPercent() interface{}
	// Experimental.
	MetricAverageDiskSpaceUsageInPercent() interface{}
	// Experimental.
	MetricLongQueryDurationP90InMillis() interface{}
	// Experimental.
	MetricMaintenanceModeEnabled() interface{}
	// Experimental.
	MetricMediumQueryDurationP90InMillis() interface{}
	// Experimental.
	MetricReadLatencyP90InMillis() interface{}
	// Experimental.
	MetricShortQueryDurationP90InMillis() interface{}
	// Experimental.
	MetricTotalConnectionCount() interface{}
	// Experimental.
	MetricWriteLatencyP90InMillis() interface{}
}

// The jsii proxy struct for RedshiftClusterMetricFactory
type jsiiProxy_RedshiftClusterMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_RedshiftClusterMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewRedshiftClusterMetricFactory(metricFactory MetricFactory, props *RedshiftClusterMetricFactoryProps) RedshiftClusterMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_RedshiftClusterMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.RedshiftClusterMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewRedshiftClusterMetricFactory_Override(r RedshiftClusterMetricFactory, metricFactory MetricFactory, props *RedshiftClusterMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.RedshiftClusterMetricFactory",
		[]interface{}{metricFactory, props},
		r,
	)
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricAverageCpuUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricAverageCpuUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricAverageDiskSpaceUsageInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricAverageDiskSpaceUsageInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricLongQueryDurationP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricLongQueryDurationP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricMaintenanceModeEnabled() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricMaintenanceModeEnabled",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricMediumQueryDurationP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricMediumQueryDurationP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricReadLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricReadLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricShortQueryDurationP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricShortQueryDurationP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricTotalConnectionCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricTotalConnectionCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMetricFactory) MetricWriteLatencyP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		r,
		"metricWriteLatencyP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type RedshiftClusterMetricFactoryProps struct {
	// Experimental.
	ClusterIdentifier *string `field:"required" json:"clusterIdentifier" yaml:"clusterIdentifier"`
}

// Experimental.
type RedshiftClusterMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConnectionsMetric() interface{}
	// Experimental.
	CpuUsageMetric() interface{}
	// Experimental.
	DiskSpaceUsageMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	LongQueryDurationMetric() interface{}
	// Experimental.
	MaintenanceModeMetric() interface{}
	// Experimental.
	MediumQueryDurationMetric() interface{}
	// Experimental.
	ReadLatencyMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	ShortQueryDurationMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	Url() *string
	// Experimental.
	UsageAlarmFactory() UsageAlarmFactory
	// Experimental.
	UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	WriteLatencyMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateCpuAndDiskUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMaintenanceWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateQueryDurationWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for RedshiftClusterMonitoring
type jsiiProxy_RedshiftClusterMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_RedshiftClusterMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) ConnectionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"connectionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) CpuUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"cpuUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) DiskSpaceUsageMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"diskSpaceUsageMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) LongQueryDurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"longQueryDurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) MaintenanceModeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"maintenanceModeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) MediumQueryDurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"mediumQueryDurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) ReadLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"readLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) ShortQueryDurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"shortQueryDurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) Url() *string {
	var returns *string
	_jsii_.Get(
		j,
		"url",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) UsageAlarmFactory() UsageAlarmFactory {
	var returns UsageAlarmFactory
	_jsii_.Get(
		j,
		"usageAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) UsageAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"usageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_RedshiftClusterMonitoring) WriteLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"writeLatencyMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewRedshiftClusterMonitoring(scope MonitoringScope, props *RedshiftClusterMonitoringProps) RedshiftClusterMonitoring {
	_init_.Initialize()

	j := jsiiProxy_RedshiftClusterMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.RedshiftClusterMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewRedshiftClusterMonitoring_Override(r RedshiftClusterMonitoring, scope MonitoringScope, props *RedshiftClusterMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.RedshiftClusterMonitoring",
		[]interface{}{scope, props},
		r,
	)
}

func (r *jsiiProxy_RedshiftClusterMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		r,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (r *jsiiProxy_RedshiftClusterMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		r,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateConnectionsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createConnectionsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateCpuAndDiskUsageWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createCpuAndDiskUsageWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		r,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateMaintenanceWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createMaintenanceWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		r,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateQueryDurationWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		r,
		"createQueryDurationWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		r,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		r,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (r *jsiiProxy_RedshiftClusterMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		r,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type RedshiftClusterMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
}

// Experimental.
type RedshiftClusterMonitoringProps struct {
	// Experimental.
	ClusterIdentifier *string `field:"required" json:"clusterIdentifier" yaml:"clusterIdentifier"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddDiskSpaceUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addDiskSpaceUsageAlarm" yaml:"addDiskSpaceUsageAlarm"`
}

// Experimental.
type RunningTaskCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxRunningTasks *float64 `field:"required" json:"maxRunningTasks" yaml:"maxRunningTasks"`
}

// Experimental.
type RunningTaskRateThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxRunningTaskRate *float64 `field:"required" json:"maxRunningTaskRate" yaml:"maxRunningTaskRate"`
}

// Experimental.
type S3BucketMetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Props() *S3BucketMetricFactoryProps
	// Experimental.
	MetricBucketSizeBytes() interface{}
	// Experimental.
	MetricNumberOfObjects() interface{}
}

// The jsii proxy struct for S3BucketMetricFactory
type jsiiProxy_S3BucketMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_S3BucketMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMetricFactory) Props() *S3BucketMetricFactoryProps {
	var returns *S3BucketMetricFactoryProps
	_jsii_.Get(
		j,
		"props",
		&returns,
	)
	return returns
}


// Experimental.
func NewS3BucketMetricFactory(metricFactory MetricFactory, props *S3BucketMetricFactoryProps) S3BucketMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_S3BucketMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.S3BucketMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewS3BucketMetricFactory_Override(s S3BucketMetricFactory, metricFactory MetricFactory, props *S3BucketMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.S3BucketMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_S3BucketMetricFactory) MetricBucketSizeBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricBucketSizeBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMetricFactory) MetricNumberOfObjects() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricNumberOfObjects",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type S3BucketMetricFactoryProps struct {
	// Experimental.
	Bucket awss3.IBucket `field:"required" json:"bucket" yaml:"bucket"`
	// Experimental.
	StorageType StorageType `field:"optional" json:"storageType" yaml:"storageType"`
}

// Experimental.
type S3BucketMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	BucketSizeBytesMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	NumberOfObjectsMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Experimental.
	Url() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for S3BucketMonitoring
type jsiiProxy_S3BucketMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_S3BucketMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) BucketSizeBytesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"bucketSizeBytesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) NumberOfObjectsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"numberOfObjectsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_S3BucketMonitoring) Url() *string {
	var returns *string
	_jsii_.Get(
		j,
		"url",
		&returns,
	)
	return returns
}


// Experimental.
func NewS3BucketMonitoring(scope MonitoringScope, props *S3BucketMonitoringProps) S3BucketMonitoring {
	_init_.Initialize()

	j := jsiiProxy_S3BucketMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.S3BucketMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewS3BucketMonitoring_Override(s S3BucketMonitoring, scope MonitoringScope, props *S3BucketMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.S3BucketMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_S3BucketMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_S3BucketMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_S3BucketMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type S3BucketMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type S3BucketMonitoringProps struct {
	// Experimental.
	Bucket awss3.IBucket `field:"required" json:"bucket" yaml:"bucket"`
	// Experimental.
	StorageType StorageType `field:"optional" json:"storageType" yaml:"storageType"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type SecretsManagerMetricsPublisher interface {
	constructs.Construct
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Experimental.
	AddSecret(secret awssecretsmanager.ISecret)
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for SecretsManagerMetricsPublisher
type jsiiProxy_SecretsManagerMetricsPublisher struct {
	internal.Type__constructsConstruct
}

func (j *jsiiProxy_SecretsManagerMetricsPublisher) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Experimental.
func SecretsManagerMetricsPublisher_GetInstance(scope MonitoringScope) SecretsManagerMetricsPublisher {
	_init_.Initialize()

	var returns SecretsManagerMetricsPublisher

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.SecretsManagerMetricsPublisher",
		"getInstance",
		[]interface{}{scope},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func SecretsManagerMetricsPublisher_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"cdk-monitoring-constructs.SecretsManagerMetricsPublisher",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerMetricsPublisher) AddSecret(secret awssecretsmanager.ISecret) {
	_jsii_.InvokeVoid(
		s,
		"addSecret",
		[]interface{}{secret},
	)
}

func (s *jsiiProxy_SecretsManagerMetricsPublisher) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SecretsManagerSecretMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Secret() awssecretsmanager.ISecret
	// Experimental.
	MetricDaysSinceLastChange() interface{}
	// Experimental.
	MetricDaysSinceLastRotation() interface{}
}

// The jsii proxy struct for SecretsManagerSecretMetricFactory
type jsiiProxy_SecretsManagerSecretMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_SecretsManagerSecretMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecretsManagerSecretMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecretsManagerSecretMetricFactory) Secret() awssecretsmanager.ISecret {
	var returns awssecretsmanager.ISecret
	_jsii_.Get(
		j,
		"secret",
		&returns,
	)
	return returns
}


// Experimental.
func NewSecretsManagerSecretMetricFactory(metricFactory MetricFactory, props *SecretsManagerSecretMetricFactoryProps) SecretsManagerSecretMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_SecretsManagerSecretMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SecretsManagerSecretMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSecretsManagerSecretMetricFactory_Override(s SecretsManagerSecretMetricFactory, metricFactory MetricFactory, props *SecretsManagerSecretMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SecretsManagerSecretMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func SecretsManagerSecretMetricFactory_MetricNameDaysSinceLastChange() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-monitoring-constructs.SecretsManagerSecretMetricFactory",
		"MetricNameDaysSinceLastChange",
		&returns,
	)
	return returns
}

func SecretsManagerSecretMetricFactory_MetricNameDaysSinceLastRotation() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-monitoring-constructs.SecretsManagerSecretMetricFactory",
		"MetricNameDaysSinceLastRotation",
		&returns,
	)
	return returns
}

func SecretsManagerSecretMetricFactory_Namespace() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"cdk-monitoring-constructs.SecretsManagerSecretMetricFactory",
		"Namespace",
		&returns,
	)
	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMetricFactory) MetricDaysSinceLastChange() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricDaysSinceLastChange",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMetricFactory) MetricDaysSinceLastRotation() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricDaysSinceLastRotation",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SecretsManagerSecretMetricFactoryProps struct {
	// Experimental.
	Secret awssecretsmanager.ISecret `field:"required" json:"secret" yaml:"secret"`
}

// Experimental.
type SecretsManagerSecretMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SecretsManagerSecretMonitoring
type jsiiProxy_SecretsManagerSecretMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_SecretsManagerSecretMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecretsManagerSecretMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecretsManagerSecretMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SecretsManagerSecretMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewSecretsManagerSecretMonitoring(scope MonitoringScope, props *SecretsManagerSecretMonitoringProps) SecretsManagerSecretMonitoring {
	_init_.Initialize()

	j := jsiiProxy_SecretsManagerSecretMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SecretsManagerSecretMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSecretsManagerSecretMonitoring_Override(s SecretsManagerSecretMonitoring, scope MonitoringScope, props *SecretsManagerSecretMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SecretsManagerSecretMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SecretsManagerSecretMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SecretsManagerSecretMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDaysSinceLastChangeAlarm *map[string]*DaysSinceUpdateThreshold `field:"optional" json:"addDaysSinceLastChangeAlarm" yaml:"addDaysSinceLastChangeAlarm"`
	// Experimental.
	AddDaysSinceLastRotationAlarm *map[string]*DaysSinceUpdateThreshold `field:"optional" json:"addDaysSinceLastRotationAlarm" yaml:"addDaysSinceLastRotationAlarm"`
	// Experimental.
	ShowLastRotationWidget *bool `field:"optional" json:"showLastRotationWidget" yaml:"showLastRotationWidget"`
}

// Monitoring props for Secrets Manager secrets.
// Experimental.
type SecretsManagerSecretMonitoringProps struct {
	// Experimental.
	Secret awssecretsmanager.ISecret `field:"required" json:"secret" yaml:"secret"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDaysSinceLastChangeAlarm *map[string]*DaysSinceUpdateThreshold `field:"optional" json:"addDaysSinceLastChangeAlarm" yaml:"addDaysSinceLastChangeAlarm"`
	// Experimental.
	AddDaysSinceLastRotationAlarm *map[string]*DaysSinceUpdateThreshold `field:"optional" json:"addDaysSinceLastRotationAlarm" yaml:"addDaysSinceLastRotationAlarm"`
	// Experimental.
	ShowLastRotationWidget *bool `field:"optional" json:"showLastRotationWidget" yaml:"showLastRotationWidget"`
}

// Monitoring props for Simple EC2 service.
// Experimental.
type SimpleEc2ServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	Ec2Service awsecs.Ec2Service `field:"required" json:"ec2Service" yaml:"ec2Service"`
}

// Monitoring props for Simple Fargate service.
// Experimental.
type SimpleFargateServiceMonitoringProps struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddCpuUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addCpuUsageAlarm" yaml:"addCpuUsageAlarm"`
	// Experimental.
	AddMemoryUsageAlarm *map[string]*UsageThreshold `field:"optional" json:"addMemoryUsageAlarm" yaml:"addMemoryUsageAlarm"`
	// Container Insights needs to be enabled for the cluster for this alarm.
	// Experimental.
	AddRunningTaskCountAlarm *map[string]*RunningTaskCountThreshold `field:"optional" json:"addRunningTaskCountAlarm" yaml:"addRunningTaskCountAlarm"`
	// maximum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MaxAutoScalingTaskCount *float64 `field:"optional" json:"maxAutoScalingTaskCount" yaml:"maxAutoScalingTaskCount"`
	// minimum number of tasks, as specified in your auto scaling config.
	// Experimental.
	MinAutoScalingTaskCount *float64 `field:"optional" json:"minAutoScalingTaskCount" yaml:"minAutoScalingTaskCount"`
	// Experimental.
	FargateService awsecs.FargateService `field:"required" json:"fargateService" yaml:"fargateService"`
}

// Line graph widget with one axis only (left).
//
// If there is just one metric, it will hide the legend to save space.
// The purpose of this custom class is to make the properties more strict.
// It will avoid graphs with undefined axis and dimensions.
// Experimental.
type SingleAxisGraphWidget interface {
	awscloudwatch.GraphWidget
	// The amount of vertical grid units the widget will take up.
	// Experimental.
	Height() *float64
	// The amount of horizontal grid units the widget will take up.
	// Experimental.
	Width() *float64
	// Experimental.
	X() *float64
	// Experimental.
	SetX(val *float64)
	// Experimental.
	Y() *float64
	// Experimental.
	SetY(val *float64)
	// Add another metric to the left Y axis of the GraphWidget.
	// Experimental.
	AddLeftMetric(metric awscloudwatch.IMetric)
	// Add another metric to the right Y axis of the GraphWidget.
	// Experimental.
	AddRightMetric(metric awscloudwatch.IMetric)
	// Place the widget at a given position.
	// Experimental.
	Position(x *float64, y *float64)
	// Return the widget JSON for use in the dashboard.
	// Experimental.
	ToJson() *[]interface{}
}

// The jsii proxy struct for SingleAxisGraphWidget
type jsiiProxy_SingleAxisGraphWidget struct {
	internal.Type__awscloudwatchGraphWidget
}

func (j *jsiiProxy_SingleAxisGraphWidget) Height() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"height",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleAxisGraphWidget) Width() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"width",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleAxisGraphWidget) X() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"x",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleAxisGraphWidget) Y() *float64 {
	var returns *float64
	_jsii_.Get(
		j,
		"y",
		&returns,
	)
	return returns
}


// Experimental.
func NewSingleAxisGraphWidget(props *SingleAxisGraphWidgetProps) SingleAxisGraphWidget {
	_init_.Initialize()

	j := jsiiProxy_SingleAxisGraphWidget{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SingleAxisGraphWidget",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewSingleAxisGraphWidget_Override(s SingleAxisGraphWidget, props *SingleAxisGraphWidgetProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SingleAxisGraphWidget",
		[]interface{}{props},
		s,
	)
}

func (j *jsiiProxy_SingleAxisGraphWidget) SetX(val *float64) {
	_jsii_.Set(
		j,
		"x",
		val,
	)
}

func (j *jsiiProxy_SingleAxisGraphWidget) SetY(val *float64) {
	_jsii_.Set(
		j,
		"y",
		val,
	)
}

func (s *jsiiProxy_SingleAxisGraphWidget) AddLeftMetric(metric awscloudwatch.IMetric) {
	_jsii_.InvokeVoid(
		s,
		"addLeftMetric",
		[]interface{}{metric},
	)
}

func (s *jsiiProxy_SingleAxisGraphWidget) AddRightMetric(metric awscloudwatch.IMetric) {
	_jsii_.InvokeVoid(
		s,
		"addRightMetric",
		[]interface{}{metric},
	)
}

func (s *jsiiProxy_SingleAxisGraphWidget) Position(x *float64, y *float64) {
	_jsii_.InvokeVoid(
		s,
		"position",
		[]interface{}{x, y},
	)
}

func (s *jsiiProxy_SingleAxisGraphWidget) ToJson() *[]interface{} {
	var returns *[]interface{}

	_jsii_.Invoke(
		s,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SingleAxisGraphWidgetProps struct {
	// Experimental.
	Height *float64 `field:"required" json:"height" yaml:"height"`
	// Experimental.
	LeftAxis *awscloudwatch.YAxisProps `field:"required" json:"leftAxis" yaml:"leftAxis"`
	// Experimental.
	LeftMetrics *[]awscloudwatch.IMetric `field:"required" json:"leftMetrics" yaml:"leftMetrics"`
	// Experimental.
	Width *float64 `field:"required" json:"width" yaml:"width"`
	// Experimental.
	LeftAnnotations *[]*awscloudwatch.HorizontalAnnotation `field:"optional" json:"leftAnnotations" yaml:"leftAnnotations"`
	// Experimental.
	Title *string `field:"optional" json:"title" yaml:"title"`
}

// Experimental.
type SingleWidgetDashboardSegment interface {
	IDashboardSegment
	// Experimental.
	AddToAlarm() *bool
	// Experimental.
	AddToSummary() *bool
	// Experimental.
	Widget() awscloudwatch.IWidget
	// Returns widgets for all alarms.
	//
	// These should go to the runbook or service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Returns widgets for the summary.
	//
	// These should go to the team OPS dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns all widgets.
	//
	// These should go to the detailed service dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SingleWidgetDashboardSegment
type jsiiProxy_SingleWidgetDashboardSegment struct {
	jsiiProxy_IDashboardSegment
}

func (j *jsiiProxy_SingleWidgetDashboardSegment) AddToAlarm() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"addToAlarm",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleWidgetDashboardSegment) AddToSummary() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"addToSummary",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SingleWidgetDashboardSegment) Widget() awscloudwatch.IWidget {
	var returns awscloudwatch.IWidget
	_jsii_.Get(
		j,
		"widget",
		&returns,
	)
	return returns
}


// Experimental.
func NewSingleWidgetDashboardSegment(widget awscloudwatch.IWidget, addToSummary *bool, addToAlarm *bool) SingleWidgetDashboardSegment {
	_init_.Initialize()

	j := jsiiProxy_SingleWidgetDashboardSegment{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SingleWidgetDashboardSegment",
		[]interface{}{widget, addToSummary, addToAlarm},
		&j,
	)

	return &j
}

// Experimental.
func NewSingleWidgetDashboardSegment_Override(s SingleWidgetDashboardSegment, widget awscloudwatch.IWidget, addToSummary *bool, addToAlarm *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SingleWidgetDashboardSegment",
		[]interface{}{widget, addToSummary, addToAlarm},
		s,
	)
}

func (s *jsiiProxy_SingleWidgetDashboardSegment) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SingleWidgetDashboardSegment) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SingleWidgetDashboardSegment) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Alarm action strategy that sends a notification to the specified SNS topic.
// Experimental.
type SnsAlarmActionStrategy interface {
	IAlarmActionStrategy
	// Experimental.
	OnAlarmTopic() awssns.ITopic
	// Experimental.
	OnInsufficientDataTopic() awssns.ITopic
	// Experimental.
	OnOkTopic() awssns.ITopic
	// Experimental.
	AddAlarmActions(props *AlarmActionStrategyProps)
}

// The jsii proxy struct for SnsAlarmActionStrategy
type jsiiProxy_SnsAlarmActionStrategy struct {
	jsiiProxy_IAlarmActionStrategy
}

func (j *jsiiProxy_SnsAlarmActionStrategy) OnAlarmTopic() awssns.ITopic {
	var returns awssns.ITopic
	_jsii_.Get(
		j,
		"onAlarmTopic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsAlarmActionStrategy) OnInsufficientDataTopic() awssns.ITopic {
	var returns awssns.ITopic
	_jsii_.Get(
		j,
		"onInsufficientDataTopic",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsAlarmActionStrategy) OnOkTopic() awssns.ITopic {
	var returns awssns.ITopic
	_jsii_.Get(
		j,
		"onOkTopic",
		&returns,
	)
	return returns
}


// Experimental.
func NewSnsAlarmActionStrategy(props *SnsAlarmActionStrategyProps) SnsAlarmActionStrategy {
	_init_.Initialize()

	j := jsiiProxy_SnsAlarmActionStrategy{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsAlarmActionStrategy",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewSnsAlarmActionStrategy_Override(s SnsAlarmActionStrategy, props *SnsAlarmActionStrategyProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsAlarmActionStrategy",
		[]interface{}{props},
		s,
	)
}

func (s *jsiiProxy_SnsAlarmActionStrategy) AddAlarmActions(props *AlarmActionStrategyProps) {
	_jsii_.InvokeVoid(
		s,
		"addAlarmActions",
		[]interface{}{props},
	)
}

// Experimental.
type SnsAlarmActionStrategyProps struct {
	// Target topic used when the alarm is triggered.
	// Experimental.
	OnAlarmTopic awssns.ITopic `field:"required" json:"onAlarmTopic" yaml:"onAlarmTopic"`
	// Optional target topic for when the alarm goes into the INSUFFICIENT_DATA state.
	// Experimental.
	OnInsufficientDataTopic awssns.ITopic `field:"optional" json:"onInsufficientDataTopic" yaml:"onInsufficientDataTopic"`
	// Optional target topic for when the alarm goes into the OK state.
	// Experimental.
	OnOkTopic awssns.ITopic `field:"optional" json:"onOkTopic" yaml:"onOkTopic"`
}

// Experimental.
type SnsTopicMetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Topic() awssns.ITopic
	// Experimental.
	MetricAverageMessageSizeInBytes() interface{}
	// Experimental.
	MetricIncomingMessageCount() interface{}
	// Experimental.
	MetricNumberOfNotificationsFailed() interface{}
	// Experimental.
	MetricOutgoingMessageCount() interface{}
}

// The jsii proxy struct for SnsTopicMetricFactory
type jsiiProxy_SnsTopicMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_SnsTopicMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMetricFactory) Topic() awssns.ITopic {
	var returns awssns.ITopic
	_jsii_.Get(
		j,
		"topic",
		&returns,
	)
	return returns
}


// Experimental.
func NewSnsTopicMetricFactory(metricFactory MetricFactory, props *SnsTopicMetricFactoryProps) SnsTopicMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_SnsTopicMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsTopicMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSnsTopicMetricFactory_Override(s SnsTopicMetricFactory, metricFactory MetricFactory, props *SnsTopicMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsTopicMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_SnsTopicMetricFactory) MetricAverageMessageSizeInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricAverageMessageSizeInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMetricFactory) MetricIncomingMessageCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricIncomingMessageCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMetricFactory) MetricNumberOfNotificationsFailed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricNumberOfNotificationsFailed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMetricFactory) MetricOutgoingMessageCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricOutgoingMessageCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SnsTopicMetricFactoryProps struct {
	// Experimental.
	Topic awssns.ITopic `field:"required" json:"topic" yaml:"topic"`
}

// Experimental.
type SnsTopicMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	FailedDeliveryAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	IncomingMessagesAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	IncomingMessagesMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MessagesFailedMetric() interface{}
	// Experimental.
	MessageSizeMetric() interface{}
	// Experimental.
	OutgoingMessagesMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	Title() *string
	// Experimental.
	TopicAlarmFactory() TopicAlarmFactory
	// Experimental.
	TopicUrl() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageFailedWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SnsTopicMonitoring
type jsiiProxy_SnsTopicMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_SnsTopicMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) FailedDeliveryAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"failedDeliveryAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) IncomingMessagesAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"incomingMessagesAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) IncomingMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) MessagesFailedMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"messagesFailedMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) MessageSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"messageSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) OutgoingMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"outgoingMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) TopicAlarmFactory() TopicAlarmFactory {
	var returns TopicAlarmFactory
	_jsii_.Get(
		j,
		"topicAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SnsTopicMonitoring) TopicUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"topicUrl",
		&returns,
	)
	return returns
}


// Experimental.
func NewSnsTopicMonitoring(scope MonitoringScope, props *SnsTopicMonitoringProps) SnsTopicMonitoring {
	_init_.Initialize()

	j := jsiiProxy_SnsTopicMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsTopicMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSnsTopicMonitoring_Override(s SnsTopicMonitoring, scope MonitoringScope, props *SnsTopicMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SnsTopicMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_SnsTopicMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_SnsTopicMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateMessageFailedWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageFailedWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		s,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SnsTopicMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SnsTopicMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddMaxNumberOfMessagesPublishedAlarm *map[string]*HighMessagesPublishedThreshold `field:"optional" json:"addMaxNumberOfMessagesPublishedAlarm" yaml:"addMaxNumberOfMessagesPublishedAlarm"`
	// Experimental.
	AddMessageNotificationsFailedAlarm *map[string]*NotificationsFailedThreshold `field:"optional" json:"addMessageNotificationsFailedAlarm" yaml:"addMessageNotificationsFailedAlarm"`
	// Experimental.
	AddMinNumberOfMessagesPublishedAlarm *map[string]*LowMessagesPublishedThreshold `field:"optional" json:"addMinNumberOfMessagesPublishedAlarm" yaml:"addMinNumberOfMessagesPublishedAlarm"`
}

// Experimental.
type SnsTopicMonitoringProps struct {
	// Experimental.
	Topic awssns.ITopic `field:"required" json:"topic" yaml:"topic"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddMaxNumberOfMessagesPublishedAlarm *map[string]*HighMessagesPublishedThreshold `field:"optional" json:"addMaxNumberOfMessagesPublishedAlarm" yaml:"addMaxNumberOfMessagesPublishedAlarm"`
	// Experimental.
	AddMessageNotificationsFailedAlarm *map[string]*NotificationsFailedThreshold `field:"optional" json:"addMessageNotificationsFailedAlarm" yaml:"addMessageNotificationsFailedAlarm"`
	// Experimental.
	AddMinNumberOfMessagesPublishedAlarm *map[string]*LowMessagesPublishedThreshold `field:"optional" json:"addMinNumberOfMessagesPublishedAlarm" yaml:"addMinNumberOfMessagesPublishedAlarm"`
}

// Experimental.
type SqsQueueMetricFactory interface {
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	Queue() awssqs.IQueue
	// Experimental.
	MetricApproximateAgeOfOldestMessageInSeconds() interface{}
	// Experimental.
	MetricApproximateVisibleMessageCount() interface{}
	// Experimental.
	MetricAverageMessageSizeInBytes() interface{}
	// Experimental.
	MetricConsumptionRate() interface{}
	// Experimental.
	MetricDeletedMessageCount() interface{}
	// Experimental.
	MetricIncomingMessageCount() interface{}
	// Experimental.
	MetricProductionRate() interface{}
	// Experimental.
	MetricTimeToDrain() interface{}
}

// The jsii proxy struct for SqsQueueMetricFactory
type jsiiProxy_SqsQueueMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_SqsQueueMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMetricFactory) Queue() awssqs.IQueue {
	var returns awssqs.IQueue
	_jsii_.Get(
		j,
		"queue",
		&returns,
	)
	return returns
}


// Experimental.
func NewSqsQueueMetricFactory(metricFactory MetricFactory, props *SqsQueueMetricFactoryProps) SqsQueueMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_SqsQueueMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSqsQueueMetricFactory_Override(s SqsQueueMetricFactory, metricFactory MetricFactory, props *SqsQueueMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricApproximateAgeOfOldestMessageInSeconds() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricApproximateAgeOfOldestMessageInSeconds",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricApproximateVisibleMessageCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricApproximateVisibleMessageCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricAverageMessageSizeInBytes() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricAverageMessageSizeInBytes",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricConsumptionRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricConsumptionRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricDeletedMessageCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricDeletedMessageCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricIncomingMessageCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricIncomingMessageCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricProductionRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricProductionRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMetricFactory) MetricTimeToDrain() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricTimeToDrain",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SqsQueueMetricFactoryProps struct {
	// Experimental.
	Queue awssqs.IQueue `field:"required" json:"queue" yaml:"queue"`
}

// Experimental.
type SqsQueueMonitoring interface {
	Monitoring
	// Experimental.
	AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConsumptionRateMetric() interface{}
	// Experimental.
	CountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DeletedMessagesMetric() interface{}
	// Experimental.
	IncomingMessagesMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MessageSizeMetric() interface{}
	// Experimental.
	OldestMessageAgeMetric() interface{}
	// Experimental.
	ProductionRateMetric() interface{}
	// Experimental.
	QueueAlarmFactory() QueueAlarmFactory
	// Experimental.
	QueueUrl() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TimeToDrainAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TimeToDrainMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	VisibleMessagesMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateProducerAndConsumerRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTimeToDrainWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	ResolveQueueName(queue awssqs.IQueue) *string
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SqsQueueMonitoring
type jsiiProxy_SqsQueueMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_SqsQueueMonitoring) AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"ageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) ConsumptionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumptionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) CountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"countAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) DeletedMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deletedMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) IncomingMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) MessageSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"messageSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) OldestMessageAgeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"oldestMessageAgeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) ProductionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"productionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) QueueAlarmFactory() QueueAlarmFactory {
	var returns QueueAlarmFactory
	_jsii_.Get(
		j,
		"queueAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) QueueUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"queueUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) TimeToDrainAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"timeToDrainAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) TimeToDrainMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timeToDrainMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoring) VisibleMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"visibleMessagesMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewSqsQueueMonitoring(scope MonitoringScope, props *SqsQueueMonitoringProps, invokedFromSuper *bool) SqsQueueMonitoring {
	_init_.Initialize()

	j := jsiiProxy_SqsQueueMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMonitoring",
		[]interface{}{scope, props, invokedFromSuper},
		&j,
	)

	return &j
}

// Experimental.
func NewSqsQueueMonitoring_Override(s SqsQueueMonitoring, scope MonitoringScope, props *SqsQueueMonitoringProps, invokedFromSuper *bool) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMonitoring",
		[]interface{}{scope, props, invokedFromSuper},
		s,
	)
}

func (s *jsiiProxy_SqsQueueMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_SqsQueueMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageAgeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateProducerAndConsumerRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createProducerAndConsumerRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateTimeToDrainWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createTimeToDrainWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		s,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) ResolveQueueName(queue awssqs.IQueue) *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"resolveQueueName",
		[]interface{}{queue},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SqsQueueMonitoringOptions struct {
	// Experimental.
	AddQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addQueueMaxIncomingMessagesAlarm" yaml:"addQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addQueueMaxMessageAgeAlarm" yaml:"addQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addQueueMaxSizeAlarm" yaml:"addQueueMaxSizeAlarm"`
	// Experimental.
	AddQueueMaxTimeToDrainMessagesAlarm *map[string]*MaxTimeToDrainThreshold `field:"optional" json:"addQueueMaxTimeToDrainMessagesAlarm" yaml:"addQueueMaxTimeToDrainMessagesAlarm"`
	// Experimental.
	AddQueueMinIncomingMessagesAlarm *map[string]*MinIncomingMessagesCountThreshold `field:"optional" json:"addQueueMinIncomingMessagesAlarm" yaml:"addQueueMinIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMinSizeAlarm *map[string]*MinMessageCountThreshold `field:"optional" json:"addQueueMinSizeAlarm" yaml:"addQueueMinSizeAlarm"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type SqsQueueMonitoringProps struct {
	// Experimental.
	Queue awssqs.IQueue `field:"required" json:"queue" yaml:"queue"`
	// Experimental.
	AddQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addQueueMaxIncomingMessagesAlarm" yaml:"addQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addQueueMaxMessageAgeAlarm" yaml:"addQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addQueueMaxSizeAlarm" yaml:"addQueueMaxSizeAlarm"`
	// Experimental.
	AddQueueMaxTimeToDrainMessagesAlarm *map[string]*MaxTimeToDrainThreshold `field:"optional" json:"addQueueMaxTimeToDrainMessagesAlarm" yaml:"addQueueMaxTimeToDrainMessagesAlarm"`
	// Experimental.
	AddQueueMinIncomingMessagesAlarm *map[string]*MinIncomingMessagesCountThreshold `field:"optional" json:"addQueueMinIncomingMessagesAlarm" yaml:"addQueueMinIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMinSizeAlarm *map[string]*MinMessageCountThreshold `field:"optional" json:"addQueueMinSizeAlarm" yaml:"addQueueMinSizeAlarm"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type SqsQueueMonitoringWithDlq interface {
	SqsQueueMonitoring
	// Experimental.
	AddDeadLetterQueueToSummaryDashboard() *bool
	// Experimental.
	AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	ConsumptionRateMetric() interface{}
	// Experimental.
	CountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DeadLetterAgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DeadLetterCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	DeadLetterQueueAlarmFactory() QueueAlarmFactory
	// Experimental.
	DeadLetterQueueIncomingMessagesMetric() interface{}
	// Experimental.
	DeadLetterQueueOldestMessageAgeMetric() interface{}
	// Experimental.
	DeadLetterQueueVisibleMessagesMetric() interface{}
	// Experimental.
	DeadLetterTitle() *string
	// Experimental.
	DeadLetterUrl() *string
	// Experimental.
	DeletedMessagesMetric() interface{}
	// Experimental.
	IncomingMessagesMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	MessageSizeMetric() interface{}
	// Experimental.
	OldestMessageAgeMetric() interface{}
	// Experimental.
	ProductionRateMetric() interface{}
	// Experimental.
	QueueAlarmFactory() QueueAlarmFactory
	// Experimental.
	QueueUrl() *string
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	TimeToDrainAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	TimeToDrainMetric() interface{}
	// Experimental.
	Title() *string
	// Experimental.
	VisibleMessagesMetric() interface{}
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateDeadLetterMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateDeadLetterMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateDeadLetterTitleWidget() MonitoringHeaderWidget
	// Experimental.
	CreateMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateProducerAndConsumerRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTimeToDrainWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Experimental.
	ResolveQueueName(queue awssqs.IQueue) *string
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SqsQueueMonitoringWithDlq
type jsiiProxy_SqsQueueMonitoringWithDlq struct {
	jsiiProxy_SqsQueueMonitoring
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) AddDeadLetterQueueToSummaryDashboard() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"addDeadLetterQueueToSummaryDashboard",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) AgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"ageAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) ConsumptionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"consumptionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) CountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"countAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterAgeAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"deadLetterAgeAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"deadLetterCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterQueueAlarmFactory() QueueAlarmFactory {
	var returns QueueAlarmFactory
	_jsii_.Get(
		j,
		"deadLetterQueueAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterQueueIncomingMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deadLetterQueueIncomingMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterQueueOldestMessageAgeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deadLetterQueueOldestMessageAgeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterQueueVisibleMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deadLetterQueueVisibleMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterTitle() *string {
	var returns *string
	_jsii_.Get(
		j,
		"deadLetterTitle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeadLetterUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"deadLetterUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) DeletedMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"deletedMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) IncomingMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"incomingMessagesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) MessageSizeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"messageSizeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) OldestMessageAgeMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"oldestMessageAgeMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) ProductionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"productionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) QueueAlarmFactory() QueueAlarmFactory {
	var returns QueueAlarmFactory
	_jsii_.Get(
		j,
		"queueAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) QueueUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"queueUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) TimeToDrainAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"timeToDrainAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) TimeToDrainMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timeToDrainMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SqsQueueMonitoringWithDlq) VisibleMessagesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"visibleMessagesMetric",
		&returns,
	)
	return returns
}


// Experimental.
func NewSqsQueueMonitoringWithDlq(scope MonitoringScope, props *SqsQueueMonitoringWithDlqProps) SqsQueueMonitoringWithDlq {
	_init_.Initialize()

	j := jsiiProxy_SqsQueueMonitoringWithDlq{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMonitoringWithDlq",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSqsQueueMonitoringWithDlq_Override(s SqsQueueMonitoringWithDlq, scope MonitoringScope, props *SqsQueueMonitoringWithDlqProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SqsQueueMonitoringWithDlq",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateDeadLetterMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createDeadLetterMessageAgeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateDeadLetterMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createDeadLetterMessageCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateDeadLetterTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		s,
		"createDeadLetterTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateMessageAgeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageAgeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateMessageCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateMessageSizeWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createMessageSizeWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateProducerAndConsumerRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createProducerAndConsumerRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateTimeToDrainWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createTimeToDrainWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		s,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) ResolveQueueName(queue awssqs.IQueue) *string {
	var returns *string

	_jsii_.Invoke(
		s,
		"resolveQueueName",
		[]interface{}{queue},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SqsQueueMonitoringWithDlq) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SqsQueueMonitoringWithDlqProps struct {
	// Experimental.
	Queue awssqs.IQueue `field:"required" json:"queue" yaml:"queue"`
	// Experimental.
	AddQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addQueueMaxIncomingMessagesAlarm" yaml:"addQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addQueueMaxMessageAgeAlarm" yaml:"addQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addQueueMaxSizeAlarm" yaml:"addQueueMaxSizeAlarm"`
	// Experimental.
	AddQueueMaxTimeToDrainMessagesAlarm *map[string]*MaxTimeToDrainThreshold `field:"optional" json:"addQueueMaxTimeToDrainMessagesAlarm" yaml:"addQueueMaxTimeToDrainMessagesAlarm"`
	// Experimental.
	AddQueueMinIncomingMessagesAlarm *map[string]*MinIncomingMessagesCountThreshold `field:"optional" json:"addQueueMinIncomingMessagesAlarm" yaml:"addQueueMinIncomingMessagesAlarm"`
	// Experimental.
	AddQueueMinSizeAlarm *map[string]*MinMessageCountThreshold `field:"optional" json:"addQueueMinSizeAlarm" yaml:"addQueueMinSizeAlarm"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Alarm on the number of messages added to a queue.
	//
	// Note that this corresponds with the NumberOfMessagesSent metric, which does not capture messages sent to the DLQ
	// as a result of a failed processing attempt.
	// See: https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html#sqs-dlq-number-of-messages
	//
	// Experimental.
	AddDeadLetterQueueMaxIncomingMessagesAlarm *map[string]*MaxIncomingMessagesCountThreshold `field:"optional" json:"addDeadLetterQueueMaxIncomingMessagesAlarm" yaml:"addDeadLetterQueueMaxIncomingMessagesAlarm"`
	// Experimental.
	AddDeadLetterQueueMaxMessageAgeAlarm *map[string]*MaxMessageAgeThreshold `field:"optional" json:"addDeadLetterQueueMaxMessageAgeAlarm" yaml:"addDeadLetterQueueMaxMessageAgeAlarm"`
	// Experimental.
	AddDeadLetterQueueMaxSizeAlarm *map[string]*MaxMessageCountThreshold `field:"optional" json:"addDeadLetterQueueMaxSizeAlarm" yaml:"addDeadLetterQueueMaxSizeAlarm"`
	// Experimental.
	DeadLetterQueue awssqs.IQueue `field:"required" json:"deadLetterQueue" yaml:"deadLetterQueue"`
	// Indicates whether the DLQ monitoring should be added to summary dashboard.
	// Experimental.
	AddDeadLetterQueueToSummaryDashboard *bool `field:"optional" json:"addDeadLetterQueueToSummaryDashboard" yaml:"addDeadLetterQueueToSummaryDashboard"`
}

// Experimental.
type StepFunctionActivityMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricActivitiesFailed() interface{}
	// Experimental.
	MetricActivitiesFailedRate() interface{}
	// Experimental.
	MetricActivitiesHeartbeatTimedOut() interface{}
	// Experimental.
	MetricActivitiesScheduled() interface{}
	// Experimental.
	MetricActivitiesStarted() interface{}
	// Experimental.
	MetricActivitiesSucceeded() interface{}
	// Experimental.
	MetricActivitiesTimedOut() interface{}
	// Experimental.
	MetricActivityRunTimeP50InMillis() interface{}
	// Experimental.
	MetricActivityRunTimeP90InMillis() interface{}
	// Experimental.
	MetricActivityRunTimeP99InMillis() interface{}
	// Experimental.
	MetricActivityScheduleTimeP50InMillis() interface{}
	// Experimental.
	MetricActivityScheduleTimeP90InMillis() interface{}
	// Experimental.
	MetricActivityScheduleTimeP99InMillis() interface{}
	// Experimental.
	MetricActivityTimeP50InMillis() interface{}
	// Experimental.
	MetricActivityTimeP90InMillis() interface{}
	// Experimental.
	MetricActivityTimeP99InMillis() interface{}
}

// The jsii proxy struct for StepFunctionActivityMetricFactory
type jsiiProxy_StepFunctionActivityMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_StepFunctionActivityMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionActivityMetricFactory(metricFactory MetricFactory, props *StepFunctionActivityMetricFactoryProps) StepFunctionActivityMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionActivityMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionActivityMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionActivityMetricFactory_Override(s StepFunctionActivityMetricFactory, metricFactory MetricFactory, props *StepFunctionActivityMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionActivityMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesFailed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesFailed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesFailedRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesFailedRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesHeartbeatTimedOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesHeartbeatTimedOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesScheduled() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesScheduled",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesStarted() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesStarted",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesSucceeded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesSucceeded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivitiesTimedOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivitiesTimedOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityRunTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityRunTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityRunTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityRunTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityRunTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityRunTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityScheduleTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityScheduleTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityScheduleTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityScheduleTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityScheduleTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityScheduleTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMetricFactory) MetricActivityTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricActivityTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionActivityMetricFactoryProps struct {
	// Experimental.
	Activity awsstepfunctions.IActivity `field:"required" json:"activity" yaml:"activity"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type StepFunctionActivityMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	DurationAlarmFactory() LatencyAlarmFactory
	// Experimental.
	DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedActivitiesMetric() interface{}
	// Experimental.
	FailedActivitiesRateMetric() interface{}
	// Experimental.
	HeartbeatTimedOutActivitiesMetrics() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	P50DurationMetric() interface{}
	// Experimental.
	P90DurationMetric() interface{}
	// Experimental.
	P99DurationMetric() interface{}
	// Experimental.
	ScheduledActivitiesMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StartedActivitiesMetric() interface{}
	// Experimental.
	SucceededActivitiesMetric() interface{}
	// Experimental.
	TimedOutActivitiesMetrics() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for StepFunctionActivityMonitoring
type jsiiProxy_StepFunctionActivityMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) DurationAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"durationAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"durationAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) FailedActivitiesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedActivitiesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) FailedActivitiesRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedActivitiesRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) HeartbeatTimedOutActivitiesMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"heartbeatTimedOutActivitiesMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) P50DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) P90DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) P99DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) ScheduledActivitiesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"scheduledActivitiesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) StartedActivitiesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"startedActivitiesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) SucceededActivitiesMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"succeededActivitiesMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) TimedOutActivitiesMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timedOutActivitiesMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionActivityMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionActivityMonitoring(scope MonitoringScope, props *StepFunctionActivityMonitoringProps) StepFunctionActivityMonitoring {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionActivityMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionActivityMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionActivityMonitoring_Override(s StepFunctionActivityMonitoring, scope MonitoringScope, props *StepFunctionActivityMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionActivityMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionActivityMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionActivityMonitoringProps struct {
	// Experimental.
	Activity awsstepfunctions.IActivity `field:"required" json:"activity" yaml:"activity"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedActivitiesCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedActivitiesCountAlarm" yaml:"addFailedActivitiesCountAlarm"`
	// Experimental.
	AddFailedActivitiesRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedActivitiesRateAlarm" yaml:"addFailedActivitiesRateAlarm"`
	// Experimental.
	AddTimedOutActivitiesCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addTimedOutActivitiesCountAlarm" yaml:"addTimedOutActivitiesCountAlarm"`
}

// Experimental.
type StepFunctionLambdaIntegrationMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricFunctionRunTimeP50InMillis() interface{}
	// Experimental.
	MetricFunctionRunTimeP90InMillis() interface{}
	// Experimental.
	MetricFunctionRunTimeP99InMillis() interface{}
	// Experimental.
	MetricFunctionScheduleTimeP50InMillis() interface{}
	// Experimental.
	MetricFunctionScheduleTimeP90InMillis() interface{}
	// Experimental.
	MetricFunctionScheduleTimeP99InMillis() interface{}
	// Experimental.
	MetricFunctionsFailed() interface{}
	// Experimental.
	MetricFunctionsFailedRate() interface{}
	// Experimental.
	MetricFunctionsScheduled() interface{}
	// Experimental.
	MetricFunctionsStarted() interface{}
	// Experimental.
	MetricFunctionsSucceeded() interface{}
	// Experimental.
	MetricFunctionsTimedOut() interface{}
	// Experimental.
	MetricFunctionTimeP50InMillis() interface{}
	// Experimental.
	MetricFunctionTimeP90InMillis() interface{}
	// Experimental.
	MetricFunctionTimeP99InMillis() interface{}
}

// The jsii proxy struct for StepFunctionLambdaIntegrationMetricFactory
type jsiiProxy_StepFunctionLambdaIntegrationMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionLambdaIntegrationMetricFactory(metricFactory MetricFactory, props *StepFunctionLambdaIntegrationMetricFactoryProps) StepFunctionLambdaIntegrationMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionLambdaIntegrationMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionLambdaIntegrationMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionLambdaIntegrationMetricFactory_Override(s StepFunctionLambdaIntegrationMetricFactory, metricFactory MetricFactory, props *StepFunctionLambdaIntegrationMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionLambdaIntegrationMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionRunTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionRunTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionRunTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionRunTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionRunTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionRunTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionScheduleTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionScheduleTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionScheduleTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionScheduleTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionScheduleTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionScheduleTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsFailed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsFailed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsFailedRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsFailedRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsScheduled() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsScheduled",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsStarted() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsStarted",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsSucceeded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsSucceeded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionsTimedOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionsTimedOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMetricFactory) MetricFunctionTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricFunctionTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionLambdaIntegrationMetricFactoryProps struct {
	// Experimental.
	LambdaFunction awslambda.IFunction `field:"required" json:"lambdaFunction" yaml:"lambdaFunction"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type StepFunctionLambdaIntegrationMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	DurationAlarmFactory() LatencyAlarmFactory
	// Experimental.
	DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedFunctionRateMetric() interface{}
	// Experimental.
	FailedFunctionsMetric() interface{}
	// Experimental.
	FunctionUrl() *string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	P50DurationMetric() interface{}
	// Experimental.
	P90DurationMetric() interface{}
	// Experimental.
	P99DurationMetric() interface{}
	// Experimental.
	ScheduledFunctionsMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StartedFunctionsMetric() interface{}
	// Experimental.
	SucceededFunctionsMetric() interface{}
	// Experimental.
	TimedOutFunctionsMetrics() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for StepFunctionLambdaIntegrationMonitoring
type jsiiProxy_StepFunctionLambdaIntegrationMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) DurationAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"durationAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"durationAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) FailedFunctionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedFunctionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) FailedFunctionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedFunctionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) FunctionUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"functionUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) P50DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) P90DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) P99DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) ScheduledFunctionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"scheduledFunctionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) StartedFunctionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"startedFunctionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) SucceededFunctionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"succeededFunctionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) TimedOutFunctionsMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timedOutFunctionsMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionLambdaIntegrationMonitoring(scope MonitoringScope, props *StepFunctionLambdaIntegrationMonitoringProps) StepFunctionLambdaIntegrationMonitoring {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionLambdaIntegrationMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionLambdaIntegrationMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionLambdaIntegrationMonitoring_Override(s StepFunctionLambdaIntegrationMonitoring, scope MonitoringScope, props *StepFunctionLambdaIntegrationMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionLambdaIntegrationMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionLambdaIntegrationMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionLambdaIntegrationMonitoringProps struct {
	// Experimental.
	LambdaFunction awslambda.IFunction `field:"required" json:"lambdaFunction" yaml:"lambdaFunction"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedFunctionsCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedFunctionsCountAlarm" yaml:"addFailedFunctionsCountAlarm"`
	// Experimental.
	AddFailedFunctionsRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedFunctionsRateAlarm" yaml:"addFailedFunctionsRateAlarm"`
	// Experimental.
	AddTimedOutFunctionsCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addTimedOutFunctionsCountAlarm" yaml:"addTimedOutFunctionsCountAlarm"`
}

// Experimental.
type StepFunctionMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricExecutionsAborted() interface{}
	// Experimental.
	MetricExecutionsFailed() interface{}
	// Experimental.
	MetricExecutionsFailedRate() interface{}
	// Experimental.
	MetricExecutionsStarted() interface{}
	// Experimental.
	MetricExecutionsSucceeded() interface{}
	// Experimental.
	MetricExecutionsTimedOut() interface{}
	// Experimental.
	MetricExecutionThrottled() interface{}
	// Experimental.
	MetricExecutionTimeP50InMillis() interface{}
	// Experimental.
	MetricExecutionTimeP90InMillis() interface{}
	// Experimental.
	MetricExecutionTimeP99InMillis() interface{}
}

// The jsii proxy struct for StepFunctionMetricFactory
type jsiiProxy_StepFunctionMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_StepFunctionMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionMetricFactory(metricFactory MetricFactory, props *StepFunctionMetricFactoryProps) StepFunctionMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionMetricFactory_Override(s StepFunctionMetricFactory, metricFactory MetricFactory, props *StepFunctionMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsAborted() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsAborted",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsFailed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsFailed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsFailedRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsFailedRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsStarted() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsStarted",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsSucceeded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsSucceeded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionsTimedOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionsTimedOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionThrottled() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionThrottled",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMetricFactory) MetricExecutionTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricExecutionTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionMetricFactoryProps struct {
	// Experimental.
	StateMachine awsstepfunctions.IStateMachine `field:"required" json:"stateMachine" yaml:"stateMachine"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type StepFunctionMonitoring interface {
	Monitoring
	// Experimental.
	AbortedExecutionsMetric() interface{}
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	DurationAlarmFactory() LatencyAlarmFactory
	// Experimental.
	DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedExecutionRateMetric() interface{}
	// Experimental.
	FailedExecutionsMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	P50DurationMetric() interface{}
	// Experimental.
	P90DurationMetric() interface{}
	// Experimental.
	P99DurationMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StartedExecutionsMetric() interface{}
	// Experimental.
	StateMachineUrl() *string
	// Experimental.
	SucceededExecutionsMetric() interface{}
	// Experimental.
	TaskHealthAlarmFactory() TaskHealthAlarmFactory
	// Experimental.
	ThrottledExecutionsMetric() interface{}
	// Experimental.
	TimedOutExecutionsMetrics() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for StepFunctionMonitoring
type jsiiProxy_StepFunctionMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_StepFunctionMonitoring) AbortedExecutionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"abortedExecutionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) DurationAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"durationAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"durationAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) FailedExecutionRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedExecutionRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) FailedExecutionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedExecutionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) P50DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) P90DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) P99DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) StartedExecutionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"startedExecutionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) StateMachineUrl() *string {
	var returns *string
	_jsii_.Get(
		j,
		"stateMachineUrl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) SucceededExecutionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"succeededExecutionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) TaskHealthAlarmFactory() TaskHealthAlarmFactory {
	var returns TaskHealthAlarmFactory
	_jsii_.Get(
		j,
		"taskHealthAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) ThrottledExecutionsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"throttledExecutionsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) TimedOutExecutionsMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timedOutExecutionsMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionMonitoring(scope MonitoringScope, props *StepFunctionMonitoringProps) StepFunctionMonitoring {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionMonitoring_Override(s StepFunctionMonitoring, scope MonitoringScope, props *StepFunctionMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_StepFunctionMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddAbortedExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addAbortedExecutionCountAlarm" yaml:"addAbortedExecutionCountAlarm"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedExecutionCountAlarm" yaml:"addFailedExecutionCountAlarm"`
	// Experimental.
	AddFailedExecutionRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedExecutionRateAlarm" yaml:"addFailedExecutionRateAlarm"`
	// Add minimum started execution count alarm for the stepfunctions.
	// Experimental.
	AddMinStartedExecutionCountAlarm *map[string]*MinRunningTaskCountThreshold `field:"optional" json:"addMinStartedExecutionCountAlarm" yaml:"addMinStartedExecutionCountAlarm"`
	// Experimental.
	AddThrottledExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addThrottledExecutionCountAlarm" yaml:"addThrottledExecutionCountAlarm"`
	// Experimental.
	AddTimedOutExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addTimedOutExecutionCountAlarm" yaml:"addTimedOutExecutionCountAlarm"`
}

// Experimental.
type StepFunctionMonitoringProps struct {
	// Experimental.
	StateMachine awsstepfunctions.IStateMachine `field:"required" json:"stateMachine" yaml:"stateMachine"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddAbortedExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addAbortedExecutionCountAlarm" yaml:"addAbortedExecutionCountAlarm"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedExecutionCountAlarm" yaml:"addFailedExecutionCountAlarm"`
	// Experimental.
	AddFailedExecutionRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedExecutionRateAlarm" yaml:"addFailedExecutionRateAlarm"`
	// Add minimum started execution count alarm for the stepfunctions.
	// Experimental.
	AddMinStartedExecutionCountAlarm *map[string]*MinRunningTaskCountThreshold `field:"optional" json:"addMinStartedExecutionCountAlarm" yaml:"addMinStartedExecutionCountAlarm"`
	// Experimental.
	AddThrottledExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addThrottledExecutionCountAlarm" yaml:"addThrottledExecutionCountAlarm"`
	// Experimental.
	AddTimedOutExecutionCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addTimedOutExecutionCountAlarm" yaml:"addTimedOutExecutionCountAlarm"`
}

// Experimental.
type StepFunctionServiceIntegrationMetricFactory interface {
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	MetricServiceIntegrationRunTimeP50InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationRunTimeP90InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationRunTimeP99InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationScheduleTimeP50InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationScheduleTimeP90InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationScheduleTimeP99InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationsFailed() interface{}
	// Experimental.
	MetricServiceIntegrationsFailedRate() interface{}
	// Experimental.
	MetricServiceIntegrationsScheduled() interface{}
	// Experimental.
	MetricServiceIntegrationsStarted() interface{}
	// Experimental.
	MetricServiceIntegrationsSucceeded() interface{}
	// Experimental.
	MetricServiceIntegrationsTimedOut() interface{}
	// Experimental.
	MetricServiceIntegrationTimeP50InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationTimeP90InMillis() interface{}
	// Experimental.
	MetricServiceIntegrationTimeP99InMillis() interface{}
}

// The jsii proxy struct for StepFunctionServiceIntegrationMetricFactory
type jsiiProxy_StepFunctionServiceIntegrationMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionServiceIntegrationMetricFactory(metricFactory MetricFactory, props *StepFunctionServiceIntegrationMetricFactoryProps) StepFunctionServiceIntegrationMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionServiceIntegrationMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionServiceIntegrationMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionServiceIntegrationMetricFactory_Override(s StepFunctionServiceIntegrationMetricFactory, metricFactory MetricFactory, props *StepFunctionServiceIntegrationMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionServiceIntegrationMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationRunTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationRunTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationRunTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationRunTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationRunTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationRunTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationScheduleTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationScheduleTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationScheduleTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationScheduleTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationScheduleTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationScheduleTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsFailed() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsFailed",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsFailedRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsFailedRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsScheduled() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsScheduled",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsStarted() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsStarted",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsSucceeded() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsSucceeded",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationsTimedOut() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationsTimedOut",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationTimeP50InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationTimeP50InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationTimeP90InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationTimeP90InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMetricFactory) MetricServiceIntegrationTimeP99InMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricServiceIntegrationTimeP99InMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionServiceIntegrationMetricFactoryProps struct {
	// Experimental.
	ServiceIntegrationResourceArn *string `field:"required" json:"serviceIntegrationResourceArn" yaml:"serviceIntegrationResourceArn"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Experimental.
type StepFunctionServiceIntegrationMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	DurationAlarmFactory() LatencyAlarmFactory
	// Experimental.
	DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	FailedServiceIntegrationRateMetric() interface{}
	// Experimental.
	FailedServiceIntegrationsMetric() interface{}
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	P50DurationMetric() interface{}
	// Experimental.
	P90DurationMetric() interface{}
	// Experimental.
	P99DurationMetric() interface{}
	// Experimental.
	ScheduledServiceIntegrationsMetric() interface{}
	// Experimental.
	Scope() MonitoringScope
	// Experimental.
	StartedServiceIntegrationsMetric() interface{}
	// Experimental.
	SucceededServiceIntegrationsMetric() interface{}
	// Experimental.
	TimedOutServiceIntegrationsMetrics() interface{}
	// Experimental.
	Title() *string
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for StepFunctionServiceIntegrationMonitoring
type jsiiProxy_StepFunctionServiceIntegrationMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) DurationAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"durationAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) DurationAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"durationAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) FailedServiceIntegrationRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedServiceIntegrationRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) FailedServiceIntegrationsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"failedServiceIntegrationsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) P50DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p50DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) P90DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p90DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) P99DurationMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"p99DurationMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) ScheduledServiceIntegrationsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"scheduledServiceIntegrationsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) StartedServiceIntegrationsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"startedServiceIntegrationsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) SucceededServiceIntegrationsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"succeededServiceIntegrationsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) TimedOutServiceIntegrationsMetrics() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"timedOutServiceIntegrationsMetrics",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_StepFunctionServiceIntegrationMonitoring) Title() *string {
	var returns *string
	_jsii_.Get(
		j,
		"title",
		&returns,
	)
	return returns
}


// Experimental.
func NewStepFunctionServiceIntegrationMonitoring(scope MonitoringScope, props *StepFunctionServiceIntegrationMonitoringProps) StepFunctionServiceIntegrationMonitoring {
	_init_.Initialize()

	j := jsiiProxy_StepFunctionServiceIntegrationMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionServiceIntegrationMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewStepFunctionServiceIntegrationMonitoring_Override(s StepFunctionServiceIntegrationMonitoring, scope MonitoringScope, props *StepFunctionServiceIntegrationMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.StepFunctionServiceIntegrationMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_StepFunctionServiceIntegrationMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type StepFunctionServiceIntegrationMonitoringProps struct {
	// Experimental.
	ServiceIntegrationResourceArn *string `field:"required" json:"serviceIntegrationResourceArn" yaml:"serviceIntegrationResourceArn"`
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	AddDurationP50Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP50Alarm" yaml:"addDurationP50Alarm"`
	// Experimental.
	AddDurationP90Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP90Alarm" yaml:"addDurationP90Alarm"`
	// Experimental.
	AddDurationP99Alarm *map[string]*DurationThreshold `field:"optional" json:"addDurationP99Alarm" yaml:"addDurationP99Alarm"`
	// Experimental.
	AddFailedServiceIntegrationsCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addFailedServiceIntegrationsCountAlarm" yaml:"addFailedServiceIntegrationsCountAlarm"`
	// Experimental.
	AddFailedServiceIntegrationsRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"addFailedServiceIntegrationsRateAlarm" yaml:"addFailedServiceIntegrationsRateAlarm"`
	// Experimental.
	AddTimedOutServiceIntegrationsCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"addTimedOutServiceIntegrationsCountAlarm" yaml:"addTimedOutServiceIntegrationsCountAlarm"`
}

// Experimental.
type StorageType string

const (
	// Experimental.
	StorageType_DEEP_ARCHIVE_OBJECT_OVERHEAD StorageType = "DEEP_ARCHIVE_OBJECT_OVERHEAD"
	// Experimental.
	StorageType_DEEP_ARCHIVE_S3_OBJECT_OVERHEAD StorageType = "DEEP_ARCHIVE_S3_OBJECT_OVERHEAD"
	// Experimental.
	StorageType_DEEP_ARCHIVE_STAGING_STORAGE StorageType = "DEEP_ARCHIVE_STAGING_STORAGE"
	// Experimental.
	StorageType_DEEP_ARCHIVE_STORAGE StorageType = "DEEP_ARCHIVE_STORAGE"
	// Experimental.
	StorageType_GLACIER_OBJECT_OVERHEAD StorageType = "GLACIER_OBJECT_OVERHEAD"
	// Experimental.
	StorageType_GLACIER_S3_OBJECT_OVERHEAD StorageType = "GLACIER_S3_OBJECT_OVERHEAD"
	// Experimental.
	StorageType_GLACIER_STAGING_STORAGE StorageType = "GLACIER_STAGING_STORAGE"
	// Experimental.
	StorageType_GLACIER_STORAGE StorageType = "GLACIER_STORAGE"
	// Experimental.
	StorageType_INTELLIGENT_TIERING_FA_STORAGE StorageType = "INTELLIGENT_TIERING_FA_STORAGE"
	// Experimental.
	StorageType_INTELLIGENT_TIERING_IA_STORAGE StorageType = "INTELLIGENT_TIERING_IA_STORAGE"
	// Experimental.
	StorageType_ONE_ZONE_IA_SIZE_OVERHEAD StorageType = "ONE_ZONE_IA_SIZE_OVERHEAD"
	// Experimental.
	StorageType_ONE_ZONE_IA_STORAGE StorageType = "ONE_ZONE_IA_STORAGE"
	// Experimental.
	StorageType_REDUCED_REDUNDANCY_STORAGE StorageType = "REDUCED_REDUNDANCY_STORAGE"
	// Experimental.
	StorageType_STANDARD_IA_SIZE_OVERHEAD StorageType = "STANDARD_IA_SIZE_OVERHEAD"
	// Experimental.
	StorageType_STANDARD_IA_STORAGE StorageType = "STANDARD_IA_STORAGE"
	// Experimental.
	StorageType_STANDARD_STORAGE StorageType = "STANDARD_STORAGE"
)

// Experimental.
type SyntheticsCanaryMetricFactory interface {
	// Experimental.
	Canary() awscdksyntheticsalpha.Canary
	// Experimental.
	DimensionsMap() *map[string]*string
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	RateComputationMethod() RateComputationMethod
	// Experimental.
	Metric4xxErrorCount() interface{}
	// Experimental.
	Metric4xxErrorRate() interface{}
	// Experimental.
	Metric5xxFaultCount() interface{}
	// Experimental.
	Metric5xxFaultRate() interface{}
	// Experimental.
	MetricLatencyAverageInMillis() interface{}
	// Experimental.
	MetricSuccessInPercent() interface{}
}

// The jsii proxy struct for SyntheticsCanaryMetricFactory
type jsiiProxy_SyntheticsCanaryMetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_SyntheticsCanaryMetricFactory) Canary() awscdksyntheticsalpha.Canary {
	var returns awscdksyntheticsalpha.Canary
	_jsii_.Get(
		j,
		"canary",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMetricFactory) DimensionsMap() *map[string]*string {
	var returns *map[string]*string
	_jsii_.Get(
		j,
		"dimensionsMap",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMetricFactory) RateComputationMethod() RateComputationMethod {
	var returns RateComputationMethod
	_jsii_.Get(
		j,
		"rateComputationMethod",
		&returns,
	)
	return returns
}


// Experimental.
func NewSyntheticsCanaryMetricFactory(metricFactory MetricFactory, props *SyntheticsCanaryMetricFactoryProps) SyntheticsCanaryMetricFactory {
	_init_.Initialize()

	j := jsiiProxy_SyntheticsCanaryMetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SyntheticsCanaryMetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSyntheticsCanaryMetricFactory_Override(s SyntheticsCanaryMetricFactory, metricFactory MetricFactory, props *SyntheticsCanaryMetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SyntheticsCanaryMetricFactory",
		[]interface{}{metricFactory, props},
		s,
	)
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) Metric4xxErrorCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metric4xxErrorCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) Metric4xxErrorRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metric4xxErrorRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) Metric5xxFaultCount() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metric5xxFaultCount",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) Metric5xxFaultRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metric5xxFaultRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) MetricLatencyAverageInMillis() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricLatencyAverageInMillis",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMetricFactory) MetricSuccessInPercent() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		s,
		"metricSuccessInPercent",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SyntheticsCanaryMetricFactoryProps struct {
	// CloudWatch Canary to monitor.
	// Experimental.
	Canary awscdksyntheticsalpha.Canary `field:"required" json:"canary" yaml:"canary"`
	// Method used to calculate relative rates.
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
}

// Monitoring for CloudWatch Synthetics Canaries.
// See: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries.html
//
// Experimental.
type SyntheticsCanaryMonitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	AverageLatencyMetric() interface{}
	// Experimental.
	ErrorAlarmFactory() ErrorAlarmFactory
	// Experimental.
	ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorCountMetric() interface{}
	// Experimental.
	ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	ErrorRateMetric() interface{}
	// Experimental.
	FaultCountMetric() interface{}
	// Experimental.
	FaultRateMetric() interface{}
	// Experimental.
	HumanReadableName() *string
	// Experimental.
	LatencyAlarmFactory() LatencyAlarmFactory
	// Experimental.
	LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Experimental.
	CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for SyntheticsCanaryMonitoring
type jsiiProxy_SyntheticsCanaryMonitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) AverageLatencyMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"averageLatencyMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) ErrorAlarmFactory() ErrorAlarmFactory {
	var returns ErrorAlarmFactory
	_jsii_.Get(
		j,
		"errorAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) ErrorCountAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorCountAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) ErrorCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"errorCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) ErrorRateAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"errorRateAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) ErrorRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"errorRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) FaultCountMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"faultCountMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) FaultRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"faultRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) HumanReadableName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"humanReadableName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) LatencyAlarmFactory() LatencyAlarmFactory {
	var returns LatencyAlarmFactory
	_jsii_.Get(
		j,
		"latencyAlarmFactory",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) LatencyAnnotations() *[]*awscloudwatch.HorizontalAnnotation {
	var returns *[]*awscloudwatch.HorizontalAnnotation
	_jsii_.Get(
		j,
		"latencyAnnotations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_SyntheticsCanaryMonitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}


// Experimental.
func NewSyntheticsCanaryMonitoring(scope MonitoringScope, props *SyntheticsCanaryMonitoringProps) SyntheticsCanaryMonitoring {
	_init_.Initialize()

	j := jsiiProxy_SyntheticsCanaryMonitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.SyntheticsCanaryMonitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewSyntheticsCanaryMonitoring_Override(s SyntheticsCanaryMonitoring, scope MonitoringScope, props *SyntheticsCanaryMonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.SyntheticsCanaryMonitoring",
		[]interface{}{scope, props},
		s,
	)
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		s,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		s,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		s,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateErrorCountWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createErrorCountWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateErrorRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createErrorRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateLatencyWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		s,
		"createLatencyWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		s,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		s,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		s,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (s *jsiiProxy_SyntheticsCanaryMonitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		s,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type SyntheticsCanaryMonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4xxErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4xxErrorCountAlarm" yaml:"add4xxErrorCountAlarm"`
	// Experimental.
	Add4xxErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4xxErrorRateAlarm" yaml:"add4xxErrorRateAlarm"`
	// Experimental.
	Add5xxFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5xxFaultCountAlarm" yaml:"add5xxFaultCountAlarm"`
	// Experimental.
	Add5xxFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5xxFaultRateAlarm" yaml:"add5xxFaultRateAlarm"`
	// Experimental.
	AddAverageLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageLatencyAlarm" yaml:"addAverageLatencyAlarm"`
}

// Experimental.
type SyntheticsCanaryMonitoringProps struct {
	// CloudWatch Canary to monitor.
	// Experimental.
	Canary awscdksyntheticsalpha.Canary `field:"required" json:"canary" yaml:"canary"`
	// Method used to calculate relative rates.
	// Experimental.
	RateComputationMethod RateComputationMethod `field:"optional" json:"rateComputationMethod" yaml:"rateComputationMethod"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
	// Experimental.
	Add4xxErrorCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add4xxErrorCountAlarm" yaml:"add4xxErrorCountAlarm"`
	// Experimental.
	Add4xxErrorRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add4xxErrorRateAlarm" yaml:"add4xxErrorRateAlarm"`
	// Experimental.
	Add5xxFaultCountAlarm *map[string]*ErrorCountThreshold `field:"optional" json:"add5xxFaultCountAlarm" yaml:"add5xxFaultCountAlarm"`
	// Experimental.
	Add5xxFaultRateAlarm *map[string]*ErrorRateThreshold `field:"optional" json:"add5xxFaultRateAlarm" yaml:"add5xxFaultRateAlarm"`
	// Experimental.
	AddAverageLatencyAlarm *map[string]*LatencyThreshold `field:"optional" json:"addAverageLatencyAlarm" yaml:"addAverageLatencyAlarm"`
}

// Experimental.
type TaskHealthAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddAvailabilityAlarm(metric interface{}, props *AvailabilityThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddHealthyTaskCountAlarm(metric interface{}, props *HealthyTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddHealthyTaskPercentAlarm(metric interface{}, props *HealthyTaskPercentThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinRunningTaskCountAlarm(metric interface{}, props *MinRunningTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddRunningTaskCountAlarm(metric interface{}, props *RunningTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddRunningTaskRateAlarm(metric interface{}, props *RunningTaskRateThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddUnhealthyTaskCountAlarm(metric interface{}, props *UnhealthyTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for TaskHealthAlarmFactory
type jsiiProxy_TaskHealthAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_TaskHealthAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewTaskHealthAlarmFactory(alarmFactory AlarmFactory) TaskHealthAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_TaskHealthAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.TaskHealthAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewTaskHealthAlarmFactory_Override(t TaskHealthAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.TaskHealthAlarmFactory",
		[]interface{}{alarmFactory},
		t,
	)
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddAvailabilityAlarm(metric interface{}, props *AvailabilityThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addAvailabilityAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddHealthyTaskCountAlarm(metric interface{}, props *HealthyTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addHealthyTaskCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddHealthyTaskPercentAlarm(metric interface{}, props *HealthyTaskPercentThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addHealthyTaskPercentAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddMinRunningTaskCountAlarm(metric interface{}, props *MinRunningTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMinRunningTaskCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddRunningTaskCountAlarm(metric interface{}, props *RunningTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addRunningTaskCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddRunningTaskRateAlarm(metric interface{}, props *RunningTaskRateThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addRunningTaskRateAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TaskHealthAlarmFactory) AddUnhealthyTaskCountAlarm(metric interface{}, props *UnhealthyTaskCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addUnhealthyTaskCountAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type ThrottledEventsThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxThrottledEventsThreshold *float64 `field:"required" json:"maxThrottledEventsThreshold" yaml:"maxThrottledEventsThreshold"`
}

// Experimental.
type ThroughputAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMinProcessedBytesAlarm(metric interface{}, props *MinProcessedBytesThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for ThroughputAlarmFactory
type jsiiProxy_ThroughputAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_ThroughputAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewThroughputAlarmFactory(alarmFactory AlarmFactory) ThroughputAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_ThroughputAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.ThroughputAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewThroughputAlarmFactory_Override(t ThroughputAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.ThroughputAlarmFactory",
		[]interface{}{alarmFactory},
		t,
	)
}

func (t *jsiiProxy_ThroughputAlarmFactory) AddMinProcessedBytesAlarm(metric interface{}, props *MinProcessedBytesThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMinProcessedBytesAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type TopicAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMaxMessagesPublishedAlarm(metric interface{}, props *HighMessagesPublishedThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMessageNotificationsFailedAlarm(metric interface{}, props *NotificationsFailedThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinMessagesPublishedAlarm(metric interface{}, props *LowMessagesPublishedThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for TopicAlarmFactory
type jsiiProxy_TopicAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_TopicAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewTopicAlarmFactory(alarmFactory AlarmFactory) TopicAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_TopicAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.TopicAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewTopicAlarmFactory_Override(t TopicAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.TopicAlarmFactory",
		[]interface{}{alarmFactory},
		t,
	)
}

func (t *jsiiProxy_TopicAlarmFactory) AddMaxMessagesPublishedAlarm(metric interface{}, props *HighMessagesPublishedThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMaxMessagesPublishedAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TopicAlarmFactory) AddMessageNotificationsFailedAlarm(metric interface{}, props *NotificationsFailedThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMessageNotificationsFailedAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TopicAlarmFactory) AddMinMessagesPublishedAlarm(metric interface{}, props *LowMessagesPublishedThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMinMessagesPublishedAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type TpsAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMaxTpsAlarm(metric interface{}, props *HighTpsThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMinTpsAlarm(metric interface{}, props *LowTpsThreshold, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for TpsAlarmFactory
type jsiiProxy_TpsAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_TpsAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewTpsAlarmFactory(alarmFactory AlarmFactory) TpsAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_TpsAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.TpsAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewTpsAlarmFactory_Override(t TpsAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.TpsAlarmFactory",
		[]interface{}{alarmFactory},
		t,
	)
}

func (t *jsiiProxy_TpsAlarmFactory) AddMaxTpsAlarm(metric interface{}, props *HighTpsThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMaxTpsAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

func (t *jsiiProxy_TpsAlarmFactory) AddMinTpsAlarm(metric interface{}, props *LowTpsThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		t,
		"addMinTpsAlarm",
		[]interface{}{metric, props, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type UnhealthyTaskCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxUnhealthyTasks *float64 `field:"required" json:"maxUnhealthyTasks" yaml:"maxUnhealthyTasks"`
}

// Experimental.
type UsageAlarmFactory interface {
	// Experimental.
	AlarmFactory() AlarmFactory
	// Experimental.
	AddMaxCpuUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxDiskUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxFileDescriptorPercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxHeapMemoryAfterGCUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxMasterCpuUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxMasterMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMaxThreadCountUsageAlarm(percentMetric interface{}, props *UsageCountThreshold, disambiguator *string) *AlarmWithAnnotation
	// Experimental.
	AddMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, usageType UsageType, disambiguator *string) *AlarmWithAnnotation
}

// The jsii proxy struct for UsageAlarmFactory
type jsiiProxy_UsageAlarmFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_UsageAlarmFactory) AlarmFactory() AlarmFactory {
	var returns AlarmFactory
	_jsii_.Get(
		j,
		"alarmFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewUsageAlarmFactory(alarmFactory AlarmFactory) UsageAlarmFactory {
	_init_.Initialize()

	j := jsiiProxy_UsageAlarmFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.UsageAlarmFactory",
		[]interface{}{alarmFactory},
		&j,
	)

	return &j
}

// Experimental.
func NewUsageAlarmFactory_Override(u UsageAlarmFactory, alarmFactory AlarmFactory) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.UsageAlarmFactory",
		[]interface{}{alarmFactory},
		u,
	)
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxCpuUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxCpuUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxDiskUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxDiskUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxFileDescriptorPercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxFileDescriptorPercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxHeapMemoryAfterGCUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxHeapMemoryAfterGCUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxMasterCpuUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxMasterCpuUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxMasterMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxMasterMemoryUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxMemoryUsagePercentAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMaxThreadCountUsageAlarm(percentMetric interface{}, props *UsageCountThreshold, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMaxThreadCountUsageAlarm",
		[]interface{}{percentMetric, props, disambiguator},
		&returns,
	)

	return returns
}

func (u *jsiiProxy_UsageAlarmFactory) AddMemoryUsagePercentAlarm(percentMetric interface{}, props *UsageThreshold, usageType UsageType, disambiguator *string) *AlarmWithAnnotation {
	var returns *AlarmWithAnnotation

	_jsii_.Invoke(
		u,
		"addMemoryUsagePercentAlarm",
		[]interface{}{percentMetric, props, usageType, disambiguator},
		&returns,
	)

	return returns
}

// Experimental.
type UsageCountThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxUsageCount *float64 `field:"required" json:"maxUsageCount" yaml:"maxUsageCount"`
}

// Experimental.
type UsageThreshold struct {
	// Allows to override the default alarm action.
	// Experimental.
	ActionOverride IAlarmActionStrategy `field:"optional" json:"actionOverride" yaml:"actionOverride"`
	// Enables the configured CloudWatch alarm ticketing actions.
	// Experimental.
	ActionsEnabled *bool `field:"optional" json:"actionsEnabled" yaml:"actionsEnabled"`
	// A text included in the generated ticket description body, which fully replaces the generated text.
	// Experimental.
	AlarmDescriptionOverride *string `field:"optional" json:"alarmDescriptionOverride" yaml:"alarmDescriptionOverride"`
	// If this is defined, the alarm name is set to this exact value.
	//
	// Please be aware that you need to specify prefix for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Experimental.
	AlarmNameOverride *string `field:"optional" json:"alarmNameOverride" yaml:"alarmNameOverride"`
	// Comparison operator used to compare actual value against the threshold.
	// Experimental.
	ComparisonOperatorOverride awscloudwatch.ComparisonOperator `field:"optional" json:"comparisonOperatorOverride" yaml:"comparisonOperatorOverride"`
	// This allows user to attach custom parameters to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomParams *map[string]interface{} `field:"optional" json:"customParams" yaml:"customParams"`
	// This allows user to attach custom values to this alarm, which can later be accessed from the "useCreatedAlarms" method.
	// Experimental.
	CustomTags *[]*string `field:"optional" json:"customTags" yaml:"customTags"`
	// Number of breaches required to transition into an ALARM state.
	// Experimental.
	DatapointsToAlarm *float64 `field:"optional" json:"datapointsToAlarm" yaml:"datapointsToAlarm"`
	// If this is defined, the alarm dedupe string is set to this exact value.
	//
	// Please be aware that you need to handle deduping for different stages (Beta, Prod...) and realms (EU, NA...) manually.
	// Dedupe strings are global and not unique per CTI.
	// Experimental.
	DedupeStringOverride *string `field:"optional" json:"dedupeStringOverride" yaml:"dedupeStringOverride"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	DocumentationLink *string `field:"optional" json:"documentationLink" yaml:"documentationLink"`
	// Used only for alarms based on percentiles.
	//
	// If you specify <code>false</code>, the alarm state does not change during periods with too few data points to be statistically significant.
	// If you specify <code>true</code>, the alarm is always evaluated and possibly changes state no matter how many data points are available.
	// Experimental.
	EvaluateLowSampleCountPercentile *bool `field:"optional" json:"evaluateLowSampleCountPercentile" yaml:"evaluateLowSampleCountPercentile"`
	// Number of periods to consider when checking the number of breaching datapoints.
	// Experimental.
	EvaluationPeriods *float64 `field:"optional" json:"evaluationPeriods" yaml:"evaluationPeriods"`
	// Indicates whether the alarming range of values should be highlighted in the widget.
	// Experimental.
	FillAlarmRange *bool `field:"optional" json:"fillAlarmRange" yaml:"fillAlarmRange"`
	// Period override for the metric to alarm on.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// An optional link included in the generated ticket description body.
	// Experimental.
	RunbookLink *string `field:"optional" json:"runbookLink" yaml:"runbookLink"`
	// Behaviour in case the metric data is missing.
	// Experimental.
	TreatMissingDataOverride awscloudwatch.TreatMissingData `field:"optional" json:"treatMissingDataOverride" yaml:"treatMissingDataOverride"`
	// Experimental.
	MaxUsagePercent *float64 `field:"required" json:"maxUsagePercent" yaml:"maxUsagePercent"`
}

// Experimental.
type UsageType string

const (
	// Experimental.
	UsageType_P50 UsageType = "P50"
	// Experimental.
	UsageType_P70 UsageType = "P70"
	// Experimental.
	UsageType_P90 UsageType = "P90"
	// Experimental.
	UsageType_P99 UsageType = "P99"
	// Experimental.
	UsageType_P999 UsageType = "P999"
	// Experimental.
	UsageType_P9999 UsageType = "P9999"
	// Experimental.
	UsageType_P100 UsageType = "P100"
	// Experimental.
	UsageType_AVERAGE UsageType = "AVERAGE"
	// Experimental.
	UsageType_MAX UsageType = "MAX"
)

// Experimental.
type UserProvidedNames struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
}

// https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html.
// Experimental.
type WafV2MetricFactory interface {
	// Experimental.
	Dimensions() *map[string]interface{}
	// Experimental.
	MetricFactory() MetricFactory
	// Experimental.
	MetricAllowedRequests() interface{}
	// Experimental.
	MetricBlockedRequests() interface{}
	// Experimental.
	MetricBlockedRequestsRate() interface{}
}

// The jsii proxy struct for WafV2MetricFactory
type jsiiProxy_WafV2MetricFactory struct {
	_ byte // padding
}

func (j *jsiiProxy_WafV2MetricFactory) Dimensions() *map[string]interface{} {
	var returns *map[string]interface{}
	_jsii_.Get(
		j,
		"dimensions",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2MetricFactory) MetricFactory() MetricFactory {
	var returns MetricFactory
	_jsii_.Get(
		j,
		"metricFactory",
		&returns,
	)
	return returns
}


// Experimental.
func NewWafV2MetricFactory(metricFactory MetricFactory, props *WafV2MetricFactoryProps) WafV2MetricFactory {
	_init_.Initialize()

	j := jsiiProxy_WafV2MetricFactory{}

	_jsii_.Create(
		"cdk-monitoring-constructs.WafV2MetricFactory",
		[]interface{}{metricFactory, props},
		&j,
	)

	return &j
}

// Experimental.
func NewWafV2MetricFactory_Override(w WafV2MetricFactory, metricFactory MetricFactory, props *WafV2MetricFactoryProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.WafV2MetricFactory",
		[]interface{}{metricFactory, props},
		w,
	)
}

func (w *jsiiProxy_WafV2MetricFactory) MetricAllowedRequests() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		w,
		"metricAllowedRequests",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2MetricFactory) MetricBlockedRequests() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		w,
		"metricBlockedRequests",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2MetricFactory) MetricBlockedRequestsRate() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		w,
		"metricBlockedRequestsRate",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type WafV2MetricFactoryProps struct {
	// Experimental.
	Acl awswafv2.CfnWebACL `field:"required" json:"acl" yaml:"acl"`
	// Experimental.
	Region *string `field:"optional" json:"region" yaml:"region"`
}

// Monitoring for AWS Web Application Firewall.
// See: https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html
//
// Experimental.
type WafV2Monitoring interface {
	Monitoring
	// Experimental.
	Alarms() *[]*AlarmWithAnnotation
	// Experimental.
	AllowedRequestsMetric() interface{}
	// Experimental.
	BlockedRequestsMetric() interface{}
	// Experimental.
	BlockedRequestsRateMetric() interface{}
	// Experimental.
	HumanReadableName() *string
	// Experimental.
	LocalAlarmNamePrefixOverride() *string
	// Experimental.
	Scope() MonitoringScope
	// Adds an alarm.
	// Experimental.
	AddAlarm(alarm *AlarmWithAnnotation)
	// Returns widgets for all alarms.
	//
	// These can go to runbook or to service dashboard.
	// Experimental.
	AlarmWidgets() *[]awscloudwatch.IWidget
	// Creates a new alarm factory.
	//
	// Alarms created will be named with the given prefix, unless a local name override is present.
	// Experimental.
	CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory
	// Experimental.
	CreateAllowedRequestsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateBlockedRequestsRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Experimental.
	CreateBlockedRequestsWidget(width *float64, height *float64) awscloudwatch.GraphWidget
	// Returns all the alarms created.
	// Experimental.
	CreatedAlarms() *[]*AlarmWithAnnotation
	// Creates a new metric factory.
	// Experimental.
	CreateMetricFactory() MetricFactory
	// Experimental.
	CreateTitleWidget() MonitoringHeaderWidget
	// Creates a new widget factory.
	// Experimental.
	CreateWidgetFactory() IWidgetFactory
	// Returns widgets to be placed on the summary dashboard.
	// Experimental.
	SummaryWidgets() *[]awscloudwatch.IWidget
	// Returns widgets to be placed on the main dashboard.
	// Experimental.
	Widgets() *[]awscloudwatch.IWidget
}

// The jsii proxy struct for WafV2Monitoring
type jsiiProxy_WafV2Monitoring struct {
	jsiiProxy_Monitoring
}

func (j *jsiiProxy_WafV2Monitoring) Alarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation
	_jsii_.Get(
		j,
		"alarms",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) AllowedRequestsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"allowedRequestsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) BlockedRequestsMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"blockedRequestsMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) BlockedRequestsRateMetric() interface{} {
	var returns interface{}
	_jsii_.Get(
		j,
		"blockedRequestsRateMetric",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) HumanReadableName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"humanReadableName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) LocalAlarmNamePrefixOverride() *string {
	var returns *string
	_jsii_.Get(
		j,
		"localAlarmNamePrefixOverride",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WafV2Monitoring) Scope() MonitoringScope {
	var returns MonitoringScope
	_jsii_.Get(
		j,
		"scope",
		&returns,
	)
	return returns
}


// Experimental.
func NewWafV2Monitoring(scope MonitoringScope, props *WafV2MonitoringProps) WafV2Monitoring {
	_init_.Initialize()

	j := jsiiProxy_WafV2Monitoring{}

	_jsii_.Create(
		"cdk-monitoring-constructs.WafV2Monitoring",
		[]interface{}{scope, props},
		&j,
	)

	return &j
}

// Experimental.
func NewWafV2Monitoring_Override(w WafV2Monitoring, scope MonitoringScope, props *WafV2MonitoringProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.WafV2Monitoring",
		[]interface{}{scope, props},
		w,
	)
}

func (w *jsiiProxy_WafV2Monitoring) AddAlarm(alarm *AlarmWithAnnotation) {
	_jsii_.InvokeVoid(
		w,
		"addAlarm",
		[]interface{}{alarm},
	)
}

func (w *jsiiProxy_WafV2Monitoring) AlarmWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		w,
		"alarmWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateAlarmFactory(alarmNamePrefix *string) AlarmFactory {
	var returns AlarmFactory

	_jsii_.Invoke(
		w,
		"createAlarmFactory",
		[]interface{}{alarmNamePrefix},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateAllowedRequestsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		w,
		"createAllowedRequestsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateBlockedRequestsRateWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		w,
		"createBlockedRequestsRateWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateBlockedRequestsWidget(width *float64, height *float64) awscloudwatch.GraphWidget {
	var returns awscloudwatch.GraphWidget

	_jsii_.Invoke(
		w,
		"createBlockedRequestsWidget",
		[]interface{}{width, height},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreatedAlarms() *[]*AlarmWithAnnotation {
	var returns *[]*AlarmWithAnnotation

	_jsii_.Invoke(
		w,
		"createdAlarms",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateMetricFactory() MetricFactory {
	var returns MetricFactory

	_jsii_.Invoke(
		w,
		"createMetricFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateTitleWidget() MonitoringHeaderWidget {
	var returns MonitoringHeaderWidget

	_jsii_.Invoke(
		w,
		"createTitleWidget",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) CreateWidgetFactory() IWidgetFactory {
	var returns IWidgetFactory

	_jsii_.Invoke(
		w,
		"createWidgetFactory",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) SummaryWidgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		w,
		"summaryWidgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WafV2Monitoring) Widgets() *[]awscloudwatch.IWidget {
	var returns *[]awscloudwatch.IWidget

	_jsii_.Invoke(
		w,
		"widgets",
		nil, // no parameters
		&returns,
	)

	return returns
}

// Experimental.
type WafV2MonitoringOptions struct {
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Experimental.
type WafV2MonitoringProps struct {
	// Experimental.
	Acl awswafv2.CfnWebACL `field:"required" json:"acl" yaml:"acl"`
	// Experimental.
	Region *string `field:"optional" json:"region" yaml:"region"`
	// Plain name, used in naming alarms.
	//
	// This unique among other resources, and respect the AWS CDK restriction posed on alarm names.
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// Experimental.
	AlarmFriendlyName *string `field:"optional" json:"alarmFriendlyName" yaml:"alarmFriendlyName"`
	// Human-readable name is a freeform string, used as a caption or description.
	//
	// There are no limitations on what it can be.
	// Experimental.
	HumanReadableName *string `field:"optional" json:"humanReadableName" yaml:"humanReadableName"`
	// If this is defined, the local alarm name prefix used in naming alarms for the construct will be set to this value.
	//
	// The length must be 1 - 255 characters and although the validation rules are undocumented, we recommend using ASCII and hyphens.
	// See: AlarmNamingStrategy for more details on alarm name prefixes.
	//
	// Experimental.
	LocalAlarmNamePrefixOverride *string `field:"optional" json:"localAlarmNamePrefixOverride" yaml:"localAlarmNamePrefixOverride"`
	// Flag indicating if the widgets should be added to alarm dashboard.
	// Experimental.
	AddToAlarmDashboard *bool `field:"optional" json:"addToAlarmDashboard" yaml:"addToAlarmDashboard"`
	// Flag indicating if the widgets should be added to detailed dashboard.
	// Experimental.
	AddToDetailDashboard *bool `field:"optional" json:"addToDetailDashboard" yaml:"addToDetailDashboard"`
	// Flag indicating if the widgets should be added to summary dashboard.
	// Experimental.
	AddToSummaryDashboard *bool `field:"optional" json:"addToSummaryDashboard" yaml:"addToSummaryDashboard"`
	// Calls provided function to process all alarms created.
	// Experimental.
	UseCreatedAlarms IAlarmConsumer `field:"optional" json:"useCreatedAlarms" yaml:"useCreatedAlarms"`
}

// Custom wrapper class for MathExpression that supports account and region specification.
// See: https://github.com/aws/aws-cdk/issues/9039
//
// Experimental.
type XaxrMathExpression interface {
	awscloudwatch.IMetric
	// Inspect the details of the metric object.
	// Experimental.
	ToMetricConfig() *awscloudwatch.MetricConfig
	// Experimental.
	With(options *awscloudwatch.MathExpressionOptions) awscloudwatch.IMetric
}

// The jsii proxy struct for XaxrMathExpression
type jsiiProxy_XaxrMathExpression struct {
	internal.Type__awscloudwatchIMetric
}

// Experimental.
func NewXaxrMathExpression(props *XaxrMathExpressionProps) XaxrMathExpression {
	_init_.Initialize()

	j := jsiiProxy_XaxrMathExpression{}

	_jsii_.Create(
		"cdk-monitoring-constructs.XaxrMathExpression",
		[]interface{}{props},
		&j,
	)

	return &j
}

// Experimental.
func NewXaxrMathExpression_Override(x XaxrMathExpression, props *XaxrMathExpressionProps) {
	_init_.Initialize()

	_jsii_.Create(
		"cdk-monitoring-constructs.XaxrMathExpression",
		[]interface{}{props},
		x,
	)
}

func (x *jsiiProxy_XaxrMathExpression) ToMetricConfig() *awscloudwatch.MetricConfig {
	var returns *awscloudwatch.MetricConfig

	_jsii_.Invoke(
		x,
		"toMetricConfig",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (x *jsiiProxy_XaxrMathExpression) With(options *awscloudwatch.MathExpressionOptions) awscloudwatch.IMetric {
	var returns awscloudwatch.IMetric

	_jsii_.Invoke(
		x,
		"with",
		[]interface{}{options},
		&returns,
	)

	return returns
}

// Custom wrapper class for MathExpressionProps that supports account and region customization.
// See: https://github.com/aws/aws-cdk/issues/9039
//
// Experimental.
type XaxrMathExpressionProps struct {
	// Color for this metric when added to a Graph in a Dashboard.
	// Experimental.
	Color *string `field:"optional" json:"color" yaml:"color"`
	// Label for this metric when added to a Graph in a Dashboard.
	// Experimental.
	Label *string `field:"optional" json:"label" yaml:"label"`
	// The period over which the expression's statistics are applied.
	//
	// This period overrides all periods in the metrics used in this
	// math expression.
	// Experimental.
	Period awscdk.Duration `field:"optional" json:"period" yaml:"period"`
	// Account to evaluate search expressions within.
	//
	// Specifying a searchAccount has no effect to the account used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchAccount *string `field:"optional" json:"searchAccount" yaml:"searchAccount"`
	// Region to evaluate search expressions within.
	//
	// Specifying a searchRegion has no effect to the region used
	// for metrics within the expression (passed via usingMetrics).
	// Experimental.
	SearchRegion *string `field:"optional" json:"searchRegion" yaml:"searchRegion"`
	// The expression defining the metric.
	//
	// When an expression contains a SEARCH function, it cannot be used
	// within an Alarm.
	// Experimental.
	Expression *string `field:"required" json:"expression" yaml:"expression"`
	// The metrics used in the expression, in a map.
	//
	// The key is the identifier that represents the given metric in the
	// expression, and the value is the actual Metric object.
	// Experimental.
	UsingMetrics *map[string]awscloudwatch.IMetric `field:"optional" json:"usingMetrics" yaml:"usingMetrics"`
	// (experimental) Account which this metric comes from.
	// Experimental.
	Account *string `field:"optional" json:"account" yaml:"account"`
	// (experimental) Region which this metric comes from.
	// Experimental.
	Region *string `field:"optional" json:"region" yaml:"region"`
}

